%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP86C.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/20, 9:12:04
%%BoundingBox: 0 0 440 320
%%HiResBoundingBox: 0 0 440 320
%%CropBox: 0 0 440 320
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 960 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-20T09:11:22+08:00"
   xmp:CreateDate="2019-09-20T09:11:22+08:00"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmpMM:DocumentID="uuid:f878e4fa-e55a-45e2-a28a-c2efc35cf763"
   xmpMM:InstanceID="uuid:c02967ab-c7d7-40d7-9532-5241454c3526">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_instance3_13.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -320 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 320 li
440 320 li
440 0 li
cp
clp
.059998 319.782 mo
440.1 319.782 li
440.1 .218018 li
.059998 .218018 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
75.979 274.488 mo
433.099 274.488 li
433.099 8.37601 li
75.979 8.37601 li
cp
f
92.212 274.488 mo
92.212 277.988 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
92.212 274.488 mo
92.212 277.988 li
@
92.232 282.864 mo
91.518 282.864 90.986 283.214 90.622 283.914 cv
90.258 284.614 90.09 285.664 90.09 287.064 cv
90.09 288.464 90.258 289.514 90.622 290.214 cv
90.986 290.914 91.518 291.264 92.232 291.264 cv
92.946 291.264 93.478 290.914 93.842 290.214 cv
94.192 289.514 94.374 288.464 94.374 287.064 cv
94.374 285.664 94.192 284.614 93.842 283.914 cv
93.478 283.214 92.946 282.864 92.232 282.864 cv
92.232 281.772 mo
93.366 281.772 94.234 282.234 94.85 283.13 cv
95.452 284.04 95.76 285.356 95.76 287.064 cv
95.76 288.786 95.452 290.102 94.85 290.998 cv
94.234 291.894 93.366 292.342 92.232 292.342 cv
91.084 292.342 90.202 291.894 89.6 290.998 cv
88.998 290.102 88.704 288.786 88.704 287.064 cv
88.704 285.356 88.998 284.04 89.6 283.13 cv
90.202 282.234 91.084 281.772 92.232 281.772 cv
ef
158.468 274.488 mo
158.468 277.988 li
f
158.468 274.488 mo
158.468 277.988 li
@
151.316 290.998 mo
153.57 290.998 li
153.57 283.214 li
151.12 283.704 li
151.12 282.444 li
153.556 281.954 li
154.942 281.954 li
154.942 290.998 li
157.196 290.998 li
157.196 292.16 li
151.316 292.16 li
151.316 290.998 li
ef
162.912 282.864 mo
162.198 282.864 161.666 283.214 161.302 283.914 cv
160.938 284.614 160.77 285.664 160.77 287.064 cv
160.77 288.464 160.938 289.514 161.302 290.214 cv
161.666 290.914 162.198 291.264 162.912 291.264 cv
163.626 291.264 164.158 290.914 164.522 290.214 cv
164.872 289.514 165.054 288.464 165.054 287.064 cv
165.054 285.664 164.872 284.614 164.522 283.914 cv
164.158 283.214 163.626 282.864 162.912 282.864 cv
162.912 281.772 mo
164.046 281.772 164.914 282.234 165.53 283.13 cv
166.132 284.04 166.44 285.356 166.44 287.064 cv
166.44 288.786 166.132 290.102 165.53 290.998 cv
164.914 291.894 164.046 292.342 162.912 292.342 cv
161.764 292.342 160.882 291.894 160.28 290.998 cv
159.678 290.102 159.384 288.786 159.384 287.064 cv
159.384 285.356 159.678 284.04 160.28 283.13 cv
160.882 282.234 161.764 281.772 162.912 281.772 cv
ef
224.724 274.488 mo
224.724 277.988 li
f
224.724 274.488 mo
224.724 277.988 li
@
218.508 290.998 mo
223.324 290.998 li
223.324 292.16 li
216.842 292.16 li
216.842 290.998 li
217.36 290.466 218.074 289.738 218.984 288.814 cv
219.88 287.904 220.454 287.316 220.692 287.05 cv
221.14 286.56 221.448 286.14 221.616 285.79 cv
221.784 285.454 221.882 285.104 221.882 284.768 cv
221.882 284.236 221.686 283.788 221.308 283.452 cv
220.93 283.116 220.44 282.934 219.824 282.934 cv
219.39 282.934 218.928 283.018 218.452 283.158 cv
217.976 283.312 217.458 283.536 216.912 283.844 cv
216.912 282.444 li
217.472 282.22 217.99 282.052 218.466 281.94 cv
218.942 281.828 219.39 281.772 219.796 281.772 cv
220.846 281.772 221.686 282.038 222.316 282.57 cv
222.946 283.102 223.268 283.802 223.268 284.684 cv
223.268 285.104 223.184 285.51 223.03 285.874 cv
222.876 286.252 222.596 286.7 222.176 287.204 cv
222.064 287.344 221.7 287.722 221.084 288.352 cv
220.468 288.982 219.614 289.864 218.508 290.998 cv
ef
229.152 282.864 mo
228.438 282.864 227.906 283.214 227.542 283.914 cv
227.178 284.614 227.01 285.664 227.01 287.064 cv
227.01 288.464 227.178 289.514 227.542 290.214 cv
227.906 290.914 228.438 291.264 229.152 291.264 cv
229.866 291.264 230.398 290.914 230.762 290.214 cv
231.112 289.514 231.294 288.464 231.294 287.064 cv
231.294 285.664 231.112 284.614 230.762 283.914 cv
230.398 283.214 229.866 282.864 229.152 282.864 cv
229.152 281.772 mo
230.286 281.772 231.154 282.234 231.77 283.13 cv
232.372 284.04 232.68 285.356 232.68 287.064 cv
232.68 288.786 232.372 290.102 231.77 290.998 cv
231.154 291.894 230.286 292.342 229.152 292.342 cv
228.004 292.342 227.122 291.894 226.52 290.998 cv
225.918 290.102 225.624 288.786 225.624 287.064 cv
225.624 285.356 225.918 284.04 226.52 283.13 cv
227.122 282.234 228.004 281.772 229.152 281.772 cv
ef
290.98 274.488 mo
290.98 277.988 li
f
290.98 274.488 mo
290.98 277.988 li
@
287.744 286.658 mo
288.402 286.798 288.92 287.092 289.284 287.54 cv
289.648 287.988 289.844 288.548 289.844 289.192 cv
289.844 290.2 289.494 290.984 288.808 291.53 cv
288.108 292.076 287.128 292.342 285.854 292.342 cv
285.42 292.342 284.972 292.3 284.524 292.216 cv
284.076 292.146 283.6 292.02 283.124 291.852 cv
283.124 290.522 li
283.502 290.746 283.922 290.914 284.384 291.026 cv
284.832 291.138 285.308 291.194 285.812 291.194 cv
286.68 291.194 287.338 291.026 287.786 290.69 cv
288.234 290.354 288.472 289.85 288.472 289.192 cv
288.472 288.604 288.262 288.128 287.842 287.792 cv
287.422 287.456 286.834 287.274 286.078 287.274 cv
284.888 287.274 li
284.888 286.14 li
286.134 286.14 li
286.806 286.14 287.324 286.014 287.688 285.734 cv
288.052 285.468 288.234 285.076 288.234 284.558 cv
288.234 284.04 288.038 283.634 287.674 283.354 cv
287.296 283.074 286.764 282.934 286.078 282.934 cv
285.7 282.934 285.294 282.976 284.86 283.06 cv
284.426 283.144 283.95 283.27 283.432 283.438 cv
283.432 282.206 li
283.95 282.066 284.44 281.954 284.902 281.884 cv
285.35 281.814 285.784 281.772 286.204 281.772 cv
287.24 281.772 288.066 282.01 288.682 282.486 cv
289.298 282.962 289.606 283.606 289.606 284.418 cv
289.606 284.978 289.438 285.454 289.116 285.846 cv
288.794 286.238 288.332 286.518 287.744 286.658 cv
ef
295.392 282.864 mo
294.678 282.864 294.146 283.214 293.782 283.914 cv
293.418 284.614 293.25 285.664 293.25 287.064 cv
293.25 288.464 293.418 289.514 293.782 290.214 cv
294.146 290.914 294.678 291.264 295.392 291.264 cv
296.106 291.264 296.638 290.914 297.002 290.214 cv
297.352 289.514 297.534 288.464 297.534 287.064 cv
297.534 285.664 297.352 284.614 297.002 283.914 cv
296.638 283.214 296.106 282.864 295.392 282.864 cv
295.392 281.772 mo
296.526 281.772 297.394 282.234 298.01 283.13 cv
298.612 284.04 298.92 285.356 298.92 287.064 cv
298.92 288.786 298.612 290.102 298.01 290.998 cv
297.394 291.894 296.526 292.342 295.392 292.342 cv
294.244 292.342 293.362 291.894 292.76 290.998 cv
292.158 290.102 291.864 288.786 291.864 287.064 cv
291.864 285.356 292.158 284.04 292.76 283.13 cv
293.362 282.234 294.244 281.772 295.392 281.772 cv
ef
357.236 274.488 mo
357.236 277.988 li
f
357.236 274.488 mo
357.236 277.988 li
@
353.592 283.158 mo
350.106 288.604 li
353.592 288.604 li
353.592 283.158 li
353.228 281.954 mo
354.964 281.954 li
354.964 288.604 li
356.42 288.604 li
356.42 289.752 li
354.964 289.752 li
354.964 292.16 li
353.592 292.16 li
353.592 289.752 li
348.986 289.752 li
348.986 288.422 li
353.228 281.954 li
ef
361.632 282.864 mo
360.918 282.864 360.386 283.214 360.022 283.914 cv
359.658 284.614 359.49 285.664 359.49 287.064 cv
359.49 288.464 359.658 289.514 360.022 290.214 cv
360.386 290.914 360.918 291.264 361.632 291.264 cv
362.346 291.264 362.878 290.914 363.242 290.214 cv
363.592 289.514 363.774 288.464 363.774 287.064 cv
363.774 285.664 363.592 284.614 363.242 283.914 cv
362.878 283.214 362.346 282.864 361.632 282.864 cv
361.632 281.772 mo
362.766 281.772 363.634 282.234 364.25 283.13 cv
364.852 284.04 365.16 285.356 365.16 287.064 cv
365.16 288.786 364.852 290.102 364.25 290.998 cv
363.634 291.894 362.766 292.342 361.632 292.342 cv
360.484 292.342 359.602 291.894 359 290.998 cv
358.398 290.102 358.104 288.786 358.104 287.064 cv
358.104 285.356 358.398 284.04 359 283.13 cv
359.602 282.234 360.484 281.772 361.632 281.772 cv
ef
423.492 274.488 mo
423.492 277.988 li
f
423.492 274.488 mo
423.492 277.988 li
@
416.052 281.954 mo
421.47 281.954 li
421.47 283.116 li
417.312 283.116 li
417.312 285.622 li
417.508 285.552 417.718 285.496 417.914 285.468 cv
418.11 285.44 418.32 285.412 418.516 285.412 cv
419.65 285.412 420.546 285.734 421.218 286.35 cv
421.89 286.98 422.226 287.82 422.226 288.884 cv
422.226 289.99 421.876 290.844 421.19 291.446 cv
420.504 292.048 419.538 292.342 418.306 292.342 cv
417.872 292.342 417.438 292.3 416.99 292.244 cv
416.542 292.174 416.094 292.076 415.618 291.922 cv
415.618 290.536 li
416.024 290.76 416.444 290.928 416.892 291.04 cv
417.326 291.152 417.788 291.194 418.278 291.194 cv
419.062 291.194 419.692 290.998 420.154 290.578 cv
420.602 290.158 420.84 289.598 420.84 288.884 cv
420.84 288.184 420.602 287.624 420.154 287.204 cv
419.692 286.784 419.062 286.574 418.278 286.574 cv
417.914 286.574 417.536 286.616 417.172 286.7 cv
416.808 286.784 416.43 286.91 416.052 287.078 cv
416.052 281.954 li
ef
427.992 282.864 mo
427.278 282.864 426.746 283.214 426.382 283.914 cv
426.018 284.614 425.85 285.664 425.85 287.064 cv
425.85 288.464 426.018 289.514 426.382 290.214 cv
426.746 290.914 427.278 291.264 427.992 291.264 cv
428.706 291.264 429.238 290.914 429.602 290.214 cv
429.952 289.514 430.134 288.464 430.134 287.064 cv
430.134 285.664 429.952 284.614 429.602 283.914 cv
429.238 283.214 428.706 282.864 427.992 282.864 cv
427.992 281.772 mo
429.126 281.772 429.994 282.234 430.61 283.13 cv
431.212 284.04 431.52 285.356 431.52 287.064 cv
431.52 288.786 431.212 290.102 430.61 290.998 cv
429.994 291.894 429.126 292.342 427.992 292.342 cv
426.844 292.342 425.962 291.894 425.36 290.998 cv
424.758 290.102 424.464 288.786 424.464 287.064 cv
424.464 285.356 424.758 284.04 425.36 283.13 cv
425.962 282.234 426.844 281.772 427.992 281.772 cv
ef
232.618 300.608 mo
232.618 308.546 li
234.284 308.546 li
235.684 308.546 236.72 308.238 237.378 307.594 cv
238.022 306.95 238.358 305.942 238.358 304.57 cv
238.358 303.198 238.022 302.204 237.378 301.56 cv
236.72 300.93 235.684 300.608 234.284 300.608 cv
232.618 300.608 li
231.232 299.474 mo
234.074 299.474 li
236.048 299.474 237.504 299.894 238.428 300.706 cv
239.352 301.532 239.814 302.82 239.814 304.57 cv
239.814 306.334 239.338 307.622 238.414 308.448 cv
237.49 309.274 236.034 309.68 234.074 309.68 cv
231.232 309.68 li
231.232 299.474 li
ef
241.976 302.022 mo
243.236 302.022 li
243.236 309.68 li
241.976 309.68 li
241.976 302.022 li
241.976 299.04 mo
241.976 299.04 mo
243.236 299.04 li
243.236 300.636 li
241.976 300.636 li
cp
ef
250.702 302.246 mo
250.702 303.436 li
250.338 303.268 249.974 303.128 249.596 303.03 cv
249.204 302.946 248.812 302.89 248.406 302.89 cv
247.776 302.89 247.3 302.988 246.992 303.184 cv
246.684 303.38 246.53 303.66 246.53 304.038 cv
246.53 304.332 246.642 304.556 246.866 304.724 cv
247.09 304.892 247.538 305.06 248.21 305.2 cv
248.644 305.298 li
249.54 305.494 250.17 305.774 250.548 306.11 cv
250.912 306.46 251.108 306.95 251.108 307.566 cv
251.108 308.28 250.828 308.84 250.268 309.246 cv
249.708 309.666 248.924 309.862 247.944 309.862 cv
247.524 309.862 247.104 309.82 246.656 309.75 cv
246.208 309.68 245.746 309.568 245.256 309.4 cv
245.256 308.098 li
245.718 308.35 246.18 308.532 246.628 308.644 cv
247.076 308.77 247.524 308.826 247.972 308.826 cv
248.56 308.826 249.022 308.728 249.344 308.532 cv
249.652 308.336 249.82 308.042 249.82 307.664 cv
249.82 307.328 249.694 307.062 249.47 306.88 cv
249.246 306.698 248.742 306.516 247.958 306.348 cv
247.524 306.25 li
246.74 306.082 246.166 305.83 245.83 305.494 cv
245.48 305.158 245.312 304.696 245.312 304.094 cv
245.312 303.38 245.564 302.82 246.068 302.428 cv
246.572 302.036 247.3 301.84 248.252 301.84 cv
248.714 301.84 249.148 301.882 249.568 301.952 cv
249.974 302.022 250.352 302.12 250.702 302.246 cv
ef
253.094 299.04 mo
254.354 299.04 li
254.354 305.326 li
258.106 302.022 li
259.716 302.022 li
255.656 305.606 li
259.884 309.68 li
258.246 309.68 li
254.354 305.942 li
254.354 309.68 li
253.094 309.68 li
253.094 299.04 li
ef
265.672 309.68 mo
267.058 309.68 li
267.058 299.474 li
265.672 299.474 li
cp
f
271.258 300.608 mo
271.258 308.546 li
272.924 308.546 li
274.324 308.546 275.36 308.238 276.018 307.594 cv
276.662 306.95 276.998 305.942 276.998 304.57 cv
276.998 303.198 276.662 302.204 276.018 301.56 cv
275.36 300.93 274.324 300.608 272.924 300.608 cv
271.258 300.608 li
269.872 299.474 mo
272.714 299.474 li
274.688 299.474 276.144 299.894 277.068 300.706 cv
277.992 301.532 278.454 302.82 278.454 304.57 cv
278.454 306.334 277.978 307.622 277.054 308.448 cv
276.13 309.274 274.674 309.68 272.714 309.68 cv
269.872 309.68 li
269.872 299.474 li
ef
75.979 274.488 mo
72.479 274.488 li
f
75.979 274.488 mo
72.479 274.488 li
@
64.512 270.504 mo
63.798 270.504 63.266 270.854 62.902 271.554 cv
62.538 272.254 62.37 273.304 62.37 274.704 cv
62.37 276.104 62.538 277.154 62.902 277.854 cv
63.266 278.554 63.798 278.904 64.512 278.904 cv
65.226 278.904 65.758 278.554 66.122 277.854 cv
66.472 277.154 66.654 276.104 66.654 274.704 cv
66.654 273.304 66.472 272.254 66.122 271.554 cv
65.758 270.854 65.226 270.504 64.512 270.504 cv
64.512 269.412 mo
65.646 269.412 66.514 269.874 67.13 270.77 cv
67.732 271.68 68.04 272.996 68.04 274.704 cv
68.04 276.426 67.732 277.742 67.13 278.638 cv
66.514 279.534 65.646 279.982 64.512 279.982 cv
63.364 279.982 62.482 279.534 61.88 278.638 cv
61.278 277.742 60.984 276.426 60.984 274.704 cv
60.984 272.996 61.278 271.68 61.88 270.77 cv
62.482 269.874 63.364 269.412 64.512 269.412 cv
ef
75.979 230.863 mo
72.479 230.863 li
f
75.979 230.863 mo
72.479 230.863 li
@
26.156 235.078 mo
28.41 235.078 li
28.41 227.294 li
25.96 227.784 li
25.96 226.524 li
28.396 226.034 li
29.782 226.034 li
29.782 235.078 li
32.036 235.078 li
32.036 236.24 li
26.156 236.24 li
26.156 235.078 li
ef
37.752 226.944 mo
37.038 226.944 36.506 227.294 36.142 227.994 cv
35.778 228.694 35.61 229.744 35.61 231.144 cv
35.61 232.544 35.778 233.594 36.142 234.294 cv
36.506 234.994 37.038 235.344 37.752 235.344 cv
38.466 235.344 38.998 234.994 39.362 234.294 cv
39.712 233.594 39.894 232.544 39.894 231.144 cv
39.894 229.744 39.712 228.694 39.362 227.994 cv
38.998 227.294 38.466 226.944 37.752 226.944 cv
37.752 225.852 mo
38.886 225.852 39.754 226.314 40.37 227.21 cv
40.972 228.12 41.28 229.436 41.28 231.144 cv
41.28 232.866 40.972 234.182 40.37 235.078 cv
39.754 235.974 38.886 236.422 37.752 236.422 cv
36.604 236.422 35.722 235.974 35.12 235.078 cv
34.518 234.182 34.224 232.866 34.224 231.144 cv
34.224 229.436 34.518 228.12 35.12 227.21 cv
35.722 226.314 36.604 225.852 37.752 225.852 cv
ef
46.752 226.944 mo
46.038 226.944 45.506 227.294 45.142 227.994 cv
44.778 228.694 44.61 229.744 44.61 231.144 cv
44.61 232.544 44.778 233.594 45.142 234.294 cv
45.506 234.994 46.038 235.344 46.752 235.344 cv
47.466 235.344 47.998 234.994 48.362 234.294 cv
48.712 233.594 48.894 232.544 48.894 231.144 cv
48.894 229.744 48.712 228.694 48.362 227.994 cv
47.998 227.294 47.466 226.944 46.752 226.944 cv
46.752 225.852 mo
47.886 225.852 48.754 226.314 49.37 227.21 cv
49.972 228.12 50.28 229.436 50.28 231.144 cv
50.28 232.866 49.972 234.182 49.37 235.078 cv
48.754 235.974 47.886 236.422 46.752 236.422 cv
45.604 236.422 44.722 235.974 44.12 235.078 cv
43.518 234.182 43.224 232.866 43.224 231.144 cv
43.224 229.436 43.518 228.12 44.12 227.21 cv
44.722 226.314 45.604 225.852 46.752 225.852 cv
ef
55.632 226.944 mo
54.918 226.944 54.386 227.294 54.022 227.994 cv
53.658 228.694 53.49 229.744 53.49 231.144 cv
53.49 232.544 53.658 233.594 54.022 234.294 cv
54.386 234.994 54.918 235.344 55.632 235.344 cv
56.346 235.344 56.878 234.994 57.242 234.294 cv
57.592 233.594 57.774 232.544 57.774 231.144 cv
57.774 229.744 57.592 228.694 57.242 227.994 cv
56.878 227.294 56.346 226.944 55.632 226.944 cv
55.632 225.852 mo
56.766 225.852 57.634 226.314 58.25 227.21 cv
58.852 228.12 59.16 229.436 59.16 231.144 cv
59.16 232.866 58.852 234.182 58.25 235.078 cv
57.634 235.974 56.766 236.422 55.632 236.422 cv
54.484 236.422 53.602 235.974 53 235.078 cv
52.398 234.182 52.104 232.866 52.104 231.144 cv
52.104 229.436 52.398 228.12 53 227.21 cv
53.602 226.314 54.484 225.852 55.632 225.852 cv
ef
64.512 226.944 mo
63.798 226.944 63.266 227.294 62.902 227.994 cv
62.538 228.694 62.37 229.744 62.37 231.144 cv
62.37 232.544 62.538 233.594 62.902 234.294 cv
63.266 234.994 63.798 235.344 64.512 235.344 cv
65.226 235.344 65.758 234.994 66.122 234.294 cv
66.472 233.594 66.654 232.544 66.654 231.144 cv
66.654 229.744 66.472 228.694 66.122 227.994 cv
65.758 227.294 65.226 226.944 64.512 226.944 cv
64.512 225.852 mo
65.646 225.852 66.514 226.314 67.13 227.21 cv
67.732 228.12 68.04 229.436 68.04 231.144 cv
68.04 232.866 67.732 234.182 67.13 235.078 cv
66.514 235.974 65.646 236.422 64.512 236.422 cv
63.364 236.422 62.482 235.974 61.88 235.078 cv
61.278 234.182 60.984 232.866 60.984 231.144 cv
60.984 229.436 61.278 228.12 61.88 227.21 cv
62.482 226.314 63.364 225.852 64.512 225.852 cv
ef
75.979 187.238 mo
72.479 187.238 li
f
75.979 187.238 mo
72.479 187.238 li
@
27.108 191.398 mo
31.924 191.398 li
31.924 192.56 li
25.442 192.56 li
25.442 191.398 li
25.96 190.866 26.674 190.138 27.584 189.214 cv
28.48 188.304 29.054 187.716 29.292 187.45 cv
29.74 186.96 30.048 186.54 30.216 186.19 cv
30.384 185.854 30.482 185.504 30.482 185.168 cv
30.482 184.636 30.286 184.188 29.908 183.852 cv
29.53 183.516 29.04 183.334 28.424 183.334 cv
27.99 183.334 27.528 183.418 27.052 183.558 cv
26.576 183.712 26.058 183.936 25.512 184.244 cv
25.512 182.844 li
26.072 182.62 26.59 182.452 27.066 182.34 cv
27.542 182.228 27.99 182.172 28.396 182.172 cv
29.446 182.172 30.286 182.438 30.916 182.97 cv
31.546 183.502 31.868 184.202 31.868 185.084 cv
31.868 185.504 31.784 185.91 31.63 186.274 cv
31.476 186.652 31.196 187.1 30.776 187.604 cv
30.664 187.744 30.3 188.122 29.684 188.752 cv
29.068 189.382 28.214 190.264 27.108 191.398 cv
ef
37.752 183.264 mo
37.038 183.264 36.506 183.614 36.142 184.314 cv
35.778 185.014 35.61 186.064 35.61 187.464 cv
35.61 188.864 35.778 189.914 36.142 190.614 cv
36.506 191.314 37.038 191.664 37.752 191.664 cv
38.466 191.664 38.998 191.314 39.362 190.614 cv
39.712 189.914 39.894 188.864 39.894 187.464 cv
39.894 186.064 39.712 185.014 39.362 184.314 cv
38.998 183.614 38.466 183.264 37.752 183.264 cv
37.752 182.172 mo
38.886 182.172 39.754 182.634 40.37 183.53 cv
40.972 184.44 41.28 185.756 41.28 187.464 cv
41.28 189.186 40.972 190.502 40.37 191.398 cv
39.754 192.294 38.886 192.742 37.752 192.742 cv
36.604 192.742 35.722 192.294 35.12 191.398 cv
34.518 190.502 34.224 189.186 34.224 187.464 cv
34.224 185.756 34.518 184.44 35.12 183.53 cv
35.722 182.634 36.604 182.172 37.752 182.172 cv
ef
46.752 183.264 mo
46.038 183.264 45.506 183.614 45.142 184.314 cv
44.778 185.014 44.61 186.064 44.61 187.464 cv
44.61 188.864 44.778 189.914 45.142 190.614 cv
45.506 191.314 46.038 191.664 46.752 191.664 cv
47.466 191.664 47.998 191.314 48.362 190.614 cv
48.712 189.914 48.894 188.864 48.894 187.464 cv
48.894 186.064 48.712 185.014 48.362 184.314 cv
47.998 183.614 47.466 183.264 46.752 183.264 cv
46.752 182.172 mo
47.886 182.172 48.754 182.634 49.37 183.53 cv
49.972 184.44 50.28 185.756 50.28 187.464 cv
50.28 189.186 49.972 190.502 49.37 191.398 cv
48.754 192.294 47.886 192.742 46.752 192.742 cv
45.604 192.742 44.722 192.294 44.12 191.398 cv
43.518 190.502 43.224 189.186 43.224 187.464 cv
43.224 185.756 43.518 184.44 44.12 183.53 cv
44.722 182.634 45.604 182.172 46.752 182.172 cv
ef
55.632 183.264 mo
54.918 183.264 54.386 183.614 54.022 184.314 cv
53.658 185.014 53.49 186.064 53.49 187.464 cv
53.49 188.864 53.658 189.914 54.022 190.614 cv
54.386 191.314 54.918 191.664 55.632 191.664 cv
56.346 191.664 56.878 191.314 57.242 190.614 cv
57.592 189.914 57.774 188.864 57.774 187.464 cv
57.774 186.064 57.592 185.014 57.242 184.314 cv
56.878 183.614 56.346 183.264 55.632 183.264 cv
55.632 182.172 mo
56.766 182.172 57.634 182.634 58.25 183.53 cv
58.852 184.44 59.16 185.756 59.16 187.464 cv
59.16 189.186 58.852 190.502 58.25 191.398 cv
57.634 192.294 56.766 192.742 55.632 192.742 cv
54.484 192.742 53.602 192.294 53 191.398 cv
52.398 190.502 52.104 189.186 52.104 187.464 cv
52.104 185.756 52.398 184.44 53 183.53 cv
53.602 182.634 54.484 182.172 55.632 182.172 cv
ef
64.512 183.264 mo
63.798 183.264 63.266 183.614 62.902 184.314 cv
62.538 185.014 62.37 186.064 62.37 187.464 cv
62.37 188.864 62.538 189.914 62.902 190.614 cv
63.266 191.314 63.798 191.664 64.512 191.664 cv
65.226 191.664 65.758 191.314 66.122 190.614 cv
66.472 189.914 66.654 188.864 66.654 187.464 cv
66.654 186.064 66.472 185.014 66.122 184.314 cv
65.758 183.614 65.226 183.264 64.512 183.264 cv
64.512 182.172 mo
65.646 182.172 66.514 182.634 67.13 183.53 cv
67.732 184.44 68.04 185.756 68.04 187.464 cv
68.04 189.186 67.732 190.502 67.13 191.398 cv
66.514 192.294 65.646 192.742 64.512 192.742 cv
63.364 192.742 62.482 192.294 61.88 191.398 cv
61.278 190.502 60.984 189.186 60.984 187.464 cv
60.984 185.756 61.278 184.44 61.88 183.53 cv
62.482 182.634 63.364 182.172 64.512 182.172 cv
ef
75.979 143.613 mo
72.479 143.613 li
f
75.979 143.613 mo
72.479 143.613 li
@
30.104 143.378 mo
30.762 143.518 31.28 143.812 31.644 144.26 cv
32.008 144.708 32.204 145.268 32.204 145.912 cv
32.204 146.92 31.854 147.704 31.168 148.25 cv
30.468 148.796 29.488 149.062 28.214 149.062 cv
27.78 149.062 27.332 149.02 26.884 148.936 cv
26.436 148.866 25.96 148.74 25.484 148.572 cv
25.484 147.242 li
25.862 147.466 26.282 147.634 26.744 147.746 cv
27.192 147.858 27.668 147.914 28.172 147.914 cv
29.04 147.914 29.698 147.746 30.146 147.41 cv
30.594 147.074 30.832 146.57 30.832 145.912 cv
30.832 145.324 30.622 144.848 30.202 144.512 cv
29.782 144.176 29.194 143.994 28.438 143.994 cv
27.248 143.994 li
27.248 142.86 li
28.494 142.86 li
29.166 142.86 29.684 142.734 30.048 142.454 cv
30.412 142.188 30.594 141.796 30.594 141.278 cv
30.594 140.76 30.398 140.354 30.034 140.074 cv
29.656 139.794 29.124 139.654 28.438 139.654 cv
28.06 139.654 27.654 139.696 27.22 139.78 cv
26.786 139.864 26.31 139.99 25.792 140.158 cv
25.792 138.926 li
26.31 138.786 26.8 138.674 27.262 138.604 cv
27.71 138.534 28.144 138.492 28.564 138.492 cv
29.6 138.492 30.426 138.73 31.042 139.206 cv
31.658 139.682 31.966 140.326 31.966 141.138 cv
31.966 141.698 31.798 142.174 31.476 142.566 cv
31.154 142.958 30.692 143.238 30.104 143.378 cv
ef
37.752 139.584 mo
37.038 139.584 36.506 139.934 36.142 140.634 cv
35.778 141.334 35.61 142.384 35.61 143.784 cv
35.61 145.184 35.778 146.234 36.142 146.934 cv
36.506 147.634 37.038 147.984 37.752 147.984 cv
38.466 147.984 38.998 147.634 39.362 146.934 cv
39.712 146.234 39.894 145.184 39.894 143.784 cv
39.894 142.384 39.712 141.334 39.362 140.634 cv
38.998 139.934 38.466 139.584 37.752 139.584 cv
37.752 138.492 mo
38.886 138.492 39.754 138.954 40.37 139.85 cv
40.972 140.76 41.28 142.076 41.28 143.784 cv
41.28 145.506 40.972 146.822 40.37 147.718 cv
39.754 148.614 38.886 149.062 37.752 149.062 cv
36.604 149.062 35.722 148.614 35.12 147.718 cv
34.518 146.822 34.224 145.506 34.224 143.784 cv
34.224 142.076 34.518 140.76 35.12 139.85 cv
35.722 138.954 36.604 138.492 37.752 138.492 cv
ef
46.752 139.584 mo
46.038 139.584 45.506 139.934 45.142 140.634 cv
44.778 141.334 44.61 142.384 44.61 143.784 cv
44.61 145.184 44.778 146.234 45.142 146.934 cv
45.506 147.634 46.038 147.984 46.752 147.984 cv
47.466 147.984 47.998 147.634 48.362 146.934 cv
48.712 146.234 48.894 145.184 48.894 143.784 cv
48.894 142.384 48.712 141.334 48.362 140.634 cv
47.998 139.934 47.466 139.584 46.752 139.584 cv
46.752 138.492 mo
47.886 138.492 48.754 138.954 49.37 139.85 cv
49.972 140.76 50.28 142.076 50.28 143.784 cv
50.28 145.506 49.972 146.822 49.37 147.718 cv
48.754 148.614 47.886 149.062 46.752 149.062 cv
45.604 149.062 44.722 148.614 44.12 147.718 cv
43.518 146.822 43.224 145.506 43.224 143.784 cv
43.224 142.076 43.518 140.76 44.12 139.85 cv
44.722 138.954 45.604 138.492 46.752 138.492 cv
ef
55.632 139.584 mo
54.918 139.584 54.386 139.934 54.022 140.634 cv
53.658 141.334 53.49 142.384 53.49 143.784 cv
53.49 145.184 53.658 146.234 54.022 146.934 cv
54.386 147.634 54.918 147.984 55.632 147.984 cv
56.346 147.984 56.878 147.634 57.242 146.934 cv
57.592 146.234 57.774 145.184 57.774 143.784 cv
57.774 142.384 57.592 141.334 57.242 140.634 cv
56.878 139.934 56.346 139.584 55.632 139.584 cv
55.632 138.492 mo
56.766 138.492 57.634 138.954 58.25 139.85 cv
58.852 140.76 59.16 142.076 59.16 143.784 cv
59.16 145.506 58.852 146.822 58.25 147.718 cv
57.634 148.614 56.766 149.062 55.632 149.062 cv
54.484 149.062 53.602 148.614 53 147.718 cv
52.398 146.822 52.104 145.506 52.104 143.784 cv
52.104 142.076 52.398 140.76 53 139.85 cv
53.602 138.954 54.484 138.492 55.632 138.492 cv
ef
64.512 139.584 mo
63.798 139.584 63.266 139.934 62.902 140.634 cv
62.538 141.334 62.37 142.384 62.37 143.784 cv
62.37 145.184 62.538 146.234 62.902 146.934 cv
63.266 147.634 63.798 147.984 64.512 147.984 cv
65.226 147.984 65.758 147.634 66.122 146.934 cv
66.472 146.234 66.654 145.184 66.654 143.784 cv
66.654 142.384 66.472 141.334 66.122 140.634 cv
65.758 139.934 65.226 139.584 64.512 139.584 cv
64.512 138.492 mo
65.646 138.492 66.514 138.954 67.13 139.85 cv
67.732 140.76 68.04 142.076 68.04 143.784 cv
68.04 145.506 67.732 146.822 67.13 147.718 cv
66.514 148.614 65.646 149.062 64.512 149.062 cv
63.364 149.062 62.482 148.614 61.88 147.718 cv
61.278 146.822 60.984 145.506 60.984 143.784 cv
60.984 142.076 61.278 140.76 61.88 139.85 cv
62.482 138.954 63.364 138.492 64.512 138.492 cv
ef
75.979 99.989 mo
72.479 99.989 li
f
75.979 99.989 mo
72.479 99.989 li
@
29.712 96.318 mo
26.226 101.764 li
29.712 101.764 li
29.712 96.318 li
29.348 95.114 mo
31.084 95.114 li
31.084 101.764 li
32.54 101.764 li
32.54 102.912 li
31.084 102.912 li
31.084 105.32 li
29.712 105.32 li
29.712 102.912 li
25.106 102.912 li
25.106 101.582 li
29.348 95.114 li
ef
37.752 96.024 mo
37.038 96.024 36.506 96.374 36.142 97.074 cv
35.778 97.774 35.61 98.824 35.61 100.224 cv
35.61 101.624 35.778 102.674 36.142 103.374 cv
36.506 104.074 37.038 104.424 37.752 104.424 cv
38.466 104.424 38.998 104.074 39.362 103.374 cv
39.712 102.674 39.894 101.624 39.894 100.224 cv
39.894 98.824 39.712 97.774 39.362 97.074 cv
38.998 96.374 38.466 96.024 37.752 96.024 cv
37.752 94.932 mo
38.886 94.932 39.754 95.394 40.37 96.29 cv
40.972 97.2 41.28 98.516 41.28 100.224 cv
41.28 101.946 40.972 103.262 40.37 104.158 cv
39.754 105.054 38.886 105.502 37.752 105.502 cv
36.604 105.502 35.722 105.054 35.12 104.158 cv
34.518 103.262 34.224 101.946 34.224 100.224 cv
34.224 98.516 34.518 97.2 35.12 96.29 cv
35.722 95.394 36.604 94.932 37.752 94.932 cv
ef
46.752 96.024 mo
46.038 96.024 45.506 96.374 45.142 97.074 cv
44.778 97.774 44.61 98.824 44.61 100.224 cv
44.61 101.624 44.778 102.674 45.142 103.374 cv
45.506 104.074 46.038 104.424 46.752 104.424 cv
47.466 104.424 47.998 104.074 48.362 103.374 cv
48.712 102.674 48.894 101.624 48.894 100.224 cv
48.894 98.824 48.712 97.774 48.362 97.074 cv
47.998 96.374 47.466 96.024 46.752 96.024 cv
46.752 94.932 mo
47.886 94.932 48.754 95.394 49.37 96.29 cv
49.972 97.2 50.28 98.516 50.28 100.224 cv
50.28 101.946 49.972 103.262 49.37 104.158 cv
48.754 105.054 47.886 105.502 46.752 105.502 cv
45.604 105.502 44.722 105.054 44.12 104.158 cv
43.518 103.262 43.224 101.946 43.224 100.224 cv
43.224 98.516 43.518 97.2 44.12 96.29 cv
44.722 95.394 45.604 94.932 46.752 94.932 cv
ef
55.632 96.024 mo
54.918 96.024 54.386 96.374 54.022 97.074 cv
53.658 97.774 53.49 98.824 53.49 100.224 cv
53.49 101.624 53.658 102.674 54.022 103.374 cv
54.386 104.074 54.918 104.424 55.632 104.424 cv
56.346 104.424 56.878 104.074 57.242 103.374 cv
57.592 102.674 57.774 101.624 57.774 100.224 cv
57.774 98.824 57.592 97.774 57.242 97.074 cv
56.878 96.374 56.346 96.024 55.632 96.024 cv
55.632 94.932 mo
56.766 94.932 57.634 95.394 58.25 96.29 cv
58.852 97.2 59.16 98.516 59.16 100.224 cv
59.16 101.946 58.852 103.262 58.25 104.158 cv
57.634 105.054 56.766 105.502 55.632 105.502 cv
54.484 105.502 53.602 105.054 53 104.158 cv
52.398 103.262 52.104 101.946 52.104 100.224 cv
52.104 98.516 52.398 97.2 53 96.29 cv
53.602 95.394 54.484 94.932 55.632 94.932 cv
ef
64.512 96.024 mo
63.798 96.024 63.266 96.374 62.902 97.074 cv
62.538 97.774 62.37 98.824 62.37 100.224 cv
62.37 101.624 62.538 102.674 62.902 103.374 cv
63.266 104.074 63.798 104.424 64.512 104.424 cv
65.226 104.424 65.758 104.074 66.122 103.374 cv
66.472 102.674 66.654 101.624 66.654 100.224 cv
66.654 98.824 66.472 97.774 66.122 97.074 cv
65.758 96.374 65.226 96.024 64.512 96.024 cv
64.512 94.932 mo
65.646 94.932 66.514 95.394 67.13 96.29 cv
67.732 97.2 68.04 98.516 68.04 100.224 cv
68.04 101.946 67.732 103.262 67.13 104.158 cv
66.514 105.054 65.646 105.502 64.512 105.502 cv
63.364 105.502 62.482 105.054 61.88 104.158 cv
61.278 103.262 60.984 101.946 60.984 100.224 cv
60.984 98.516 61.278 97.2 61.88 96.29 cv
62.482 95.394 63.364 94.932 64.512 94.932 cv
ef
75.979 56.364 mo
72.479 56.364 li
f
75.979 56.364 mo
72.479 56.364 li
@
25.932 51.434 mo
31.35 51.434 li
31.35 52.596 li
27.192 52.596 li
27.192 55.102 li
27.388 55.032 27.598 54.976 27.794 54.948 cv
27.99 54.92 28.2 54.892 28.396 54.892 cv
29.53 54.892 30.426 55.214 31.098 55.83 cv
31.77 56.46 32.106 57.3 32.106 58.364 cv
32.106 59.47 31.756 60.324 31.07 60.926 cv
30.384 61.528 29.418 61.822 28.186 61.822 cv
27.752 61.822 27.318 61.78 26.87 61.724 cv
26.422 61.654 25.974 61.556 25.498 61.402 cv
25.498 60.016 li
25.904 60.24 26.324 60.408 26.772 60.52 cv
27.206 60.632 27.668 60.674 28.158 60.674 cv
28.942 60.674 29.572 60.478 30.034 60.058 cv
30.482 59.638 30.72 59.078 30.72 58.364 cv
30.72 57.664 30.482 57.104 30.034 56.684 cv
29.572 56.264 28.942 56.054 28.158 56.054 cv
27.794 56.054 27.416 56.096 27.052 56.18 cv
26.688 56.264 26.31 56.39 25.932 56.558 cv
25.932 51.434 li
ef
37.752 52.344 mo
37.038 52.344 36.506 52.694 36.142 53.394 cv
35.778 54.094 35.61 55.144 35.61 56.544 cv
35.61 57.944 35.778 58.994 36.142 59.694 cv
36.506 60.394 37.038 60.744 37.752 60.744 cv
38.466 60.744 38.998 60.394 39.362 59.694 cv
39.712 58.994 39.894 57.944 39.894 56.544 cv
39.894 55.144 39.712 54.094 39.362 53.394 cv
38.998 52.694 38.466 52.344 37.752 52.344 cv
37.752 51.252 mo
38.886 51.252 39.754 51.714 40.37 52.61 cv
40.972 53.52 41.28 54.836 41.28 56.544 cv
41.28 58.266 40.972 59.582 40.37 60.478 cv
39.754 61.374 38.886 61.822 37.752 61.822 cv
36.604 61.822 35.722 61.374 35.12 60.478 cv
34.518 59.582 34.224 58.266 34.224 56.544 cv
34.224 54.836 34.518 53.52 35.12 52.61 cv
35.722 51.714 36.604 51.252 37.752 51.252 cv
ef
46.752 52.344 mo
46.038 52.344 45.506 52.694 45.142 53.394 cv
44.778 54.094 44.61 55.144 44.61 56.544 cv
44.61 57.944 44.778 58.994 45.142 59.694 cv
45.506 60.394 46.038 60.744 46.752 60.744 cv
47.466 60.744 47.998 60.394 48.362 59.694 cv
48.712 58.994 48.894 57.944 48.894 56.544 cv
48.894 55.144 48.712 54.094 48.362 53.394 cv
47.998 52.694 47.466 52.344 46.752 52.344 cv
46.752 51.252 mo
47.886 51.252 48.754 51.714 49.37 52.61 cv
49.972 53.52 50.28 54.836 50.28 56.544 cv
50.28 58.266 49.972 59.582 49.37 60.478 cv
48.754 61.374 47.886 61.822 46.752 61.822 cv
45.604 61.822 44.722 61.374 44.12 60.478 cv
43.518 59.582 43.224 58.266 43.224 56.544 cv
43.224 54.836 43.518 53.52 44.12 52.61 cv
44.722 51.714 45.604 51.252 46.752 51.252 cv
ef
55.632 52.344 mo
54.918 52.344 54.386 52.694 54.022 53.394 cv
53.658 54.094 53.49 55.144 53.49 56.544 cv
53.49 57.944 53.658 58.994 54.022 59.694 cv
54.386 60.394 54.918 60.744 55.632 60.744 cv
56.346 60.744 56.878 60.394 57.242 59.694 cv
57.592 58.994 57.774 57.944 57.774 56.544 cv
57.774 55.144 57.592 54.094 57.242 53.394 cv
56.878 52.694 56.346 52.344 55.632 52.344 cv
55.632 51.252 mo
56.766 51.252 57.634 51.714 58.25 52.61 cv
58.852 53.52 59.16 54.836 59.16 56.544 cv
59.16 58.266 58.852 59.582 58.25 60.478 cv
57.634 61.374 56.766 61.822 55.632 61.822 cv
54.484 61.822 53.602 61.374 53 60.478 cv
52.398 59.582 52.104 58.266 52.104 56.544 cv
52.104 54.836 52.398 53.52 53 52.61 cv
53.602 51.714 54.484 51.252 55.632 51.252 cv
ef
64.512 52.344 mo
63.798 52.344 63.266 52.694 62.902 53.394 cv
62.538 54.094 62.37 55.144 62.37 56.544 cv
62.37 57.944 62.538 58.994 62.902 59.694 cv
63.266 60.394 63.798 60.744 64.512 60.744 cv
65.226 60.744 65.758 60.394 66.122 59.694 cv
66.472 58.994 66.654 57.944 66.654 56.544 cv
66.654 55.144 66.472 54.094 66.122 53.394 cv
65.758 52.694 65.226 52.344 64.512 52.344 cv
64.512 51.252 mo
65.646 51.252 66.514 51.714 67.13 52.61 cv
67.732 53.52 68.04 54.836 68.04 56.544 cv
68.04 58.266 67.732 59.582 67.13 60.478 cv
66.514 61.374 65.646 61.822 64.512 61.822 cv
63.364 61.822 62.482 61.374 61.88 60.478 cv
61.278 59.582 60.984 58.266 60.984 56.544 cv
60.984 54.836 61.278 53.52 61.88 52.61 cv
62.482 51.714 63.364 51.252 64.512 51.252 cv
ef
75.979 12.739 mo
72.479 12.739 li
f
75.979 12.739 mo
72.479 12.739 li
@
29.04 12.424 mo
28.424 12.424 27.934 12.648 27.57 13.068 cv
27.206 13.488 27.024 14.076 27.024 14.804 cv
27.024 15.546 27.206 16.134 27.57 16.554 cv
27.934 16.974 28.424 17.184 29.04 17.184 cv
29.656 17.184 30.146 16.974 30.51 16.554 cv
30.874 16.134 31.056 15.546 31.056 14.804 cv
31.056 14.076 30.874 13.488 30.51 13.068 cv
30.146 12.648 29.656 12.424 29.04 12.424 cv
31.784 8.09802 mo
31.784 9.358 li
31.434 9.19 31.084 9.06403 30.734 8.98001 cv
30.37 8.896 30.02 8.854 29.684 8.854 cv
28.76 8.854 28.06 9.16202 27.584 9.77802 cv
27.108 10.394 26.828 11.332 26.772 12.564 cv
27.038 12.172 27.374 11.864 27.78 11.654 cv
28.186 11.444 28.634 11.332 29.124 11.332 cv
30.146 11.332 30.958 11.654 31.546 12.27 cv
32.134 12.886 32.442 13.74 32.442 14.804 cv
32.442 15.854 32.12 16.694 31.504 17.324 cv
30.888 17.954 30.062 18.262 29.04 18.262 cv
27.864 18.262 26.954 17.814 26.338 16.918 cv
25.708 16.022 25.4 14.706 25.4 12.984 cv
25.4 11.374 25.778 10.086 26.548 9.134 cv
27.304 8.18201 28.34 7.69202 29.628 7.69202 cv
29.964 7.69202 30.314 7.73401 30.678 7.79001 cv
31.028 7.86002 31.392 7.95801 31.784 8.09802 cv
ef
37.752 8.784 mo
37.038 8.784 36.506 9.134 36.142 9.83398 cv
35.778 10.534 35.61 11.584 35.61 12.984 cv
35.61 14.384 35.778 15.434 36.142 16.134 cv
36.506 16.834 37.038 17.184 37.752 17.184 cv
38.466 17.184 38.998 16.834 39.362 16.134 cv
39.712 15.434 39.894 14.384 39.894 12.984 cv
39.894 11.584 39.712 10.534 39.362 9.83398 cv
38.998 9.134 38.466 8.784 37.752 8.784 cv
37.752 7.69199 mo
38.886 7.69199 39.754 8.15399 40.37 9.04999 cv
40.972 9.95999 41.28 11.276 41.28 12.984 cv
41.28 14.706 40.972 16.022 40.37 16.918 cv
39.754 17.814 38.886 18.262 37.752 18.262 cv
36.604 18.262 35.722 17.814 35.12 16.918 cv
34.518 16.022 34.224 14.706 34.224 12.984 cv
34.224 11.276 34.518 9.95999 35.12 9.04999 cv
35.722 8.15399 36.604 7.69199 37.752 7.69199 cv
ef
46.752 8.784 mo
46.038 8.784 45.506 9.134 45.142 9.83398 cv
44.778 10.534 44.61 11.584 44.61 12.984 cv
44.61 14.384 44.778 15.434 45.142 16.134 cv
45.506 16.834 46.038 17.184 46.752 17.184 cv
47.466 17.184 47.998 16.834 48.362 16.134 cv
48.712 15.434 48.894 14.384 48.894 12.984 cv
48.894 11.584 48.712 10.534 48.362 9.83398 cv
47.998 9.134 47.466 8.784 46.752 8.784 cv
46.752 7.69199 mo
47.886 7.69199 48.754 8.15399 49.37 9.04999 cv
49.972 9.95999 50.28 11.276 50.28 12.984 cv
50.28 14.706 49.972 16.022 49.37 16.918 cv
48.754 17.814 47.886 18.262 46.752 18.262 cv
45.604 18.262 44.722 17.814 44.12 16.918 cv
43.518 16.022 43.224 14.706 43.224 12.984 cv
43.224 11.276 43.518 9.95999 44.12 9.04999 cv
44.722 8.15399 45.604 7.69199 46.752 7.69199 cv
ef
55.632 8.784 mo
54.918 8.784 54.386 9.134 54.022 9.83398 cv
53.658 10.534 53.49 11.584 53.49 12.984 cv
53.49 14.384 53.658 15.434 54.022 16.134 cv
54.386 16.834 54.918 17.184 55.632 17.184 cv
56.346 17.184 56.878 16.834 57.242 16.134 cv
57.592 15.434 57.774 14.384 57.774 12.984 cv
57.774 11.584 57.592 10.534 57.242 9.83398 cv
56.878 9.134 56.346 8.784 55.632 8.784 cv
55.632 7.69199 mo
56.766 7.69199 57.634 8.15399 58.25 9.04999 cv
58.852 9.95999 59.16 11.276 59.16 12.984 cv
59.16 14.706 58.852 16.022 58.25 16.918 cv
57.634 17.814 56.766 18.262 55.632 18.262 cv
54.484 18.262 53.602 17.814 53 16.918 cv
52.398 16.022 52.104 14.706 52.104 12.984 cv
52.104 11.276 52.398 9.95999 53 9.04999 cv
53.602 8.15399 54.484 7.69199 55.632 7.69199 cv
ef
64.512 8.784 mo
63.798 8.784 63.266 9.134 62.902 9.83398 cv
62.538 10.534 62.37 11.584 62.37 12.984 cv
62.37 14.384 62.538 15.434 62.902 16.134 cv
63.266 16.834 63.798 17.184 64.512 17.184 cv
65.226 17.184 65.758 16.834 66.122 16.134 cv
66.472 15.434 66.654 14.384 66.654 12.984 cv
66.654 11.584 66.472 10.534 66.122 9.83398 cv
65.758 9.134 65.226 8.784 64.512 8.784 cv
64.512 7.69199 mo
65.646 7.69199 66.514 8.15399 67.13 9.04999 cv
67.732 9.95999 68.04 11.276 68.04 12.984 cv
68.04 14.706 67.732 16.022 67.13 16.918 cv
66.514 17.814 65.646 18.262 64.512 18.262 cv
63.364 18.262 62.482 17.814 61.88 16.918 cv
61.278 16.022 60.984 14.706 60.984 12.984 cv
60.984 11.276 61.278 9.95999 61.88 9.04999 cv
62.482 8.15399 63.364 7.69199 64.512 7.69199 cv
ef
8.508 222.442 mo
16.446 222.442 li
16.446 220.776 li
16.446 219.376 16.138 218.34 15.494 217.682 cv
14.85 217.038 13.842 216.702 12.47 216.702 cv
11.098 216.702 10.104 217.038 9.46 217.682 cv
8.83 218.34 8.508 219.376 8.508 220.776 cv
8.508 222.442 li
7.374 223.828 mo
7.374 220.986 li
7.374 219.012 7.794 217.556 8.606 216.632 cv
9.432 215.708 10.72 215.246 12.47 215.246 cv
14.234 215.246 15.522 215.722 16.348 216.646 cv
17.174 217.57 17.58 219.026 17.58 220.986 cv
17.58 223.828 li
7.374 223.828 li
ef
13.73 209.598 mo
13.73 210.62 13.856 211.32 14.08 211.712 cv
14.318 212.104 14.71 212.3 15.27 212.3 cv
15.718 212.3 16.082 212.16 16.334 211.866 cv
16.6 211.572 16.726 211.166 16.726 210.662 cv
16.726 209.962 16.488 209.402 15.984 208.982 cv
15.494 208.562 14.836 208.352 14.01 208.352 cv
13.73 208.352 li
13.73 209.598 li
13.212 207.092 mo
17.58 207.092 li
17.58 208.352 li
16.418 208.352 li
16.894 208.646 17.23 209.01 17.44 209.43 cv
17.65 209.85 17.762 210.382 17.762 210.998 cv
17.762 211.782 17.552 212.412 17.118 212.874 cv
16.684 213.336 16.096 213.56 15.354 213.56 cv
14.5 213.56 13.856 213.28 13.408 212.692 cv
12.974 212.118 12.75 211.264 12.75 210.116 cv
12.75 208.352 li
12.624 208.352 li
12.05 208.352 11.602 208.548 11.28 208.926 cv
10.972 209.304 10.804 209.836 10.804 210.522 cv
10.804 210.97 10.86 211.39 10.972 211.81 cv
11.084 212.23 11.238 212.622 11.434 213 cv
10.272 213 li
10.104 212.552 9.964 212.104 9.88 211.67 cv
9.796 211.236 9.74 210.816 9.74 210.396 cv
9.74 209.29 10.034 208.464 10.608 207.918 cv
11.182 207.372 12.05 207.092 13.212 207.092 cv
ef
7.752 203.318 mo
9.922 203.318 li
9.922 200.728 li
10.902 200.728 li
10.902 203.318 li
15.06 203.318 li
15.69 203.318 16.096 203.234 16.264 203.066 cv
16.446 202.898 16.53 202.548 16.53 202.016 cv
16.53 200.728 li
17.58 200.728 li
17.58 202.016 li
17.58 202.996 17.398 203.668 17.034 204.032 cv
16.67 204.396 16.012 204.578 15.06 204.578 cv
10.902 204.578 li
10.902 205.502 li
9.922 205.502 li
9.922 204.578 li
7.752 204.578 li
7.752 203.318 li
ef
13.73 195.558 mo
13.73 196.58 13.856 197.28 14.08 197.672 cv
14.318 198.064 14.71 198.26 15.27 198.26 cv
15.718 198.26 16.082 198.12 16.334 197.826 cv
16.6 197.532 16.726 197.126 16.726 196.622 cv
16.726 195.922 16.488 195.362 15.984 194.942 cv
15.494 194.522 14.836 194.312 14.01 194.312 cv
13.73 194.312 li
13.73 195.558 li
13.212 193.052 mo
17.58 193.052 li
17.58 194.312 li
16.418 194.312 li
16.894 194.606 17.23 194.97 17.44 195.39 cv
17.65 195.81 17.762 196.342 17.762 196.958 cv
17.762 197.742 17.552 198.372 17.118 198.834 cv
16.684 199.296 16.096 199.52 15.354 199.52 cv
14.5 199.52 13.856 199.24 13.408 198.652 cv
12.974 198.078 12.75 197.224 12.75 196.076 cv
12.75 194.312 li
12.624 194.312 li
12.05 194.312 11.602 194.508 11.28 194.886 cv
10.972 195.264 10.804 195.796 10.804 196.482 cv
10.804 196.93 10.86 197.35 10.972 197.77 cv
11.084 198.19 11.238 198.582 11.434 198.96 cv
10.272 198.96 li
10.104 198.512 9.964 198.064 9.88 197.63 cv
9.796 197.196 9.74 196.776 9.74 196.356 cv
9.74 195.25 10.034 194.424 10.608 193.878 cv
11.182 193.332 12.05 193.052 13.212 193.052 cv
ef
6.94 182.086 mo
7.99 182.086 li
7.99 183.29 li
7.99 183.738 8.088 184.06 8.27 184.228 cv
8.452 184.41 8.774 184.494 9.25 184.494 cv
9.922 184.494 li
9.922 182.422 li
10.902 182.422 li
10.902 184.494 li
17.58 184.494 li
17.58 185.754 li
10.902 185.754 li
10.902 186.958 li
9.922 186.958 li
9.922 185.754 li
9.39 185.754 li
8.55 185.754 7.92 185.558 7.528 185.166 cv
7.136 184.774 6.94 184.144 6.94 183.276 cv
6.94 182.086 li
ef
13.436 174.492 mo
14.052 174.492 li
14.052 180.274 li
14.92 180.218 15.592 179.966 16.04 179.49 cv
16.488 179.028 16.712 178.384 16.712 177.544 cv
16.712 177.068 16.656 176.592 16.544 176.144 cv
16.432 175.696 16.25 175.234 15.998 174.786 cv
17.188 174.786 li
17.384 175.234 17.538 175.696 17.622 176.172 cv
17.706 176.648 17.762 177.138 17.762 177.614 cv
17.762 178.846 17.412 179.812 16.712 180.526 cv
16.012 181.24 15.046 181.59 13.828 181.59 cv
12.582 181.59 11.588 181.254 10.846 180.582 cv
10.118 179.91 9.74 178.986 9.74 177.838 cv
9.74 176.802 10.076 175.99 10.734 175.388 cv
11.406 174.8 12.302 174.492 13.436 174.492 cv
13.072 175.752 mo
12.386 175.766 11.84 175.962 11.42 176.326 cv
11.014 176.704 10.804 177.208 10.804 177.824 cv
10.804 178.524 11.014 179.084 11.406 179.504 cv
11.798 179.924 12.358 180.176 13.072 180.232 cv
13.072 175.752 li
ef
7.752 171.278 mo
9.922 171.278 li
9.922 168.688 li
10.902 168.688 li
10.902 171.278 li
15.06 171.278 li
15.69 171.278 16.096 171.194 16.264 171.026 cv
16.446 170.858 16.53 170.508 16.53 169.976 cv
16.53 168.688 li
17.58 168.688 li
17.58 169.976 li
17.58 170.956 17.398 171.628 17.034 171.992 cv
16.67 172.356 16.012 172.538 15.06 172.538 cv
10.902 172.538 li
10.902 173.462 li
9.922 173.462 li
9.922 172.538 li
7.752 172.538 li
7.752 171.278 li
ef
10.216 161.488 mo
11.392 161.488 li
11.196 161.852 11.056 162.202 10.958 162.566 cv
10.86 162.93 10.804 163.28 10.804 163.644 cv
10.804 164.456 11.07 165.1 11.588 165.548 cv
12.106 165.996 12.834 166.22 13.758 166.22 cv
14.696 166.22 15.424 165.996 15.942 165.548 cv
16.46 165.1 16.712 164.456 16.712 163.644 cv
16.712 163.28 16.67 162.93 16.572 162.566 cv
16.474 162.202 16.32 161.852 16.124 161.488 cv
17.286 161.488 li
17.454 161.852 17.58 162.216 17.65 162.58 cv
17.72 162.958 17.762 163.364 17.762 163.784 cv
17.762 164.932 17.412 165.856 16.684 166.528 cv
15.97 167.214 14.99 167.55 13.758 167.55 cv
12.512 167.55 11.532 167.214 10.818 166.528 cv
10.104 165.842 9.74 164.904 9.74 163.7 cv
9.74 163.308 9.782 162.93 9.866 162.566 cv
9.95 162.202 10.062 161.838 10.216 161.488 cv
ef
12.96 152.954 mo
17.58 152.954 li
17.58 154.214 li
13.002 154.214 li
12.274 154.214 11.742 154.368 11.378 154.648 cv
11.014 154.928 10.832 155.348 10.832 155.908 cv
10.832 156.594 11.056 157.126 11.49 157.518 cv
11.924 157.91 12.512 158.106 13.254 158.106 cv
17.58 158.106 li
17.58 159.366 li
6.94 159.366 li
6.94 158.106 li
11.112 158.106 li
10.664 157.812 10.314 157.462 10.09 157.042 cv
9.866 156.636 9.74 156.16 9.74 155.628 cv
9.74 154.76 10.02 154.088 10.566 153.64 cv
11.112 153.192 11.91 152.954 12.96 152.954 cv
ef
9.922 150.444 mo
9.922 149.184 li
17.58 149.184 li
17.58 150.444 li
9.922 150.444 li
6.94 150.444 mo
8.536 150.444 mo
6.94 150.444 li
6.94 149.184 li
8.536 149.184 li
cp
ef
12.96 140.114 mo
17.58 140.114 li
17.58 141.374 li
13.002 141.374 li
12.274 141.374 11.742 141.528 11.378 141.808 cv
11.014 142.088 10.832 142.508 10.832 143.068 cv
10.832 143.754 11.056 144.286 11.49 144.678 cv
11.924 145.07 12.512 145.266 13.254 145.266 cv
17.58 145.266 li
17.58 146.526 li
9.922 146.526 li
9.922 145.266 li
11.112 145.266 li
10.664 144.972 10.314 144.622 10.09 144.202 cv
9.866 143.796 9.74 143.32 9.74 142.788 cv
9.74 141.92 10.02 141.248 10.566 140.8 cv
11.112 140.352 11.91 140.114 12.96 140.114 cv
ef
13.66 132.564 mo
12.764 132.564 12.05 132.76 11.546 133.124 cv
11.042 133.502 10.79 134.034 10.79 134.706 cv
10.79 135.378 11.042 135.91 11.546 136.288 cv
12.05 136.666 12.764 136.848 13.66 136.848 cv
14.57 136.848 15.27 136.666 15.774 136.288 cv
16.278 135.91 16.53 135.378 16.53 134.706 cv
16.53 134.034 16.278 133.502 15.774 133.124 cv
15.27 132.76 14.57 132.564 13.66 132.564 cv
16.628 131.304 mo
17.916 131.304 18.882 131.598 19.526 132.172 cv
20.156 132.76 20.478 133.642 20.478 134.832 cv
20.478 135.28 20.436 135.686 20.38 136.078 cv
20.31 136.47 20.212 136.862 20.072 137.226 cv
18.854 137.226 li
19.05 136.862 19.19 136.498 19.288 136.134 cv
19.386 135.77 19.442 135.406 19.442 135.028 cv
19.442 134.216 19.218 133.6 18.798 133.18 cv
18.364 132.774 17.72 132.564 16.852 132.564 cv
16.236 132.564 li
16.684 132.83 17.02 133.166 17.244 133.572 cv
17.468 133.978 17.58 134.454 17.58 135.014 cv
17.58 135.966 17.23 136.722 16.516 137.296 cv
15.802 137.87 14.85 138.15 13.66 138.15 cv
12.484 138.15 11.532 137.87 10.818 137.296 cv
10.104 136.722 9.74 135.966 9.74 135.014 cv
9.74 134.454 9.852 133.978 10.076 133.572 cv
10.3 133.166 10.636 132.83 11.084 132.564 cv
9.922 132.564 li
9.922 131.304 li
16.628 131.304 li
ef
7.752 123.038 mo
9.922 123.038 li
9.922 120.448 li
10.902 120.448 li
10.902 123.038 li
15.06 123.038 li
15.69 123.038 16.096 122.954 16.264 122.786 cv
16.446 122.618 16.53 122.268 16.53 121.736 cv
16.53 120.448 li
17.58 120.448 li
17.58 121.736 li
17.58 122.716 17.398 123.388 17.034 123.752 cv
16.67 124.116 16.012 124.298 15.06 124.298 cv
10.902 124.298 li
10.902 125.222 li
9.922 125.222 li
9.922 124.298 li
7.752 124.298 li
7.752 123.038 li
ef
9.922 118.764 mo
9.922 117.504 li
17.58 117.504 li
17.58 118.764 li
9.922 118.764 li
6.94 118.764 mo
8.536 118.764 mo
6.94 118.764 li
6.94 117.504 li
8.536 117.504 li
cp
ef
11.392 108.96 mo
10.832 108.652 10.426 108.274 10.146 107.84 cv
9.88 107.406 9.74 106.888 9.74 106.286 cv
9.74 105.502 10.02 104.886 10.58 104.452 cv
11.14 104.018 11.938 103.794 12.96 103.794 cv
17.58 103.794 li
17.58 105.054 li
13.002 105.054 li
12.274 105.054 11.728 105.194 11.364 105.446 cv
11.014 105.712 10.832 106.104 10.832 106.636 cv
10.832 107.294 11.056 107.812 11.49 108.19 cv
11.924 108.568 12.512 108.75 13.254 108.75 cv
17.58 108.75 li
17.58 110.01 li
13.002 110.01 li
12.274 110.01 11.728 110.15 11.364 110.402 cv
11.014 110.668 10.832 111.074 10.832 111.606 cv
10.832 112.25 11.056 112.768 11.49 113.146 cv
11.924 113.524 12.512 113.706 13.254 113.706 cv
17.58 113.706 li
17.58 114.966 li
9.922 114.966 li
9.922 113.706 li
11.112 113.706 li
10.65 113.426 10.3 113.076 10.076 112.67 cv
9.852 112.278 9.74 111.802 9.74 111.242 cv
9.74 110.682 9.88 110.22 10.16 109.828 cv
10.44 109.436 10.86 109.156 11.392 108.96 cv
ef
13.436 94.692 mo
14.052 94.692 li
14.052 100.474 li
14.92 100.418 15.592 100.166 16.04 99.69 cv
16.488 99.228 16.712 98.584 16.712 97.744 cv
16.712 97.268 16.656 96.792 16.544 96.344 cv
16.432 95.896 16.25 95.434 15.998 94.986 cv
17.188 94.986 li
17.384 95.434 17.538 95.896 17.622 96.372 cv
17.706 96.848 17.762 97.338 17.762 97.814 cv
17.762 99.046 17.412 100.012 16.712 100.726 cv
16.012 101.44 15.046 101.79 13.828 101.79 cv
12.582 101.79 11.588 101.454 10.846 100.782 cv
10.118 100.11 9.74 99.186 9.74 98.038 cv
9.74 97.002 10.076 96.19 10.734 95.588 cv
11.406 95 12.302 94.692 13.436 94.692 cv
13.072 95.952 mo
12.386 95.966 11.84 96.162 11.42 96.526 cv
11.014 96.904 10.804 97.408 10.804 98.024 cv
10.804 98.724 11.014 99.284 11.406 99.704 cv
11.798 100.124 12.358 100.376 13.072 100.432 cv
13.072 95.952 li
ef
6.954 85.26 mo
8.018 85.876 9.054 86.324 10.076 86.618 cv
11.098 86.926 12.134 87.066 13.184 87.066 cv
14.248 87.066 15.284 86.926 16.306 86.618 cv
17.342 86.324 18.364 85.876 19.414 85.26 cv
19.414 86.352 li
18.336 87.038 17.3 87.556 16.264 87.892 cv
15.228 88.228 14.206 88.396 13.184 88.396 cv
12.176 88.396 11.154 88.228 10.118 87.892 cv
9.082 87.556 8.032 87.052 6.954 86.352 cv
6.954 85.26 li
ef
11.392 76.8 mo
10.832 76.492 10.426 76.114 10.146 75.68 cv
9.88 75.246 9.74 74.728 9.74 74.126 cv
9.74 73.342 10.02 72.726 10.58 72.292 cv
11.14 71.858 11.938 71.634 12.96 71.634 cv
17.58 71.634 li
17.58 72.894 li
13.002 72.894 li
12.274 72.894 11.728 73.034 11.364 73.286 cv
11.014 73.552 10.832 73.944 10.832 74.476 cv
10.832 75.134 11.056 75.652 11.49 76.03 cv
11.924 76.408 12.512 76.59 13.254 76.59 cv
17.58 76.59 li
17.58 77.85 li
13.002 77.85 li
12.274 77.85 11.728 77.99 11.364 78.242 cv
11.014 78.508 10.832 78.914 10.832 79.446 cv
10.832 80.09 11.056 80.608 11.49 80.986 cv
11.924 81.364 12.512 81.546 13.254 81.546 cv
17.58 81.546 li
17.58 82.806 li
9.922 82.806 li
9.922 81.546 li
11.112 81.546 li
10.65 81.266 10.3 80.916 10.076 80.51 cv
9.852 80.118 9.74 79.642 9.74 79.082 cv
9.74 78.522 9.88 78.06 10.16 77.668 cv
10.44 77.276 10.86 76.996 11.392 76.8 cv
ef
10.146 64.198 mo
11.336 64.198 li
11.168 64.562 11.028 64.926 10.93 65.304 cv
10.846 65.696 10.79 66.088 10.79 66.494 cv
10.79 67.124 10.888 67.6 11.084 67.908 cv
11.28 68.216 11.56 68.37 11.938 68.37 cv
12.232 68.37 12.456 68.258 12.624 68.034 cv
12.792 67.81 12.96 67.362 13.1 66.69 cv
13.198 66.256 li
13.394 65.36 13.674 64.73 14.01 64.352 cv
14.36 63.988 14.85 63.792 15.466 63.792 cv
16.18 63.792 16.74 64.072 17.146 64.632 cv
17.566 65.192 17.762 65.976 17.762 66.956 cv
17.762 67.376 17.72 67.796 17.65 68.244 cv
17.58 68.692 17.468 69.154 17.3 69.644 cv
15.998 69.644 li
16.25 69.182 16.432 68.72 16.544 68.272 cv
16.67 67.824 16.726 67.376 16.726 66.928 cv
16.726 66.34 16.628 65.878 16.432 65.556 cv
16.236 65.248 15.942 65.08 15.564 65.08 cv
15.228 65.08 14.962 65.206 14.78 65.43 cv
14.598 65.654 14.416 66.158 14.248 66.942 cv
14.15 67.376 li
13.982 68.16 13.73 68.734 13.394 69.07 cv
13.058 69.42 12.596 69.588 11.994 69.588 cv
11.28 69.588 10.72 69.336 10.328 68.832 cv
9.936 68.328 9.74 67.6 9.74 66.648 cv
9.74 66.186 9.782 65.752 9.852 65.332 cv
9.922 64.926 10.02 64.548 10.146 64.198 cv
ef
6.954 62.08 mo
6.954 60.988 li
8.032 60.316 9.082 59.798 10.118 59.462 cv
11.154 59.126 12.176 58.944 13.184 58.944 cv
14.206 58.944 15.228 59.126 16.264 59.462 cv
17.3 59.798 18.336 60.316 19.414 60.988 cv
19.414 62.08 li
18.364 61.478 17.342 61.03 16.306 60.722 cv
15.284 60.428 14.248 60.274 13.184 60.274 cv
12.134 60.274 11.098 60.428 10.076 60.722 cv
9.054 61.03 8.018 61.478 6.954 62.08 cv
ef
1.5 lw
2 lc
92.212 210.36 mo
98.838 209.749 li
105.463 183.313 li
112.089 121.976 li
118.714 100.425 li
125.34 131.53 li
131.966 69.277 li
138.591 251.193 li
145.217 222.662 li
151.842 100.033 li
158.468 131.137 li
165.094 102.781 li
171.719 203.816 li
178.345 190.991 li
184.97 62.515 li
191.596 156.832 li
198.222 180.172 li
204.847 90.479 li
211.473 61.425 li
218.098 75.646 li
224.724 133.144 li
231.35 262.448 li
237.975 87.905 li
244.601 121.714 li
251.226 62.864 li
257.852 261.009 li
264.478 175.155 li
271.103 155 li
277.729 137.899 li
284.354 252.458 li
290.98 95.975 li
297.606 145.446 li
304.231 130.526 li
310.857 75.603 li
317.483 85.505 li
324.108 50.431 li
330.734 48.948 li
337.359 198.32 li
343.985 234.354 li
350.611 270.301 li
357.236 97.11 li
363.862 109.456 li
370.487 220.263 li
377.113 111.157 li
383.739 86.378 li
390.364 109.761 li
396.99 188.111 li
403.615 103.392 li
410.241 136.285 li
416.867 77.74 li
0 .993988 1 0 cmyk
@
gsave
75.981 274.492 mo
433.081 274.492 li
433.081 8.392 li
75.981 8.392 li
cp
clp
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
92.212 141.65 mo
98.837 140.124 li
105.463 120.929 li
112.089 272.481 li
118.714 234.179 li
125.34 122.674 li
131.965 274.488 li
138.591 211.668 li
145.217 162.983 li
151.842 246.35 li
158.468 141.956 li
165.093 236.927 li
171.719 133.929 li
178.345 139.164 li
184.97 227.591 li
191.596 127.734 li
198.221 140.036 li
204.847 216.467 li
211.473 261.052 li
218.098 246.35 li
224.724 148.848 li
231.35 238.759 li
237.975 270.388 li
244.601 172.144 li
251.226 274.488 li
257.852 234.964 li
264.478 116.959 li
271.103 202.507 li
277.729 173.06 li
284.354 213.631 li
290.98 261.052 li
297.606 149.241 li
304.231 167.956 li
310.857 274.488 li
317.482 206.521 li
324.108 274.488 li
330.734 272.438 li
337.359 131.573 li
343.985 167.607 li
350.61 261.75 li
357.236 201.547 li
363.862 211.537 li
370.487 163.157 li
377.113 211.537 li
383.738 253.374 li
390.364 133.493 li
396.99 129.654 li
403.615 187.326 li
410.241 162.808 li
416.866 222.618 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
0 lc
[5.55 2.4 ] 0 dsh
92.212 179.211 mo
98.837 177.257 li
105.463 177.746 li
112.089 184.185 li
118.714 171.516 li
125.34 178.592 li
131.965 171.045 li
138.591 202.664 li
145.217 176.07 li
151.842 180.695 li
158.468 177.658 li
165.093 181.838 li
171.719 177.274 li
178.345 176.978 li
184.97 185.197 li
191.596 173.278 li
198.221 179.168 li
204.847 184.307 li
211.473 180.817 li
218.098 170.94 li
224.724 174.762 li
231.35 240.435 li
237.975 179.761 li
244.601 175.111 li
251.226 177.44 li
257.852 235.331 li
264.478 180.171 li
271.103 183.504 li
277.729 176.036 li
284.354 212.715 li
290.98 181.585 li
297.606 176.568 li
304.231 184.08 li
310.857 177.711 li
317.482 175.687 li
324.108 172.72 li
330.734 174.02 li
337.359 176.175 li
343.985 178.426 li
350.61 262.753 li
357.236 173.366 li
363.862 175.468 li
370.487 176.69 li
377.113 175.809 li
383.738 166.996 li
390.364 177.327 li
396.99 173.278 li
403.615 170.862 li
410.241 177.048 li
416.866 177.187 li
.873045 .242161 1 .129244 cmyk
@
.8 lw
2 lc
0 lj
[] 0 dsh
75.979 274.488 mo
75.979 8.37601 li
1 /0 /CSD get_res sepcs
1 sep
@
433.099 274.488 mo
433.099 8.37601 li
@
75.979 274.488 mo
433.099 274.488 li
@
75.979 8.37601 mo
433.099 8.37601 li
@
82.979 60.392 mo
192.354 60.392 li
193.687 60.392 194.354 59.725 194.354 58.392 cv
194.354 15.376 li
194.354 14.043 193.687 13.376 192.354 13.376 cv
82.979 13.376 li
81.646 13.376 80.979 14.043 80.979 15.376 cv
80.979 58.392 li
80.979 59.725 81.646 60.392 82.979 60.392 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
82.979 60.392 mo
192.354 60.392 li
193.687 60.392 194.354 59.725 194.354 58.392 cv
194.354 15.376 li
194.354 14.043 193.687 13.376 192.354 13.376 cv
82.979 13.376 li
81.646 13.376 80.979 14.043 80.979 15.376 cv
80.979 58.392 li
80.979 59.725 81.646 60.392 82.979 60.392 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
84.979 21.47 mo
104.979 21.47 li
0 .993988 1 0 cmyk
@
113.96 17.63 mo
114.95 17.63 li
114.95 20.62 li
118.53 20.62 li
118.53 17.63 li
119.52 17.63 li
119.52 24.92 li
118.53 24.92 li
118.53 21.45 li
114.95 21.45 li
114.95 24.92 li
113.96 24.92 li
113.96 17.63 li
1 /0 /CSD get_res sepcs
1 sep
ef
123.97 22.17 mo
123.24 22.17 122.74 22.26 122.46 22.42 cv
122.18 22.59 122.04 22.87 122.04 23.27 cv
122.04 23.59 122.14 23.85 122.35 24.03 cv
122.56 24.22 122.85 24.31 123.21 24.31 cv
123.71 24.31 124.11 24.14 124.41 23.78 cv
124.71 23.43 124.86 22.96 124.86 22.37 cv
124.86 22.17 li
123.97 22.17 li
125.76 21.8 mo
125.76 24.92 li
124.86 24.92 li
124.86 24.09 li
124.65 24.43 124.39 24.67 124.09 24.82 cv
123.79 24.97 123.41 25.05 122.97 25.05 cv
122.41 25.05 121.96 24.9 121.63 24.59 cv
121.3 24.28 121.14 23.86 121.14 23.33 cv
121.14 22.72 121.34 22.26 121.76 21.94 cv
122.17 21.63 122.78 21.47 123.6 21.47 cv
124.86 21.47 li
124.86 21.38 li
124.86 20.97 124.72 20.65 124.45 20.42 cv
124.18 20.2 123.8 20.08 123.31 20.08 cv
122.99 20.08 122.69 20.12 122.39 20.2 cv
122.09 20.28 121.81 20.39 121.54 20.53 cv
121.54 19.7 li
121.86 19.58 122.18 19.48 122.49 19.42 cv
122.8 19.36 123.1 19.32 123.4 19.32 cv
124.19 19.32 124.78 19.53 125.17 19.94 cv
125.56 20.35 125.76 20.97 125.76 21.8 cv
ef
131.2 20.28 mo
131.2 17.32 li
132.1 17.32 li
132.1 24.92 li
131.2 24.92 li
131.2 24.1 li
131.01 24.43 130.77 24.67 130.48 24.82 cv
130.19 24.97 129.85 25.05 129.45 25.05 cv
128.79 25.05 128.25 24.79 127.83 24.27 cv
127.41 23.75 127.21 23.05 127.21 22.19 cv
127.21 21.33 127.41 20.64 127.83 20.11 cv
128.25 19.59 128.79 19.32 129.45 19.32 cv
129.85 19.32 130.19 19.4 130.48 19.56 cv
130.77 19.72 131.01 19.96 131.2 20.28 cv
128.14 22.19 mo
128.14 22.85 128.27 23.37 128.54 23.75 cv
128.81 24.13 129.19 24.31 129.67 24.31 cv
130.14 24.31 130.51 24.13 130.79 23.75 cv
131.06 23.37 131.2 22.85 131.2 22.19 cv
131.2 21.53 131.06 21.02 130.79 20.64 cv
130.51 20.26 130.14 20.07 129.67 20.07 cv
129.19 20.07 128.81 20.26 128.54 20.64 cv
128.27 21.02 128.14 21.53 128.14 22.19 cv
ef
136.08 20.08 mo
135.6 20.08 135.22 20.27 134.94 20.65 cv
134.66 21.03 134.52 21.54 134.52 22.19 cv
134.52 22.85 134.65 23.36 134.93 23.74 cv
135.21 24.12 135.59 24.3 136.08 24.3 cv
136.56 24.3 136.94 24.12 137.22 23.74 cv
137.5 23.36 137.64 22.85 137.64 22.19 cv
137.64 21.55 137.5 21.03 137.22 20.65 cv
136.94 20.27 136.56 20.08 136.08 20.08 cv
136.08 19.32 mo
136.86 19.32 137.47 19.58 137.92 20.08 cv
138.36 20.59 138.59 21.29 138.59 22.19 cv
138.59 23.09 138.36 23.79 137.92 24.29 cv
137.47 24.8 136.86 25.05 136.08 25.05 cv
135.29 25.05 134.67 24.8 134.23 24.29 cv
133.79 23.79 133.57 23.09 133.57 22.19 cv
133.57 21.29 133.79 20.59 134.23 20.08 cv
134.67 19.58 135.29 19.32 136.08 19.32 cv
ef
142.2 20.08 mo
141.72 20.08 141.34 20.27 141.06 20.65 cv
140.78 21.03 140.64 21.54 140.64 22.19 cv
140.64 22.85 140.77 23.36 141.05 23.74 cv
141.33 24.12 141.71 24.3 142.2 24.3 cv
142.68 24.3 143.06 24.12 143.34 23.74 cv
143.62 23.36 143.76 22.85 143.76 22.19 cv
143.76 21.55 143.62 21.03 143.34 20.65 cv
143.06 20.27 142.68 20.08 142.2 20.08 cv
142.2 19.32 mo
142.98 19.32 143.59 19.58 144.04 20.08 cv
144.48 20.59 144.71 21.29 144.71 22.19 cv
144.71 23.09 144.48 23.79 144.04 24.29 cv
143.59 24.8 142.98 25.05 142.2 25.05 cv
141.41 25.05 140.79 24.8 140.35 24.29 cv
139.91 23.79 139.69 23.09 139.69 22.19 cv
139.69 21.29 139.91 20.59 140.35 20.08 cv
140.79 19.58 141.41 19.32 142.2 19.32 cv
ef
147.07 24.1 mo
147.07 26.99 li
146.17 26.99 li
146.17 19.45 li
147.07 19.45 li
147.07 20.28 li
147.25 19.96 147.49 19.72 147.78 19.56 cv
148.07 19.4 148.42 19.32 148.82 19.32 cv
149.48 19.32 150.02 19.59 150.44 20.11 cv
150.85 20.64 151.06 21.33 151.06 22.19 cv
151.06 23.05 150.85 23.75 150.44 24.27 cv
150.02 24.79 149.48 25.05 148.82 25.05 cv
148.42 25.05 148.07 24.97 147.78 24.82 cv
147.49 24.67 147.25 24.43 147.07 24.1 cv
150.13 22.19 mo
150.13 21.53 149.99 21.02 149.72 20.64 cv
149.44 20.26 149.07 20.07 148.6 20.07 cv
148.12 20.07 147.75 20.26 147.48 20.64 cv
147.2 21.02 147.07 21.53 147.07 22.19 cv
147.07 22.85 147.2 23.37 147.48 23.75 cv
147.75 24.13 148.12 24.31 148.6 24.31 cv
149.07 24.31 149.44 24.13 149.72 23.75 cv
149.99 23.37 150.13 22.85 150.13 22.19 cv
ef
151.99 22.58 mo
154.62 22.58 li
154.62 21.78 li
151.99 21.78 li
cp
f
159.76 20.28 mo
159.76 17.32 li
160.66 17.32 li
160.66 24.92 li
159.76 24.92 li
159.76 24.1 li
159.57 24.43 159.33 24.67 159.04 24.82 cv
158.75 24.97 158.41 25.05 158.01 25.05 cv
157.35 25.05 156.81 24.79 156.39 24.27 cv
155.97 23.75 155.77 23.05 155.77 22.19 cv
155.77 21.33 155.97 20.64 156.39 20.11 cv
156.81 19.59 157.35 19.32 158.01 19.32 cv
158.41 19.32 158.75 19.4 159.04 19.56 cv
159.33 19.72 159.57 19.96 159.76 20.28 cv
156.7 22.19 mo
156.7 22.85 156.83 23.37 157.1 23.75 cv
157.37 24.13 157.75 24.31 158.23 24.31 cv
158.7 24.31 159.07 24.13 159.35 23.75 cv
159.62 23.37 159.76 22.85 159.76 22.19 cv
159.76 21.53 159.62 21.02 159.35 20.64 cv
159.07 20.26 158.7 20.07 158.23 20.07 cv
157.75 20.07 157.37 20.26 157.1 20.64 cv
156.83 21.02 156.7 21.53 156.7 22.19 cv
ef
167.08 21.96 mo
167.08 22.4 li
162.95 22.4 li
162.99 23.02 163.17 23.5 163.51 23.82 cv
163.84 24.14 164.3 24.3 164.9 24.3 cv
165.24 24.3 165.58 24.26 165.9 24.18 cv
166.22 24.1 166.55 23.97 166.87 23.79 cv
166.87 24.64 li
166.55 24.78 166.22 24.89 165.88 24.95 cv
165.54 25.01 165.19 25.05 164.85 25.05 cv
163.97 25.05 163.28 24.8 162.77 24.3 cv
162.26 23.8 162.01 23.11 162.01 22.24 cv
162.01 21.35 162.25 20.64 162.73 20.11 cv
163.21 19.59 163.87 19.32 164.69 19.32 cv
165.43 19.32 166.01 19.56 166.44 20.03 cv
166.86 20.51 167.08 21.15 167.08 21.96 cv
166.18 21.7 mo
166.17 21.21 166.03 20.82 165.77 20.52 cv
165.5 20.23 165.14 20.08 164.7 20.08 cv
164.2 20.08 163.8 20.23 163.5 20.51 cv
163.2 20.79 163.02 21.19 162.98 21.7 cv
166.18 21.7 li
ef
171.41 17.32 mo
171.41 18.07 li
170.55 18.07 li
170.23 18.07 170 18.14 169.88 18.27 cv
169.75 18.4 169.69 18.63 169.69 18.97 cv
169.69 19.45 li
171.17 19.45 li
171.17 20.15 li
169.69 20.15 li
169.69 24.92 li
168.79 24.92 li
168.79 20.15 li
167.93 20.15 li
167.93 19.45 li
168.79 19.45 li
168.79 19.07 li
168.79 18.47 168.93 18.02 169.21 17.74 cv
169.49 17.46 169.94 17.32 170.56 17.32 cv
171.41 17.32 li
ef
174.61 22.17 mo
173.88 22.17 173.38 22.26 173.1 22.42 cv
172.82 22.59 172.68 22.87 172.68 23.27 cv
172.68 23.59 172.78 23.85 172.99 24.03 cv
173.2 24.22 173.49 24.31 173.85 24.31 cv
174.35 24.31 174.75 24.14 175.05 23.78 cv
175.35 23.43 175.5 22.96 175.5 22.37 cv
175.5 22.17 li
174.61 22.17 li
176.4 21.8 mo
176.4 24.92 li
175.5 24.92 li
175.5 24.09 li
175.29 24.43 175.03 24.67 174.73 24.82 cv
174.43 24.97 174.05 25.05 173.61 25.05 cv
173.05 25.05 172.6 24.9 172.27 24.59 cv
171.94 24.28 171.78 23.86 171.78 23.33 cv
171.78 22.72 171.98 22.26 172.4 21.94 cv
172.81 21.63 173.42 21.47 174.24 21.47 cv
175.5 21.47 li
175.5 21.38 li
175.5 20.97 175.36 20.65 175.09 20.42 cv
174.82 20.2 174.44 20.08 173.95 20.08 cv
173.63 20.08 173.33 20.12 173.03 20.2 cv
172.73 20.28 172.45 20.39 172.18 20.53 cv
172.18 19.7 li
172.5 19.58 172.82 19.48 173.13 19.42 cv
173.44 19.36 173.74 19.32 174.04 19.32 cv
174.83 19.32 175.42 19.53 175.81 19.94 cv
176.2 20.35 176.4 20.97 176.4 21.8 cv
ef
178.15 22.76 mo
178.15 19.45 li
179.05 19.45 li
179.05 22.73 li
179.05 23.25 179.15 23.63 179.35 23.89 cv
179.55 24.15 179.85 24.28 180.26 24.28 cv
180.74 24.28 181.13 24.13 181.41 23.82 cv
181.69 23.51 181.83 23.09 181.83 22.55 cv
181.83 19.45 li
182.73 19.45 li
182.73 24.92 li
181.83 24.92 li
181.83 24.08 li
181.61 24.42 181.35 24.66 181.07 24.82 cv
180.78 24.97 180.45 25.05 180.07 25.05 cv
179.44 25.05 178.96 24.86 178.64 24.47 cv
178.31 24.09 178.15 23.52 178.15 22.76 cv
180.41 19.32 mo
180.41 19.32 li
ef
184.6 24.92 mo
185.5 24.92 li
185.5 17.32 li
184.6 17.32 li
cp
f
188.25 17.9 mo
188.25 19.45 li
190.1 19.45 li
190.1 20.15 li
188.25 20.15 li
188.25 23.12 li
188.25 23.57 188.31 23.86 188.43 23.98 cv
188.55 24.11 188.8 24.17 189.18 24.17 cv
190.1 24.17 li
190.1 24.92 li
189.18 24.92 li
188.48 24.92 188 24.79 187.74 24.53 cv
187.48 24.27 187.35 23.8 187.35 23.12 cv
187.35 20.15 li
186.69 20.15 li
186.69 19.45 li
187.35 19.45 li
187.35 17.9 li
188.25 17.9 li
ef
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
84.979 36.142 mo
104.979 36.142 li
@
113.31 32.39 mo
114.31 32.39 li
115.84 38.55 li
117.37 32.39 li
118.48 32.39 li
120.01 38.55 li
121.54 32.39 li
122.54 32.39 li
120.71 39.68 li
119.47 39.68 li
117.93 33.35 li
116.38 39.68 li
115.14 39.68 li
113.31 32.39 li
ef
126.24 33.36 mo
124.9 36.99 li
127.58 36.99 li
126.24 33.36 li
125.68 32.39 mo
126.8 32.39 li
129.58 39.68 li
128.55 39.68 li
127.89 37.81 li
124.6 37.81 li
123.94 39.68 li
122.9 39.68 li
125.68 32.39 li
ef
135.01 32.63 mo
135.01 33.59 li
134.63 33.41 134.28 33.28 133.95 33.19 cv
133.61 33.11 133.29 33.06 132.99 33.06 cv
132.45 33.06 132.03 33.17 131.74 33.37 cv
131.45 33.58 131.31 33.88 131.31 34.26 cv
131.31 34.58 131.4 34.83 131.6 34.99 cv
131.79 35.16 132.16 35.29 132.7 35.39 cv
133.3 35.51 li
134.03 35.65 134.57 35.9 134.92 36.25 cv
135.27 36.61 135.45 37.08 135.45 37.67 cv
135.45 38.38 135.21 38.91 134.74 39.27 cv
134.26 39.63 133.57 39.81 132.66 39.81 cv
132.31 39.81 131.94 39.77 131.55 39.7 cv
131.16 39.63 130.76 39.52 130.35 39.36 cv
130.35 38.34 li
130.75 38.57 131.14 38.74 131.52 38.85 cv
131.9 38.97 132.28 39.02 132.66 39.02 cv
133.22 39.02 133.65 38.91 133.96 38.69 cv
134.26 38.47 134.42 38.16 134.42 37.74 cv
134.42 37.38 134.31 37.1 134.09 36.9 cv
133.87 36.7 133.51 36.55 133.01 36.45 cv
132.41 36.33 li
131.67 36.19 131.14 35.96 130.81 35.64 cv
130.48 35.33 130.32 34.9 130.32 34.34 cv
130.32 33.7 130.54 33.19 131 32.82 cv
131.45 32.45 132.08 32.26 132.88 32.26 cv
133.22 32.26 133.56 32.29 133.92 32.35 cv
134.27 32.41 134.63 32.51 135.01 32.63 cv
ef
137 32.39 mo
137.99 32.39 li
137.99 35.38 li
141.57 35.38 li
141.57 32.39 li
142.56 32.39 li
142.56 39.68 li
141.57 39.68 li
141.57 36.21 li
137.99 36.21 li
137.99 39.68 li
137 39.68 li
137 32.39 li
ef
144.07 37.34 mo
146.7 37.34 li
146.7 36.54 li
144.07 36.54 li
cp
f
151.72 36.88 mo
151.72 36.24 151.58 35.73 151.32 35.37 cv
151.05 35.01 150.67 34.83 150.19 34.83 cv
149.71 34.83 149.33 35.01 149.06 35.37 cv
148.79 35.73 148.66 36.24 148.66 36.88 cv
148.66 37.53 148.79 38.03 149.06 38.39 cv
149.33 38.75 149.71 38.93 150.19 38.93 cv
150.67 38.93 151.05 38.75 151.32 38.39 cv
151.58 38.03 151.72 37.53 151.72 36.88 cv
152.62 39 mo
152.62 39.92 152.41 40.61 152 41.07 cv
151.58 41.52 150.95 41.75 150.1 41.75 cv
149.78 41.75 149.49 41.72 149.21 41.68 cv
148.93 41.63 148.65 41.56 148.39 41.46 cv
148.39 40.59 li
148.65 40.73 148.91 40.83 149.17 40.9 cv
149.43 40.97 149.69 41.01 149.96 41.01 cv
150.54 41.01 150.98 40.85 151.28 40.55 cv
151.57 40.24 151.72 39.78 151.72 39.16 cv
151.72 38.72 li
151.53 39.04 151.29 39.28 151 39.44 cv
150.71 39.6 150.37 39.68 149.97 39.68 cv
149.29 39.68 148.75 39.43 148.34 38.92 cv
147.93 38.41 147.73 37.73 147.73 36.88 cv
147.73 36.04 147.93 35.36 148.34 34.85 cv
148.75 34.34 149.29 34.08 149.97 34.08 cv
150.37 34.08 150.71 34.16 151 34.32 cv
151.29 34.48 151.53 34.72 151.72 35.04 cv
151.72 34.21 li
152.62 34.21 li
152.62 39 li
ef
157.65 35.05 mo
157.55 34.99 157.44 34.95 157.32 34.92 cv
157.2 34.9 157.07 34.88 156.93 34.88 cv
156.42 34.88 156.03 35.05 155.76 35.38 cv
155.48 35.71 155.35 36.18 155.35 36.8 cv
155.35 39.68 li
154.45 39.68 li
154.45 34.21 li
155.35 34.21 li
155.35 35.06 li
155.53 34.73 155.78 34.48 156.08 34.32 cv
156.38 34.16 156.75 34.08 157.19 34.08 cv
157.25 34.08 157.32 34.09 157.4 34.09 cv
157.47 34.1 157.55 34.11 157.65 34.13 cv
157.65 35.05 li
ef
163.24 36.72 mo
163.24 37.16 li
159.11 37.16 li
159.15 37.78 159.33 38.26 159.67 38.58 cv
160 38.9 160.46 39.06 161.06 39.06 cv
161.4 39.06 161.74 39.02 162.06 38.94 cv
162.38 38.86 162.71 38.73 163.03 38.55 cv
163.03 39.4 li
162.71 39.54 162.38 39.65 162.04 39.71 cv
161.7 39.77 161.35 39.81 161.01 39.81 cv
160.13 39.81 159.44 39.56 158.93 39.06 cv
158.42 38.56 158.17 37.87 158.17 37 cv
158.17 36.11 158.41 35.4 158.89 34.87 cv
159.37 34.35 160.03 34.08 160.85 34.08 cv
161.59 34.08 162.17 34.32 162.6 34.79 cv
163.02 35.27 163.24 35.91 163.24 36.72 cv
162.34 36.46 mo
162.33 35.97 162.19 35.58 161.93 35.28 cv
161.66 34.99 161.3 34.84 160.86 34.84 cv
160.36 34.84 159.96 34.99 159.66 35.27 cv
159.36 35.55 159.18 35.95 159.14 36.46 cv
162.34 36.46 li
ef
169.36 36.72 mo
169.36 37.16 li
165.23 37.16 li
165.27 37.78 165.45 38.26 165.79 38.58 cv
166.12 38.9 166.58 39.06 167.18 39.06 cv
167.52 39.06 167.86 39.02 168.18 38.94 cv
168.5 38.86 168.83 38.73 169.15 38.55 cv
169.15 39.4 li
168.83 39.54 168.5 39.65 168.16 39.71 cv
167.82 39.77 167.47 39.81 167.13 39.81 cv
166.25 39.81 165.56 39.56 165.05 39.06 cv
164.54 38.56 164.29 37.87 164.29 37 cv
164.29 36.11 164.53 35.4 165.01 34.87 cv
165.49 34.35 166.15 34.08 166.97 34.08 cv
167.71 34.08 168.29 34.32 168.72 34.79 cv
169.14 35.27 169.36 35.91 169.36 36.72 cv
168.46 36.46 mo
168.45 35.97 168.31 35.58 168.05 35.28 cv
167.78 34.99 167.42 34.84 166.98 34.84 cv
166.48 34.84 166.08 34.99 165.78 35.27 cv
165.48 35.55 165.3 35.95 165.26 36.46 cv
168.46 36.46 li
ef
174.52 35.04 mo
174.52 32.08 li
175.42 32.08 li
175.42 39.68 li
174.52 39.68 li
174.52 38.86 li
174.33 39.19 174.09 39.43 173.8 39.58 cv
173.51 39.73 173.17 39.81 172.77 39.81 cv
172.11 39.81 171.57 39.55 171.15 39.03 cv
170.73 38.51 170.53 37.81 170.53 36.95 cv
170.53 36.09 170.73 35.4 171.15 34.87 cv
171.57 34.35 172.11 34.08 172.77 34.08 cv
173.17 34.08 173.51 34.16 173.8 34.32 cv
174.09 34.48 174.33 34.72 174.52 35.04 cv
171.46 36.95 mo
171.46 37.61 171.59 38.13 171.86 38.51 cv
172.13 38.89 172.51 39.07 172.99 39.07 cv
173.46 39.07 173.83 38.89 174.11 38.51 cv
174.38 38.13 174.52 37.61 174.52 36.95 cv
174.52 36.29 174.38 35.78 174.11 35.4 cv
173.83 35.02 173.46 34.83 172.99 34.83 cv
172.51 34.83 172.13 35.02 171.86 35.4 cv
171.59 35.78 171.46 36.29 171.46 36.95 cv
ef
179.56 40.18 mo
179.3 40.82 179.05 41.25 178.81 41.45 cv
178.57 41.65 178.25 41.75 177.85 41.75 cv
177.13 41.75 li
177.13 41 li
177.66 41 li
177.9 41 178.09 40.94 178.23 40.82 cv
178.37 40.7 178.52 40.43 178.69 39.99 cv
178.85 39.59 li
176.64 34.21 li
177.59 34.21 li
179.3 38.49 li
181.01 34.21 li
181.96 34.21 li
179.56 40.18 li
ef
[5.55 2.4 ] 0 dsh
84.979 50.814 mo
104.979 50.814 li
.873045 .242161 1 .129244 cmyk
@
117.44 49.08 mo
117.34 49.04 117.24 49 117.12 48.97 cv
117 48.95 116.88 48.93 116.75 48.93 cv
116.27 48.93 115.85 49.12 115.49 49.48 cv
115.13 49.84 114.9 50.33 114.78 50.93 cv
114.23 53.72 li
113.33 53.72 li
114.4 48.25 li
115.3 48.25 li
115.13 49.1 li
115.36 48.79 115.64 48.55 115.98 48.38 cv
116.31 48.21 116.66 48.12 117.04 48.12 cv
117.13 48.12 117.22 48.13 117.32 48.14 cv
117.42 48.15 117.51 48.17 117.61 48.19 cv
117.44 49.08 li
1 /0 /CSD get_res sepcs
1 sep
ef
117.39 46.43 mo
118.39 46.43 li
119.92 52.59 li
121.45 46.43 li
122.56 46.43 li
124.09 52.59 li
125.62 46.43 li
126.62 46.43 li
124.79 53.72 li
123.55 53.72 li
122.01 47.39 li
120.46 53.72 li
119.22 53.72 li
117.39 46.43 li
ef
130.44 47.4 mo
129.1 51.03 li
131.78 51.03 li
130.44 47.4 li
129.88 46.43 mo
131 46.43 li
133.78 53.72 li
132.75 53.72 li
132.09 51.85 li
128.8 51.85 li
128.14 53.72 li
127.1 53.72 li
129.88 46.43 li
ef
139.21 46.67 mo
139.21 47.63 li
138.83 47.45 138.48 47.32 138.15 47.23 cv
137.81 47.15 137.49 47.1 137.19 47.1 cv
136.65 47.1 136.23 47.21 135.94 47.41 cv
135.65 47.62 135.51 47.92 135.51 48.3 cv
135.51 48.62 135.6 48.87 135.8 49.03 cv
135.99 49.2 136.36 49.33 136.9 49.43 cv
137.5 49.55 li
138.23 49.69 138.77 49.94 139.12 50.29 cv
139.47 50.65 139.65 51.12 139.65 51.71 cv
139.65 52.42 139.41 52.95 138.94 53.31 cv
138.46 53.67 137.77 53.85 136.86 53.85 cv
136.51 53.85 136.14 53.81 135.75 53.74 cv
135.36 53.67 134.96 53.56 134.55 53.4 cv
134.55 52.38 li
134.95 52.61 135.34 52.78 135.72 52.89 cv
136.1 53.01 136.48 53.06 136.86 53.06 cv
137.42 53.06 137.85 52.95 138.16 52.73 cv
138.46 52.51 138.62 52.2 138.62 51.78 cv
138.62 51.42 138.51 51.14 138.29 50.94 cv
138.07 50.74 137.71 50.59 137.21 50.49 cv
136.61 50.37 li
135.87 50.23 135.34 50 135.01 49.68 cv
134.68 49.37 134.52 48.94 134.52 48.38 cv
134.52 47.74 134.74 47.23 135.2 46.86 cv
135.65 46.49 136.28 46.3 137.08 46.3 cv
137.42 46.3 137.76 46.33 138.12 46.39 cv
138.47 46.45 138.83 46.55 139.21 46.67 cv
ef
141.2 46.43 mo
142.19 46.43 li
142.19 49.42 li
145.77 49.42 li
145.77 46.43 li
146.76 46.43 li
146.76 53.72 li
145.77 53.72 li
145.77 50.25 li
142.19 50.25 li
142.19 53.72 li
141.2 53.72 li
141.2 46.43 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
