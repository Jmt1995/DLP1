%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPDA18.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/30 ÐÇÆÚÎå, ÉÏÎç 11:43:35
%%BoundingBox: 0 0 642 151
%%HiResBoundingBox: 0 0 641.4570 150.1100
%%CropBox: 0 0 641.4570 150.1100
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1227 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2019-08-30T11:40:48+08:00"
   xmp:CreatorTool="MicrosoftÂ® VisioÂ® 2013"
   xmp:ModifyDate="2019-08-30T11:40:48+08:00"
   xmp:MetadataDate="2019-08-16T16:59:44+08:00"
   pdf:Keywords=""
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmpMM:DocumentID="uuid:3346a137-ad59-46d8-ad58-dbfced63ffa0"
   xmpMM:InstanceID="uuid:7b32c7e8-c58b-41c2-81d4-9f8cd5347f7e">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>åææ¶</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default"/>
    </rdf:Alt>
   </dc:description>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">1 - &lt;526F&gt;&lt;672C&gt;.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 49 
/Lookup <~
z!!WE'!!!-%!!!9)!!il2!!s)7!t5hC!"fkE!#$.K!!ro2!Y5qE!"p4N!#QjZ!#m0`!#R!^!"KM>!"p+
K!$!<c!$*]m!$j5u!$O)t!$<io!#m<d!#$:O!#?XV!$*Wk!$sT)!%'f.!%'i/!$<fn!#?[W!"TYA!#cs
[!$j5u!%'`,!%0u2!%:,5!%1)5!$3ip!#[!]!%1)5!%:58!$3lq!$Nuq!#HXU!$*Tj!$aH'!!j&7";;U
P!#R!^~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
!,'CR!,'IT!+sCS!+s=Q!,'IT!+a1O!+j:Q!+s=Q~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
!,'IT!,'CR!+sCS!,'IT!+s=Q!+a1O!+j:Q!+s=Q~>
>>
/CSD add_res
/4 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 35 
/Lookup <~
z"TSN&$3^D0"onc+&.]3M&.J[@'+b-D((UBF'++^>'Fb$B*"WJX*tePR+qt"W+qt"W$j6k:)@ZZH,8C@
^.i/0c0Gjci0Gjci0,=rr'+P<K*tSSU.M`!a2&HPu3#DYr3>Vi!/enNi3>qkt4W4M)4W=D%'bCQL+;>"
[0,=Wi4W4G'4rXM&~>
>>
/CSD add_res
/5 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
ioJq:jl>.;hUouUdE8\AbIF6>`itab`NGCT`NGCT~>
>>
/CSD add_res
/6 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 145 
/Lookup <~
z$3^D0'FtBJ)\NAU+Vb+[/JJ?g1D^#k3Z.nt4W=D%4rXM&0,=Wi3>_bs4W4G'4W4M)'++^>)%m#O+VP+
]//8?h0c(#o2\lZ!4;n8$4;nA'#mUV6$O6e7&IAF;(_HlN+;,"].2*!f0,+]m2AHJt3>qkt3uJ/$3Z/2
'%1NgJ%h]?P&.\dA(CgEF*tnhY-PZgc1`68n2]2Ys2AZSu2&H;n"onc+"pG)/$OI%<'Ft9G*"i;Q,o-a
d.N&Nm.i8Kk/Jecp/Je]n"TSN&#mU\8&dnpE(_6oQ*>An^+;YCc+rCgj,T-si,o7$k,oI'j,Sggh"UY>
3#6G23$O@1A%1j*O',)#Z)&*bb)AX"e)]'+e)\s(e!!<3$!!WE'!!ic/!t#P="V).F"r%jR%2Tf\%Mp&
a&/ZGg%iQGg!!WE'!!ro2!t5_@!tZ.H";MdS$PjZ]$lL,e$lC/g!!!'#!!!-%!!ru4!!s)7!Y6%H!#-:
N!>ls[!#m3a!$!Ef!$*Wk!Ziro!Ziro"!9/r!"0;;!Y?+I!#QXT!#d'^!$!?d!$*Tj!$3ip!$Eur!$F&
t!$a2u!!ir4!!j,9!"ftH!#-OU!$!<c!$<io!$O0!!$aH'!$sT)!%']+!#-UW!$!Ef!$jZ,!%0r1!!!9
)!"KG<!"TV@!"p+K!#-[Y!$!Qj!$X?%!%'`,!%'r2!%1)5!#-:N!#R!^!$*Wk!%0u2!%:,5!#-CQ!#[$
^!%:58~>
>>
/CSD add_res
/7 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 14 
/Lookup <~
L&n@UL^0gXM@6*XM@6*XM@6'WKE/7WL&nIXL&e4RLB+@TL'"@TKE/:XL&eO[KE/7WK)i4XK)i1W~>
>>
/CSD add_res
/8 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 18 
/Lookup <~
L&eCWLBFOVM@6*XM[u3UN=M9TKE/7WL&n@UL^0gXM@6*XM@6'WKE/:XKE/7WL&nIXL&e4RLB+@TL'"@T
K)i1WL&eO[K)i4X~>
>>
/CSD add_res
/9 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 36 
/Lookup <~
ioJq:hr3J4e_AK]aM5QD]W\Y>Z`(#gYb\H[YGA<WY+r0U]<JP:a1o96dacaLiSWP3ioJn9aMGWE]WnkG
[&C5nZ)4Z_YbSEZ[&C/kaM,H?f$`-TgtLGpbf%DZ^U1FV[]?`)]sP1OahkiKiT&\5gtLZ$d)jG%a1T!,
\Z`G?`O`['c,n(sg>1JtahtrQ~>
>>
/CSD add_res
/10 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 47 
/Lookup <~
z!!WE'!!!-%!!ro2!!il2!!j&7!t5hC!"TYA!"KM>!!s)7!#-:N!#HXU!#?[W!#cs[!#?XV!#$:O!"fk
E";;UP!#Qm[!$*Tj!$Nuq!$3ip!$O)t!$j5u!$*Wk!#m<d!#$=P!!!9)!$jE%!%'`,!%'i/!%'f.!$aH
'!#$.K!>ls[!$<io!%']+!%0u2!%:,5!%1)5!$O0!!$!<c!#-4L!%1)5!%:58!$!?d!%0u2!$=*!~>
>>
/CSD add_res
/11 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 46 
/Lookup <~
ioJq:hr3J4e_AK]ahkiK]WnkG[&C/kZ)"Q]YGA<WY+r0UYbSEZZDXlf\ZN).`4EO"d`g"5i83;-ioJn9
gtLGp]s4tI[AgApZ)4Z_Yb\H[Z`(#g\u`53`O`X#bf%Sd^pUX[\>ui'[&C5n\#Q`&a1]*1eBcREiSWP3
gtLZ$]W\Y>\Z`G?]!8VA]sP1O_md6piT&\5ccaP+bf%DZaM5QDaMGWEahtrQcH!tmdacaLg>1Jt~>
>>
/CSD add_res
/12 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 43 
/Lookup <~
z!!WE'!!!-%!!ro2!!!9)!!s)7!"KM>!t5hC!"TYA!"p(J!"p4N!#?[W!#$.K!#cs[!$!Ef!$<io!$3i
p!$O)t!!j&7!"p+K!#m<d!%']+!%'f.!%'i/!#[9e!$aH'!%0r1!%1)5!>QXU!$*Tj!%0u2!%:58!$*N
h!$sT)!#$:O!$O0!!#[!]!$3lq";;UP!>ls[!#m*^!#R!^!!il2!##tF~>
>>
/CSD add_res
/13 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 32 
/Lookup <~
ioJq:ioJn9g>1JtbJhSg_6g[\\#cf'Z)4]bZ)"Q]YbSEZgtLZ$cH!tm_n!<n\u`53[AgApZ`(#gZDXlf
i83;-dE^+;a1o96^pUX[]W\Y>]!&D8]<8D5iT&\5gtLGpd)jG%ahkiK`kK'0a1T!,iSWP3f%JBWeBcRE
hr3J4~>
>>
/CSD add_res
/14 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 54 
/Lookup <~
z!!WE'!!!-%!!ro2!!il2!!j&7!t5hC!"TYA";;UP!#HXU!#cs[!#?[W!#?XV!"p+K!#-:N!#R!^!$*T
j!$Nuq!$3ip!$O)t!$!<c!"KM>!$jE%!%'`,!%'i/!$aH'!$*Wk!>ls[!!!9)!%0u2!%:,5!%1)5!%'f
.!Y5qE!%1)5!%:58!$3lq!#[!]!"fkE!$j5u!$sT)!$<fn!##tF!#$:O!$!?d!$<io!$j5u!#m<d!"p4
N!#QjZ!#m0`!>QXU!"9M@!!s)7!#$.K~>
>>
/CSD add_res
/15 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 122 
/Lookup <~
z!!ro2!"TV@!"p1M!#Qm[!$<io!$aH'!%0r1!%1)5!%:,5!%:58!$*`n!#m0`!#6CP!"fhD!!ir4!!il
2!!WE'!!<3$!$*]m!$sN'!%1)5!"TV@!#6=N!#m*^!$Nuq!$j`.!%:)4!%'i/!#-:N!=fbC!$Nln!$jE
%!$jZ,!%0u2!%0u2!%'f.!$*Wk!#m*^!t5hC!!<T/!!<N-!t5bA!"p+K!#cs[!$!Kh!$j<"!%'`,!$X6
"!$<]k!#d'^!#?IQ!tZ(F!!*E,!!!9)!!<E*!"9D=!"ftH!#6LS!#[6d!$Nuq!$X<$!$sN'!$sQ(!$3i
p!#$@Q!"p(J!tl1G!!!-%!!s)7!#6CP!#m3a!$*Tj!$O#r!$j5u!$a2u!$*Wk!#[-a!"p4N!"fqG!"f_
A!!ii1!#HIP!#QjZ!$!<c!$3Zk!$Ein"!9/r"WoAt!$3Zk"<Alj!uiNd!"p+K!"]P=!#-%G!"KG<!#?a
Y!#Z[T!"958!#$:O!#[*`!$*Nh!$X3!!#I$`!"KM>!"fkE!$3lq!$j?#!$O0!!$<io!#[3c!t5_@!"p(
J!#?XV!$!Hg!$aK(!$O)t!#?aY!#m']!%'r2!#R!^!$X&r!$<fn~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -150.11 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 150.11 li
641.457 150.11 li
641.457 0 li
cp
clp
gsave
.06 0 mo
641.457 0 li
641.457 150.11 li
.06 150.11 li
cp
clp
false sop
1 /0 /CSD get_res sepcs
0 sep
%ADOBeginSubsetFont: IDAAAA+SimSun-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (IDAAAA+SimSun-GBK-EUC-H)
%%Title: (IDAAAA+SimSun-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /IDAAAA+SimSun-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-8 -141 1000 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 90 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 11 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
38 <001C60D8A8C9B7A73DB6A70B0D1171EB2B05716A57A36051BCA4F091B1BF
0612F84D61B7DDA7F028930F1B6F2F65D4AF025FB356DB3FD0FC479702D6A6CF
2BC6311F323FDF5960098F810067E24461B5E628FAC38FC6B3F649788906E6CF
CA2B4C8EFA16DAEBEEF141C78F612FBA19BF360D1C1F97D12E3FA36ABF6ED73D
718360F1D64BA33C9F6A6A1DD16EF3EF2010718698CC942A333C> |
75 <001C60D8A8C9B7A73DB97D2EA733FEF9D2030029A5B2CF3B73FD3A017E40
3C7A7ECCD3EBFFFEDB9F0FD5D6E05B2BF9CF9C60DE3B48CE5E3964A0DD5556E0
7AB5FFC25800B9D85F8D31AE6DBC004A862D3FEA36827FC066763E92798BD93B
BE84A3953A936A817DA4EF604378F7E928BE8E3BEFCFAEE628876516E5BA519F
A7C2BBFB50E014B454A948E6FDFBCA6203B7778D3A97BE800CFB8CBFAE7378BF
699AD0E87F7AB83A1C37403E2503C9BB82AA33A6F53E7F47786A6AD4817C1665
9B5B1B82E64EA2> |
88 <001C60D8A8C9B7A73DB9114A346127958440054B45D6DD27EA8D471375D5
72445BC4C286672B1840EC5F872969EDC316D1EFFD044E5CCF1BAE826A677491
821E6325850E1DF6D4B9927F904C350BF2975D73D4323360EC025DEEE1956D77
4E3B0B361DD7B2990B623979CEF2C0E741CDD2397E25D69433398449320E4FB3
F0E49A55DB2D667D96291B3513A398EEA9D6FEFC5CDF7C1C4AB4A732A2A66C48
06AF99AABDEE8267000B4F92EF890FB1FF602BEB892FAAB7DF6692738FEB1E98
844B6E> |
81 <001C60D8A8C9B7A73DB97D2EA733FEF9D2030029A5B2CF3B73FD3A017E40
3C7A7ECCD10D84715DED131012A8B85BC71DE184A412A8CD7387157A3BD821CF
216B6F38127FBEE1EC9BD373B8D55F9BA6C4D9B25B5D83E7051052FD5834DE62
64855AD7B856C0588CD8AAD6807600877EC81A4A840D80A8C503E2914E6D14B4
031AC23525AD7F93F7FF3E95FADE0D273A4369ED1B421A1A11CCC3C142CC5573
FD51D096FE468891B54B510E9053DB6AED41C3A27C9DD1429558EC8F6D3FACD0
3EB4FF5C6777> |
78 <001C60D8A8C9B7A73DB9DDE50E42414D7463C23E7DF3F7740D8399584E76
0478B4B9DAE9A58DF916D341DC2985043F40488E0B2B243567C0A9021639D2B3
B40039B69E76B214CE527D22CF4BD88F229C6200B42A9E88BFA281B7CE19D3D4
1628C77376AF3EF1471A5CA3981FA1ED4CC8D398DFB2D8FF3EFBAB070C1153DC
4655D47954A549C76579DEDC4A8638C7DAC4315FBD0F2691AFCCDC23AF6C0050
B58CCD1C807AF1D2685B243B6C15B988724F74E251488CC66F99EA7DC5A24ACF
4CA53CB593> |
54 <001C60D8A8C9B7A73DB9D42B5CFCEC7F01981AFE517801773FF8AAF15E7C
4CB81154613C5FD1D562CDDE0EE4B2DAF879E403D864479CE189144ADF8E91EE
92B02765232E00139453EA1282D56AFE97EA9944DCEFDCA33912CFC91F718CF3
8695EB5A489DB0F386655B77C93690B3CBA172BCF76AEA68C342A5AB080E96A1
B7F4FF7B91F4DC4899DAAB0BFA5518431FA6DD33F2B7B3F167C016858873F122
28ADBBB7B15314E534A36AD4CB224A2D0B1287F28FF844C6570FD53B740AFC97
655868483C6FED558A5D1250F9D6D1D2E8961E60B1743758E5F657FB6C585A09
A0464FA3> |
72 <001C60D8A8C9B7A73DB937B4101DBBF46DCDCD3594B4AAC949BC12DB93EB
145354BBB8C08C11925AC0F46D8DED6ED48766AD9F227F80E78F994FA53412AF
E33248FD828F9162118D6670CC6A028F6D1DD6E1E39F82490DBCEFB527759926
A45C28D02E5E3C215B6E23DB6B07742833D39B4C404EB9F2FBEFF8CC0B79F18F
65B9FD4B7E27C7AFDC> |
85 <001C60D8A8C9B7A73DB97983BF28BFD90FC72EE9EF2B660140486BB7EDF6
EBD6F8BCB899A4EB501C6C3D3F4A057E2E2BC5082A8DA39FC13765D4D26515C0
B70E71DEF52C1559A08E5B2C61E8774E9AF7C85DF1980C54722E49BBB603BB12
FA72DE5BF0E6C1C9478648B4F622D4B31ADA9DF0C5F58A8D0286323BEAE89B93
6BFA9EDA0297E6CFA9321054E0C6F4929FA575EBD73F7B3CEE4FD4EFDAEE4950
DC13EF769EC02165EDD67FC807A3EF00568FB141086344> |
89 <001C60D8A8C9B7A73DB6AD62D6AC206187C27383F74F81F2331BB0B41384
6E362E4C97464B44CABE72495AB7151A2F454F78EA5C9E4F033A65C7AEEA4798
C99497755AA01E73D8E666B7FB3D4C4640386E7A8CB21CF779E837225B39B25C
76FC67C2F0E10E345D0BF8B99517196263553D1D0193CAB96EDFAFF505AE1D> |
20 <001C60D8A8C9B7A73DB9873C4F791E79ACFF794BEACD19C19AF494E78F88
29EFC3CC7D3628878E17C4A01E41A7E094F8C1BA4E11669947F4830A1D0A5096
2242B577F5C761E3EB42574B7809832B24AA9A0838BB8D7088A4971157A18E8F
D7> |
0 <001C60D8A8C9B5EE31F4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /IDAAAA+SimSun-GBK-EUC-H-Identity-H /Identity-H 0 [/IDAAAA+SimSun-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/KJJRUX+SimSun-GBK-EUC-H /IDAAAA+SimSun-GBK-EUC-H-Identity-H findfont ct_VMDictPut
KJJRUX+SimSun-GBK-EUC-H [12 0 0 -12 0 0 ]msf
870.9 990.825 mo
(\000&\000K\000X\000Q\000N\0006\000H\000U) false chp
919.642 990.825 mo
(\000Y\000H\000U) false chp
937.427 990.825 mo
(\000\024) false chp
.343 lw
2 lc
0 lj
2 ml
[] 0 dsh
true sadj
@
%ADOBeginSubsetFont: IDAAAA+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IDAAAA+SimSun-GBK-EUC-H 1 GetGlyphDirectory
21 <001C60D8A8C9B7A73DB9C53BB5D0A393A2047FD47350D2E4CFE49AB7DF02
A9275C93D085D1924F3FB7EEB24FE801DDD1FF576AB770A9CF206F8FECD52181
C2F2102CA1FEA19488395EF5B471B157DADF02C13C9C4B17852D280284450C63
972064F36B02F0D9D8824170509719B2834B78DF97F8CEB4B61B8B98A4837226
F9074C06268F52A598A5AA3DEBE2A49E5876A26870011588A4C381E7BA0EE6B7
FA4F20FFB2FE1484B73A6C863D02C40E3AF645370EF6B42DFE012CC9FD6A13CC
DF3A9AF5049333A4> |
!
end
end end
%ADOEndSubsetFont
KJJRUX+SimSun-GBK-EUC-H [12.025 0 0 -12.025 0 0 ]msf
1035.37 990.575 mo
(\000&) false chp
1041.37 990.575 mo
(\000K) false chp
1047.37 990.575 mo
(\000X) false chp
1053.37 990.575 mo
(\000Q) false chp
1059.37 990.575 mo
(\000N) false chp
1065.37 990.575 mo
(\0006) false chp
1071.37 990.575 mo
(\000H) false chp
1077.37 990.575 mo
(\000U) false chp
1084.1 990.575 mo
(\000Y) false chp
1090.1 990.575 mo
(\000H) false chp
1096.1 990.575 mo
(\000U) false chp
1101.9 990.575 mo
(\000\025) false chp
.344 lw
@
%ADOBeginSubsetFont: IDAAAA+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IDAAAA+SimSun-GBK-EUC-H 1 GetGlyphDirectory
22 <001C60D8A8C9B7A73DB690C096E5829ECB7EAC0696F671A2E825F453F3A9
547E649C9C8AA9D940164AA955DAE1F274CFE0AEF581531A98237701371CB67B
5B906EFC305BD0A35FAC809384995849E312D729A85CAD44AD9DCEC7156A6E32
35066EEEBE61A7272E47F1F0F5C01BD0E43E3B14D7922DEB48F05D02ADAE380C
A38F24D149AF28B38F499D66605010BC2D7BE9EEDFF317910FE16542E05B3E6B
AFB9111EC89586C3A633B0E14E49C3EF7326EECAEBE9BC79A5F796E73B8C7219
A71173E9FEF40F71BF7E21CE840AA06D2850D06F9136E3FB1454503F1EFF2341
2ABA53EF3331ED68FEF5FCFF6E45A66251FE70235BB837DDAB27E135C1CD532F
2C0B8DF29FA0D655B26EFB80AF44DA30> |
!
end
end end
%ADOEndSubsetFont
KJJRUX+SimSun-GBK-EUC-H [12.025 0 0 -12.025 0 0 ]msf
1199.8 990.575 mo
(\000&) false chp
1205.8 990.575 mo
(\000K) false chp
1211.8 990.575 mo
(\000X) false chp
1217.8 990.575 mo
(\000Q) false chp
1223.8 990.575 mo
(\000N) false chp
1229.8 990.575 mo
(\0006) false chp
1235.8 990.575 mo
(\000H) false chp
1241.8 990.575 mo
(\000U) false chp
1248.53 990.575 mo
(\000Y) false chp
1254.53 990.575 mo
(\000H) false chp
1260.53 990.575 mo
(\000U) false chp
1266.33 990.575 mo
(\000\026) false chp
@
%ADOBeginSubsetFont: IDAAAA+SimSun-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/IDAAAA+SimSun-GBK-EUC-H 1 GetGlyphDirectory
23 <001C60D8A8C9B7A73DB9DE1B8EE62BE3F7C5847DDAC464F1E17DC80279E1
A159A682C90E55F4C6E15813C5A6C02B180E23E381C0C2F218B8F72452FB4D56
57CA222DDAAE17B2E3F36C9F5DA089C7920BC5F7A70EFE572D8A7A204C9735E2
B9> |
!
end
end end
%ADOEndSubsetFont
KJJRUX+SimSun-GBK-EUC-H [12.025 0 0 -12.025 0 0 ]msf
1364.25 990.575 mo
(\000&) false chp
1370.25 990.575 mo
(\000K) false chp
1376.25 990.575 mo
(\000X) false chp
1382.25 990.575 mo
(\000Q\000N) false chp
1394.27 990.575 mo
(\0006) false chp
1400.27 990.575 mo
(\000H) false chp
1406.27 990.575 mo
(\000U) false chp
1413 990.575 mo
(\000Y) false chp
1419 990.575 mo
(\000H) false chp
1425 990.575 mo
(\000U) false chp
1430.8 990.575 mo
(\000\027) false chp
@
KJJRUX+SimSun-GBK-EUC-H [12 0 0 -12 0 0 ]msf
1684.65 1316.78 mo
(\000&\000K\000X\000Q\000N\0006\000H\000U) false chp
1733.39 1316.78 mo
(\000Y\000H\000U) false chp
1751.18 1316.78 mo
(\000\024) false chp
.343 lw
@
KJJRUX+SimSun-GBK-EUC-H [12 0 0 -12 0 0 ]msf
1849.13 1316.53 mo
(\000&\000K\000X\000Q\000N\0006\000H\000U) false chp
1897.87 1316.53 mo
(\000Y\000H\000U) false chp
1915.66 1316.53 mo
(\000\025) false chp
@
KJJRUX+SimSun-GBK-EUC-H [12 0 0 -12 0 0 ]msf
2013.55 1316.53 mo
(\000&\000K\000X\000Q\000N\0006\000H\000U) false chp
2062.29 1316.53 mo
(\000Y\000H\000U) false chp
2080.1 1316.53 mo
(\000\026) false chp
@
KJJRUX+SimSun-GBK-EUC-H [12 0 0 -12 0 0 ]msf
2178.01 1316.53 mo
(\000&\000K\000X\000Q\000N\0006\000H\000U) false chp
2226.74 1316.53 mo
(\000Y\000H\000U) false chp
2244.52 1316.53 mo
(\000\027) false chp
@
grestore
173.55 63.965 mo
174.549 63.965 li
174.825 63.965 175.05 64.188 175.05 64.464 cv
175.05 64.74 174.826 64.965 174.55 64.965 cv
173.55 64.965 li
173.274 64.965 173.049 64.741 173.049 64.465 cv
173.049 64.189 173.274 63.965 173.55 63.965 cv
176.549 63.964 mo
177.55 63.963 li
177.826 63.963 178.049 64.187 178.05 64.464 cv
178.05 64.74 177.826 64.964 177.55 64.964 cv
176.55 64.964 li
176.274 64.964 176.05 64.74 176.05 64.464 cv
176.05 64.188 176.273 63.964 176.549 63.964 cv
179.55 63.963 mo
180.55 63.962 li
180.826 63.962 181.05 64.187 181.05 64.463 cv
181.05 64.739 180.826 64.963 180.55 64.963 cv
179.55 64.963 li
179.274 64.963 179.05 64.74 179.05 64.464 cv
179.05 64.187 179.273 63.963 179.55 63.963 cv
182.55 63.962 mo
183.549 63.962 li
183.825 63.962 184.05 64.185 184.05 64.462 cv
184.05 64.738 183.826 64.961 183.55 64.961 cv
182.55 64.962 li
182.274 64.962 182.049 64.738 182.049 64.462 cv
182.049 64.186 182.274 63.962 182.55 63.962 cv
185.549 63.961 mo
186.55 63.961 li
186.826 63.961 187.049 64.184 187.05 64.46 cv
187.05 64.736 186.826 64.96 186.55 64.96 cv
185.55 64.961 li
185.274 64.961 185.05 64.737 185.05 64.461 cv
185.05 64.185 185.273 63.961 185.549 63.961 cv
188.55 63.96 mo
189.55 63.959 li
189.826 63.959 190.05 64.183 190.05 64.459 cv
190.05 64.735 189.826 64.96 189.55 64.96 cv
188.55 64.96 li
188.274 64.96 188.05 64.736 188.05 64.46 cv
188.05 64.184 188.273 63.96 188.55 63.96 cv
191.55 63.959 mo
192.549 63.958 li
192.825 63.958 193.05 64.182 193.05 64.458 cv
193.05 64.735 192.826 64.959 192.55 64.959 cv
191.55 64.959 li
191.274 64.959 191.049 64.735 191.049 64.459 cv
191.049 64.183 191.274 63.959 191.55 63.959 cv
194.549 63.958 mo
195.55 63.958 li
195.826 63.958 196.049 64.182 196.05 64.458 cv
196.05 64.734 195.826 64.958 195.55 64.958 cv
194.55 64.958 li
194.274 64.958 194.05 64.735 194.05 64.458 cv
194.05 64.182 194.273 63.958 194.549 63.958 cv
197.55 63.957 mo
198.55 63.957 li
198.826 63.957 199.05 64.18 199.05 64.456 cv
199.05 64.732 198.826 64.956 198.55 64.956 cv
197.55 64.957 li
197.274 64.957 197.05 64.733 197.05 64.457 cv
197.05 64.181 197.273 63.957 197.55 63.957 cv
200.55 63.956 mo
201.549 63.956 li
201.825 63.956 202.05 64.179 202.05 64.455 cv
202.05 64.731 201.826 64.955 201.55 64.955 cv
200.55 64.956 li
200.274 64.956 200.049 64.732 200.049 64.456 cv
200.049 64.18 200.274 63.956 200.55 63.956 cv
203.549 63.955 mo
204.55 63.954 li
204.826 63.954 205.049 64.178 205.05 64.454 cv
205.05 64.73 204.826 64.955 204.55 64.955 cv
203.55 64.955 li
203.273 64.955 203.05 64.731 203.05 64.455 cv
203.05 64.179 203.273 63.955 203.549 63.955 cv
206.55 63.954 mo
207.55 63.953 li
207.826 63.953 208.05 64.178 208.05 64.453 cv
208.05 64.73 207.826 64.954 207.55 64.954 cv
206.55 64.954 li
206.274 64.954 206.05 64.73 206.05 64.454 cv
206.05 64.178 206.273 63.954 206.55 63.954 cv
209.55 63.953 mo
210.549 63.953 li
210.825 63.953 211.05 64.176 211.05 64.453 cv
211.05 64.729 210.826 64.952 210.55 64.952 cv
209.55 64.953 li
209.274 64.953 209.049 64.729 209.049 64.453 cv
209.049 64.177 209.274 63.953 209.55 63.953 cv
212.549 63.952 mo
213.55 63.952 li
213.826 63.952 214.049 64.175 214.05 64.451 cv
214.05 64.727 213.826 64.951 213.55 64.951 cv
212.55 64.952 li
212.274 64.952 212.05 64.728 212.05 64.452 cv
212.05 64.176 212.273 63.952 212.549 63.952 cv
215.55 63.951 mo
216.55 63.951 li
216.826 63.951 217.05 64.174 217.05 64.45 cv
217.05 64.726 216.826 64.95 216.55 64.95 cv
215.55 64.95 li
215.274 64.951 215.05 64.727 215.05 64.451 cv
215.05 64.175 215.273 63.951 215.55 63.951 cv
218.55 63.95 mo
219.549 63.949 li
219.825 63.949 220.05 64.173 220.05 64.449 cv
220.05 64.725 219.826 64.95 219.55 64.95 cv
218.55 64.95 li
218.274 64.95 218.05 64.726 218.049 64.45 cv
218.049 64.174 218.274 63.95 218.55 63.95 cv
221.549 63.948 mo
222.55 63.948 li
222.826 63.948 223.049 64.172 223.05 64.448 cv
223.05 64.725 222.826 64.948 222.55 64.948 cv
221.55 64.949 li
221.274 64.949 221.05 64.725 221.05 64.448 cv
221.05 64.172 221.273 63.949 221.549 63.948 cv
224.55 63.947 mo
225.55 63.947 li
225.826 63.947 226.05 64.171 226.05 64.447 cv
226.05 64.724 225.826 64.947 225.55 64.947 cv
224.55 64.948 li
224.274 64.948 224.05 64.724 224.05 64.448 cv
224.05 64.172 224.273 63.947 224.55 63.947 cv
227.55 63.947 mo
228.549 63.947 li
228.825 63.947 229.05 64.17 229.05 64.446 cv
229.05 64.722 228.826 64.946 228.55 64.946 cv
227.55 64.946 li
227.274 64.947 227.05 64.723 227.049 64.447 cv
227.049 64.171 227.274 63.947 227.55 63.947 cv
230.549 63.946 mo
231.55 63.945 li
231.826 63.945 232.049 64.169 232.05 64.445 cv
232.05 64.721 231.826 64.945 231.55 64.945 cv
230.55 64.945 li
230.274 64.945 230.05 64.722 230.05 64.446 cv
230.05 64.17 230.273 63.946 230.549 63.946 cv
233.55 63.945 mo
234.55 63.944 li
234.826 63.944 235.05 64.168 235.05 64.444 cv
235.05 64.72 234.826 64.945 234.55 64.945 cv
233.55 64.945 li
233.274 64.945 233.05 64.721 233.05 64.445 cv
233.05 64.168 233.273 63.945 233.55 63.945 cv
236.55 63.943 mo
237.549 63.943 li
237.825 63.943 238.05 64.167 238.05 64.443 cv
238.05 64.72 237.826 64.943 237.55 64.943 cv
236.55 64.944 li
236.274 64.944 236.05 64.72 236.049 64.444 cv
236.049 64.167 236.274 63.943 236.55 63.943 cv
239.549 63.942 mo
240.55 63.942 li
240.826 63.942 241.049 64.166 241.05 64.442 cv
241.05 64.718 240.826 64.942 240.55 64.942 cv
239.55 64.943 li
239.274 64.943 239.05 64.719 239.05 64.443 cv
239.05 64.167 239.273 63.942 239.549 63.942 cv
242.55 63.942 mo
243.55 63.941 li
243.826 63.941 244.05 64.165 244.05 64.441 cv
244.05 64.717 243.826 64.941 243.55 64.941 cv
242.55 64.941 li
242.274 64.941 242.05 64.718 242.05 64.442 cv
242.05 64.166 242.273 63.942 242.55 63.942 cv
245.55 63.941 mo
246.549 63.94 li
246.825 63.94 247.05 64.164 247.05 64.44 cv
247.05 64.716 246.826 64.94 246.55 64.94 cv
245.55 64.94 li
245.274 64.94 245.049 64.717 245.049 64.441 cv
245.049 64.165 245.274 63.941 245.55 63.941 cv
248.549 63.94 mo
249.55 63.939 li
249.826 63.939 250.049 64.163 250.05 64.439 cv
250.05 64.715 249.826 64.939 249.55 64.939 cv
248.55 64.939 li
248.273 64.939 248.05 64.716 248.05 64.44 cv
248.05 64.163 248.273 63.94 248.549 63.94 cv
251.55 63.938 mo
252.55 63.938 li
252.826 63.938 253.05 64.162 253.05 64.438 cv
253.05 64.714 252.826 64.938 252.55 64.938 cv
251.55 64.939 li
251.274 64.939 251.05 64.714 251.05 64.438 cv
251.05 64.162 251.273 63.938 251.55 63.938 cv
254.55 63.937 mo
255.549 63.937 li
255.825 63.937 256.05 64.161 256.05 64.437 cv
256.05 64.713 255.826 64.937 255.55 64.937 cv
254.55 64.937 li
254.274 64.938 254.049 64.714 254.049 64.438 cv
254.049 64.162 254.274 63.937 254.55 63.937 cv
257.549 63.937 mo
258.55 63.936 li
258.826 63.936 259.049 64.16 259.05 64.436 cv
259.05 64.712 258.826 64.936 258.55 64.936 cv
257.55 64.936 li
257.273 64.936 257.05 64.713 257.05 64.437 cv
257.05 64.161 257.273 63.937 257.549 63.937 cv
260.55 63.936 mo
261.55 63.935 li
261.826 63.935 262.05 64.159 262.05 64.435 cv
262.05 64.711 261.826 64.935 261.55 64.935 cv
260.55 64.935 li
260.274 64.935 260.05 64.712 260.05 64.436 cv
260.05 64.159 260.273 63.936 260.55 63.936 cv
263.55 63.934 mo
264.549 63.934 li
264.825 63.934 265.05 64.157 265.05 64.434 cv
265.05 64.71 264.826 64.934 264.55 64.934 cv
263.55 64.934 li
263.274 64.934 263.049 64.711 263.049 64.434 cv
263.049 64.158 263.274 63.935 263.55 63.934 cv
266.549 63.933 mo
267.55 63.933 li
267.826 63.933 268.049 64.157 268.05 64.433 cv
268.05 64.709 267.826 64.933 267.55 64.933 cv
266.55 64.934 li
266.273 64.934 266.05 64.709 266.05 64.433 cv
266.05 64.157 266.273 63.933 266.549 63.933 cv
269.55 63.932 mo
270.55 63.931 li
270.826 63.931 271.05 64.156 271.05 64.432 cv
271.05 64.708 270.826 64.932 270.55 64.932 cv
269.55 64.932 li
269.274 64.933 269.05 64.709 269.05 64.433 cv
269.05 64.157 269.273 63.932 269.55 63.932 cv
272.55 63.931 mo
273.549 63.931 li
273.825 63.931 274.05 64.155 274.05 64.431 cv
274.05 64.707 273.826 64.931 273.55 64.931 cv
272.55 64.931 li
272.274 64.931 272.049 64.708 272.049 64.432 cv
272.049 64.156 272.274 63.931 272.55 63.931 cv
275.549 63.93 mo
276.55 63.93 li
276.826 63.93 277.049 64.153 277.05 64.43 cv
277.05 64.706 276.826 64.93 276.55 64.93 cv
275.55 64.93 li
275.273 64.93 275.05 64.707 275.05 64.43 cv
275.05 64.154 275.273 63.931 275.549 63.93 cv
278.55 63.929 mo
279.55 63.929 li
279.826 63.929 280.05 64.152 280.05 64.428 cv
280.05 64.705 279.826 64.929 279.55 64.929 cv
278.55 64.93 li
278.274 64.93 278.05 64.705 278.05 64.429 cv
278.05 64.153 278.273 63.929 278.55 63.929 cv
281.55 63.928 mo
282.549 63.928 li
282.825 63.928 283.049 64.152 283.049 64.428 cv
283.049 64.704 282.826 64.928 282.55 64.928 cv
281.55 64.928 li
281.274 64.929 281.049 64.705 281.049 64.428 cv
281.049 64.152 281.274 63.928 281.55 63.928 cv
284.549 63.927 mo
285.55 63.927 li
285.826 63.927 286.049 64.151 286.05 64.427 cv
286.05 64.703 285.826 64.927 285.55 64.927 cv
284.55 64.927 li
284.273 64.927 284.05 64.704 284.05 64.428 cv
284.05 64.152 284.273 63.927 284.549 63.927 cv
287.549 63.927 mo
288.55 63.926 li
288.826 63.926 289.05 64.15 289.05 64.426 cv
289.05 64.702 288.826 64.926 288.55 64.926 cv
287.55 64.926 li
287.274 64.926 287.05 64.703 287.05 64.427 cv
287.05 64.151 287.273 63.927 287.549 63.927 cv
290.55 63.925 mo
291.549 63.925 li
291.825 63.925 292.049 64.148 292.049 64.424 cv
292.049 64.701 291.826 64.924 291.55 64.924 cv
290.55 64.925 li
290.274 64.925 290.049 64.701 290.049 64.425 cv
290.049 64.149 290.274 63.925 290.55 63.925 cv
293.549 63.924 mo
294.55 63.924 li
294.826 63.924 295.049 64.147 295.05 64.423 cv
295.05 64.699 294.826 64.924 294.55 64.924 cv
293.55 64.924 li
293.273 64.924 293.05 64.7 293.05 64.424 cv
293.05 64.148 293.273 63.924 293.549 63.924 cv
296.549 63.923 mo
297.55 63.923 li
297.826 63.923 298.05 64.146 298.05 64.423 cv
298.05 64.699 297.826 64.923 297.55 64.923 cv
296.55 64.923 li
296.274 64.923 296.05 64.699 296.05 64.423 cv
296.05 64.147 296.273 63.923 296.549 63.923 cv
299.55 63.922 mo
300.549 63.921 li
300.825 63.921 301.049 64.146 301.049 64.422 cv
301.049 64.698 300.826 64.922 300.55 64.922 cv
299.55 64.922 li
299.274 64.922 299.049 64.699 299.049 64.423 cv
299.049 64.146 299.274 63.922 299.55 63.922 cv
302.549 63.921 mo
303.55 63.921 li
303.826 63.921 304.049 64.145 304.05 64.421 cv
304.05 64.697 303.826 64.921 303.55 64.921 cv
302.55 64.921 li
302.273 64.921 302.05 64.698 302.05 64.422 cv
302.049 64.145 302.273 63.921 302.549 63.921 cv
305.549 63.92 mo
306.55 63.92 li
306.826 63.92 307.05 64.143 307.05 64.419 cv
307.05 64.696 306.826 64.919 306.55 64.919 cv
305.55 64.92 li
305.274 64.92 305.05 64.696 305.05 64.42 cv
305.05 64.144 305.273 63.92 305.549 63.92 cv
308.55 63.919 mo
309.549 63.919 li
309.825 63.919 310.049 64.142 310.049 64.418 cv
310.049 64.694 309.826 64.919 309.55 64.919 cv
308.55 64.919 li
308.274 64.919 308.049 64.695 308.049 64.419 cv
308.049 64.143 308.274 63.919 308.55 63.919 cv
311.549 63.918 mo
312.55 63.917 li
312.826 63.917 313.049 64.141 313.049 64.418 cv
313.05 64.694 312.826 64.918 312.55 64.918 cv
311.55 64.918 li
311.273 64.918 311.05 64.694 311.05 64.418 cv
311.049 64.142 311.273 63.918 311.549 63.918 cv
314.549 63.917 mo
315.55 63.916 li
315.826 63.916 316.05 64.141 316.05 64.417 cv
316.05 64.693 315.826 64.917 315.55 64.917 cv
314.55 64.917 li
314.274 64.917 314.05 64.694 314.05 64.418 cv
314.05 64.141 314.273 63.917 314.549 63.917 cv
317.55 63.916 mo
318.549 63.916 li
318.825 63.916 319.049 64.139 319.049 64.416 cv
319.049 64.692 318.826 64.915 318.55 64.915 cv
317.55 64.916 li
317.274 64.916 317.049 64.692 317.049 64.416 cv
317.049 64.14 317.274 63.916 317.55 63.916 cv
320.549 63.915 mo
321.55 63.915 li
321.826 63.915 322.049 64.138 322.049 64.414 cv
322.05 64.69 321.826 64.914 321.55 64.914 cv
320.549 64.915 li
320.273 64.915 320.05 64.691 320.05 64.415 cv
320.049 64.139 320.273 63.915 320.549 63.915 cv
323.549 63.914 mo
324.55 63.913 li
324.826 63.913 325.05 64.137 325.05 64.413 cv
325.05 64.689 324.826 64.914 324.55 64.914 cv
323.55 64.914 li
323.274 64.914 323.05 64.69 323.05 64.414 cv
323.05 64.138 323.273 63.914 323.549 63.914 cv
326.55 63.913 mo
327.549 63.912 li
327.825 63.912 328.049 64.137 328.049 64.412 cv
328.049 64.689 327.826 64.913 327.55 64.913 cv
326.55 64.913 li
326.274 64.913 326.049 64.689 326.049 64.413 cv
326.049 64.137 326.274 63.913 326.55 63.913 cv
329.549 63.912 mo
330.549 63.912 li
330.826 63.912 331.049 64.135 331.049 64.412 cv
331.05 64.688 330.826 64.911 330.55 64.911 cv
329.549 64.912 li
329.273 64.912 329.05 64.689 329.05 64.412 cv
329.049 64.136 329.273 63.912 329.549 63.912 cv
332.549 63.911 mo
333.55 63.911 li
333.826 63.911 334.05 64.134 334.05 64.41 cv
334.05 64.686 333.826 64.91 333.55 64.91 cv
332.55 64.911 li
332.274 64.911 332.05 64.687 332.05 64.411 cv
332.05 64.135 332.273 63.911 332.549 63.911 cv
335.55 63.91 mo
336.549 63.91 li
336.825 63.91 337.049 64.133 337.049 64.409 cv
337.049 64.685 336.826 64.909 336.55 64.909 cv
335.55 64.91 li
335.274 64.91 335.049 64.686 335.049 64.41 cv
335.049 64.134 335.274 63.91 335.55 63.91 cv
338.549 63.909 mo
339.549 63.908 li
339.826 63.908 340.049 64.132 340.049 64.408 cv
340.05 64.684 339.826 64.909 339.55 64.909 cv
338.549 64.909 li
338.273 64.909 338.05 64.685 338.05 64.409 cv
338.049 64.133 338.273 63.909 338.549 63.909 cv
341.549 63.908 mo
342.55 63.907 li
342.826 63.907 343.05 64.131 343.05 64.407 cv
343.05 64.684 342.826 64.908 342.55 64.908 cv
341.55 64.908 li
341.274 64.908 341.05 64.684 341.05 64.408 cv
341.05 64.132 341.273 63.908 341.549 63.908 cv
344.55 63.906 mo
345.549 63.906 li
345.825 63.906 346.049 64.13 346.049 64.407 cv
346.049 64.683 345.826 64.906 345.55 64.906 cv
344.55 64.907 li
344.274 64.907 344.049 64.683 344.049 64.407 cv
344.049 64.131 344.274 63.906 344.55 63.906 cv
347.549 63.906 mo
348.549 63.906 li
348.826 63.906 349.049 64.129 349.049 64.405 cv
349.049 64.681 348.826 64.905 348.55 64.905 cv
347.549 64.906 li
347.273 64.906 347.05 64.682 347.049 64.406 cv
347.049 64.13 347.273 63.906 347.549 63.906 cv
350.549 63.905 mo
351.55 63.905 li
351.826 63.905 352.05 64.128 352.05 64.404 cv
352.05 64.68 351.826 64.904 351.55 64.904 cv
350.55 64.904 li
350.274 64.905 350.05 64.681 350.05 64.405 cv
350.05 64.129 350.273 63.905 350.549 63.905 cv
353.55 63.904 mo
354.549 63.903 li
354.825 63.903 355.049 64.127 355.049 64.403 cv
355.049 64.679 354.826 64.904 354.549 64.904 cv
353.55 64.904 li
353.274 64.904 353.049 64.68 353.049 64.404 cv
353.049 64.128 353.274 63.904 353.55 63.904 cv
356.549 63.902 mo
357.549 63.902 li
357.826 63.902 358.049 64.126 358.049 64.402 cv
358.049 64.679 357.826 64.902 357.55 64.902 cv
356.549 64.903 li
356.273 64.903 356.05 64.679 356.049 64.402 cv
356.049 64.126 356.273 63.903 356.549 63.902 cv
359.549 63.901 mo
360.55 63.901 li
360.826 63.901 361.05 64.125 361.05 64.401 cv
361.05 64.678 360.826 64.901 360.55 64.901 cv
359.55 64.902 li
359.274 64.902 359.05 64.678 359.05 64.402 cv
359.05 64.126 359.273 63.901 359.549 63.901 cv
362.55 63.901 mo
363.549 63.901 li
363.825 63.901 364.049 64.124 364.049 64.4 cv
364.049 64.676 363.826 64.9 363.549 64.9 cv
362.55 64.9 li
362.274 64.901 362.049 64.677 362.049 64.401 cv
362.049 64.125 362.273 63.901 362.55 63.901 cv
365.549 63.9 mo
366.549 63.899 li
366.826 63.899 367.049 64.123 367.049 64.399 cv
367.049 64.675 366.826 64.899 366.55 64.899 cv
365.549 64.899 li
365.273 64.899 365.05 64.676 365.049 64.4 cv
365.049 64.124 365.273 63.9 365.549 63.9 cv
368.549 63.899 mo
369.55 63.898 li
369.826 63.898 370.049 64.122 370.05 64.398 cv
370.05 64.674 369.826 64.899 369.55 64.899 cv
368.55 64.899 li
368.274 64.899 368.05 64.675 368.05 64.399 cv
368.05 64.122 368.273 63.899 368.549 63.899 cv
371.55 63.897 mo
372.549 63.897 li
372.825 63.897 373.049 64.121 373.049 64.397 cv
373.049 64.673 372.826 64.897 372.549 64.897 cv
371.55 64.898 li
371.274 64.898 371.049 64.673 371.049 64.397 cv
371.049 64.121 371.273 63.897 371.55 63.897 cv
374.549 63.896 mo
375.549 63.896 li
375.825 63.896 376.049 64.12 376.049 64.396 cv
376.049 64.672 375.826 64.896 375.55 64.896 cv
374.549 64.897 li
374.273 64.897 374.05 64.673 374.049 64.397 cv
374.049 64.121 374.273 63.896 374.549 63.896 cv
377.549 63.896 mo
378.55 63.895 li
378.826 63.895 379.049 64.119 379.05 64.395 cv
379.05 64.671 378.826 64.895 378.55 64.895 cv
377.55 64.895 li
377.274 64.895 377.05 64.672 377.05 64.396 cv
377.05 64.12 377.273 63.896 377.549 63.896 cv
false sop
1 /0 /CSD get_res sepcs
1 sep
f
44.5 126.745 mo
630.319 126.745 li
631.148 126.745 631.82 127.417 631.82 128.245 cv
631.82 129.074 631.148 129.745 630.319 129.745 cv
44.5 129.745 li
43.672 129.745 43 129.074 43 128.245 cv
43 127.417 43.672 126.745 44.5 126.745 cv
f
639.77 128.245 mo
627.29 134.485 li
629.26 130.555 629.26 125.935 627.29 122.005 cv
639.77 128.245 li
ef
%ADOBeginSubsetFont: LDAAAA+Calibri-Bold-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (LDAAAA+Calibri-Bold)
%%Title: (LDAAAA+Calibri-Bold Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /LDAAAA+Calibri-Bold def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-519 -349 1263 1039} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 1009 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 9 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
24 <001C60D8A8C9B66B395FA10874C49903C5BA5D8A11648D789575D5BDD1F6
6223F5068AFB07B7D4A6F562CA3B74B13B5EA917B7C1AD358BE09BEB4E728933
50C36BDE7853C8F59B15C9C7D4DF300E1CF389834D73F73BEAFCCB3601886270
5A4AA45264E1F40B031B51D9E2D256C5A222096B45098A61598A49246878A44E
20B4E2650D94107FDA3430A83D1D935A730ADC0CB97EA2F81591EE89713F0A5E
7D91B0AB952FB896B549D9AF25BF5D9521D347CC> |
47 <001C60D8A8C9B861542AC637EE43C146C31BD9761A5744ABD275647292EE
36CB498857E20832A31E32228C922B76ED9EB9B45B679D97EE58115E0910D7A6
783C9D74B3C47A3C0DF89E3EE60E2849D5516E05FF3C845F308543415BCC2234
298E4DCADDBC225A62EEFA2E410319810E3AE2C3346BA419C601347FC59380E9
460C65AF6A> |
94 <001C60D8A8C9B742B2428B22C58173B85783D75A797DBCB372A0CB326482
474FAB61F063E0140601EC7FF01420397E5BDA67D4F9EDAE8E10230A79EC92A8
830D2282FCE48C14D6255C2ED38A9227193C8E6C63D4DDC56C1677AD4EE7A081
BF7E8A0FF7039F31DB9E38AA3D9C2EB519583088084AA15E2BB9360A4E499CAC
66644008970F6456622973EBC19ABE9CB7A2E2E1E436FF7CFF17A456DD4F34C9
425E8B0FD7DE46D10D79C35ECAF346DB73750038187DFDA7C08FA4F48F7113F6
3AFD0A79F7B60ED56D2ECBD0518AE5F6486AECEBC538DAAA88840DE9FD61A7C5
CE810708E5D83B5B7C944D9C1E933328832CB2C1C15FF59A769DC54012A003CD
2D939547D59BB8CA0EDD6EE29AE032391BAF39F38DA1EDFC771E0FCA4EC6DCF9
52E839737B2539E516D209F792B48305C6FAB4D747AEC9E9C287FF4145435610
A8CE0D829239E17AD471B7D50F49EAEE2D4789B01FCDAE85BE94E4A248F07281
7ADE20C93B792AF7C1262529AB3872BFC67D038B73B9815822C383A389406399
18361A4A73948EE1A93B0DB78FD9D96349705DBB9BAADC27C924FF385CADAA15
DB528408E800871EF0C31C6F3F452B977A4424498006B5AFF12D057DDA48B358
2FED5A4C> |
60 <001C60D8A8C9B79815F8E797B303BFCF535AF2EB4975308D6803E79621F2
1AAD704FD064C72866E1FB7F604B917E5063FA8A30FCD9F17374D2E195C1C2E4
9F58AD1B276B6695BD3F7D3FE4E33B47128D91F89264497228BFE22AC59F0E39
D0FEC92823FC801B2007BC2CD5257B40918133F20F63DF6BF9501D5D57EE79A8
CFBB5EF40CF29A8C9A1207C8EC9F03D4B39A9BC98194BFE29FF1752A9A646DBB
19071D8191B8322D42853B579627FB60FEE1F71ACF22E7E2053A22AD62A0C978
C09991290B0E312DC6671F71A799A85250B78892E2BC84D2B3AE0ED9D4B5EB4A
032C84B28D996D2A85871289D23285E98612E025164E9C77066BD89908BBA4E0
886DF5419C758B9B62C1EFF8C43FA36CCE48BF98CCB4DC5026E5632121E52C4C
22587B> |
1005 <001C60D8A8C9B7A0860A08766484DD98ACD9B7603C3BEB562EF73D61A0
5B5DE8017F13F266C92D24BB1BFB1F10862D1ECEF20CD68A682CFB2B6B8C8D4A
CC07437E905967E49582EBFB7D7DBEE5AD89B57488088CB90B344312A00E3A76
8F1A71AA7FE928885ED762CFCBE708040927416AA164E088AD1002EB33FCE0AF
46257A3940922440C00BA7E7A7473C8156D179D16C2AD8A140315C11572410BA
2D809C47C6FEFFF5CE5397A409F885D7D48F970A3D066B0BEB8881CFFB031485
F28034B9C01B50982B8B5CF88D481078410E6E5527A96584B5B0D98325924A95
F3E8ECEF6BE4ED4F2334D96E1E4275648EF87EA38AF46A8563DFEB52852B798D
29CF4419BFAEF5> |
1006 <001C60D8A8C9B7A0860A0EABD9400A203C0BC1A5DA368E9E998E0B8DFE
CE44E9CDA80B2A9156DDEE01D94924039067B0EBEE89E707F0C7E81E175152A2
55458897E28D6D1C63A21BFE52338B6A4CB2C7EFA79566D393541F308F5E6159
D842E8F2B0CE06BB26E8AAE901B76E088EC1FC8508B1132911DF431CEFF3DE44
408C131AF2DD2A856BAA76CA7781D18F52F223D6EE0BE75D73C555CCEF9C7E98
DD7449C09CB5D689089C953CA8E834F0D56FCE9A1AA220B6BE5EE66037CB030F
C8E88D8336874EBB6E974774A4032C9E1DB67038C0F79304FA745C905064F74A
04320BE4F370F5AB7EE2E6DCB7C946F8A858DD91B9047D4FE706AAE892A8990A
A4240AF731C1ABAE1214C1790721563568202772ECE78CA68486C9E907412F96
39E30EB479F7DF38B462C9DD18FDE52A830A2F5A52C3479F990AC97100D4ED79
D22FDE0B6FF134388DBEC60F18330783B61E8BF1E45334615DCD56B38EDB46D7
5389210C72C07C5D2A8AF965BE1FCF70> |
1007 <001C60D8A8C9B7A0860A3274AB1A8C1F49BF686CD2C1588BDC12CC8207
04CF19D93C93C231E993B0B75DC6AA86C65F44B2D0E19F264466DEA64687CC83
E492AD2653D9403FB4E73C98A50E7BEF1F3DE8326D2F81FDE2A365C00515D32A
4A06C7728D5D1DBF07485A2AC33D5A448BE60805214AED6C9DFF66018E03297A
9977A108BAF3BA46AF1E2726D76A28AB404CBF2996ED989FC3B982A75012D45D
889D0BD5E25F7EB84D1F899584CA6E0D9A8DBD48180DF16723056C328C60BB57
667DE84A7E110FF3EA013552E5C19AE0B4CB12A049A3FA8B009D36175AF78E87
2DB0FB0953F22DB0364210C2246FD82B94CDAF9C70C175B26BD3AF581784B364
FFF437E9DF97AF409899E727F1F9325BB31DE0CF61A837EA863EA32DC8AAF9EA
58EA9B5EFB890161658FE328355A173F1C330FB938C137A2F8804B5B4990F71A
1B91D6E81E49E460896B5E30898C8F10CAD8F8112A6528DB540F81AAE760CE56
BA07107956FD5D421FD7706900715BD0757BE7BC2C0CC772143A149382E58C90
F410BEA5B39AA768DE4894A2A08B831325095342DEC0E965759A93905EE212B4
F4D18C5B4836F243B2A92A820185C98633C2BAABBCB6A1A74D00EC0B5B68A08B
009313209F5C177FC125FD2095A52C3B59AE7CC0D91B6230C77AA175EDA5F2EE
19F2D9214627D7784BD5F29E05FE9FDD00973B02BD25D214007CC7A1EB6B8E2F
D7232B> |
1008 <001C60D8A8C9B7A0860A1D63BBAFE81208885E2DA4FE3D9951802C980B
93B8AE43E5E49D1113B36E9037348BD862EAA193D480DB2BEE688EE29F136DF7
49165B30D02B14B6A85F4072BC72AC91C5F534C7866B7807237891E48D611051
2222E5667BA704890CB9C22D99031A3EC367B3DC2EAE8A6D98E683A246839ED0
E7A56F129B494DD22C6F55AAD0040BC46F44EB4C5C27934076CA4738F2D23F3A
8F1C93C5095BB125B5166E1509F3425920C39CFC6F4EE0C82F6232328BDF3848
A9137D5B179043C0545723DD04B2E452ACE61D852CA860CB2D24B82C9ACBC8DB
8BBC946376DB6098DE5C43CA01A738EBE1DAE66212F0B5FF9BE4B5> |
0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC6CDCA18E09BCC917FA5F119478
AAC0A696931453BF661861F40ACE8D15EA0278E8F88478BB0248E8D19042FB8B
7F2BB2D4ECFE961B3EEB80565197E481D427DFF375EC95F16C0E36FE28AEC2A0
702F6CB5ACA5B242B6593847C74B58C6FBE25BCF0D4AFF25D49578CAB0D929B0
25DECF86FE8C45E91FC3804785896842CEEC7085BA98EF5BCC94B208BF43A5FA
51448171853E476E618A0AB76D0CDCEE51B8CF3FCD6DA051824D7EFC40D8D270
BAD39624CE3E5CBFE64B165BA24EF48FCEC82F8DEB8BFCD829A07FF03FFE381E
622BF0967DB53309A79D2F393F52C4B535EC59CAFAAC152061A92D31A3A6E83C
18D63056F4453027EAA702C494809677EB8C59BD219046DE492EABC7DF19D085
C93C98D2A8DDC68AF0F5D7D82447ED6165A8DE95E6965A0F15A3F7696EAE508C
E290FD5B2FFA8A49A20B157645C3C3FEFBC64E2B40E75B90474094AF1599689F
A1EAB0D131F6DB991FC0D5943DE54CA9E5ECDA986A63CDF0394AF79DB398CE8A
C4F02FDBD88EE6AE535CFB6C3B33C157AAFFBEC52BA3DACE77ABDA0C787220FB
A75DA1E45C945> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /LDAAAA+Calibri-Bold-Identity-H /Identity-H 0 [/LDAAAA+Calibri-Bold] ct_ComposeFont pop end end
%ADOEndSubsetFont
/KJJRUY+Calibri-Bold /LDAAAA+Calibri-Bold-Identity-H findfont ct_VMDictPut
KJJRUY+Calibri-Bold [18 0 0 -18 0 0 ]msf
99.0298 147.105 mo
(\000\030\000/\000^\000<\003\355)
[11.2536 5.24515 8.25128 9.77042 0 ]xsh
257.88 147.105 mo
(\000\030\000/\000^\000<\003\356)
[11.2429 5.24515 8.24963 9.75943 0 ]xsh
407.1 147.105 mo
(\000\030\000/\000^\000<\003\357)
[11.2536 5.24515 8.24963 9.8009 0 ]xsh
551.388 147.105 mo
(\000\030\000/\000^\000<\003\360)
[11.2429 5.24518 8.24963 9.7594 0 ]xsh
3 lw
1 lc
1 lj
2 ml
[] 0 dsh
true sadj
44.5 128.245 mo
44.39 10.135 li
@
44.38 .684998 mo
50.63 13.155 li
46.7 11.195 42.074 11.205 38.148 13.175 cv
44.38 .684998 li
ef
gsave
175.65 133.675 mo
69.15 133.675 li
69.15 129.745 li
175.65 129.745 li
175.65 133.675 li
175.65 126.745 mo
170.895 126.745 li
170.895 100.675 li
175.65 100.675 li
175.65 126.745 li
73.244 126.745 mo
69.15 126.745 li
69.15 93.175 li
69.15 100.675 li
73.244 100.675 li
73.244 126.705 li
73.62 126.705 li
73.244 126.705 li
73.244 126.745 li
clp
68.208 134.642 mo
176.592 134.642 li
176.592 92.258 li
68.208 92.258 li
cp
/16 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 49 
/Lookup <~
z!!WE'!!!-%!!!6(!!il2!!s)7!t,bB!"fkE!"p%I!!ro2!Y5nD!"g.M!#HaX!#d'^!#Hm\!"KM>!"p+
K!$!9b!$*Zl!$j2t!$O&s!$3`m!#d3b!#$7N!#?UU!$*Wk!$jK'!$s],!$s`-!$3]l!#?[W!"TYA!#Zm
Z!$j2t!$sW*!%'l0!%:)4!%'u3!$3fo!#Zs\!%'u3!%1,6!$3ip!$Nrp!#?RT!$*Qi!$aE&!!j&7!tuL
O!#Hm\~>
>>
/CSD add_res
/16 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[108.384 0 0 42.384 68.208 15.468 ]ct
snap_to_device
<<
/T 1
/W 144 
/H 56 
/M[144 0 0 -56 0 56 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcLB&JcNdj]`H(Qo)Jdm"3q%V"9JZ,!VZQr!X/c5i!?+a!s]#6$2=K(!X&i<$k;b;PR[j+$k!:D!r2fu
!Y5hS!>6'"'EAdL'c%Sr$2FQ)#mM4a)B4q]nJh`P)BBk@!s/5u"pl@o+X/-VV^::J#:(N5-79-'!Vud#
#p138*$crB.F9LK-mTc^-O0bTq>^[*+!)+9--.OL.0_(<.OPH(!Vud"#p13&*$s8eXXOH#*%E<@"9J?!
"UQ7l'HAFa.@_gk,oeB^#6Y)(!!NZN*Y]S?q^IFP#ULH?-O0bT!!)os"UQ7l'HAEY.JYCs,oeB^#6Y)(
!!NZN*Y]S?SgikP"sk6=-O0bTq>^[*+!)+9-*JcL.0_(<.OPH(!Vud"#p13&*$rBL`[M*<*%E<@"9J?!
"UQ7l'HAFH.CCT/,oeB^#6Y)(!!NZN*Y]S?i[LZP"sk6=-O0bTq>^[*+!)+9-1`RL.0_(<.OPH(!Vuct
#p12i'HAEQ.0_(<.OPH(!Vud"#p13&*$pn"n0nPf*%E<@"9J?!"UQ7l'HAEs.GlQY,oeB^#6Y)(!!NZN
*Y]S?\1,]P"sk6=-O0bTq>^[*+!)+9--7UL.0_(<.OPH(!Vud"#p13&*$s;fX=4?"*%E<@"9JK%r;[!-
+!)+9-&a;L.0_(<.OPH(!Vud"#p13&*$q.)kpZf_*%E<@"9J?!"UQ7l'HAF%.G-'R,oeB^#6Y)(!!NZN
*Y]S?^F@2P"sk6=-O0bTq>^[*+!)+9-."*L.0_(<.OPH(!Vud"#p13&*$sPmV'uTp*%E<@"9J?!"UQ7l
'HAFi.?l7c,oeB^#6Y)(!!<NL*Y\Vp-&!cJ,m>8<-O0bTq>^[*+!)+9-']qL.0_(<.OPH(!Vud"#p13&
*$qI2i$ejV*%E<@"9J?!"UQ7l'HAF..F0FI,oeB^#6Y)(!!NZN*Y]S?a=4hP"sk6=-O0bTq>^[*+!)+9
-.s`L.0_(<.OPH(!Vud"#p13&*$sl!S1+Xg*%E<@"9J?!"UQ7l'HAFr.>oV\,oeB^#6Y&-!;lg##p13&
*$pRnq'cLo*%E<@"9J?!"UQ7l'HAEj.Hi2b,oeB^#6Y)(!!W`O*[VjP.'P/Q.0h7H*%E<@"9J?!"pl@o
.j?2`_'R,J#:(N5-6<Ks!Vud"#mMq4/gA[_[2]Ap/f>]P!s/5u"p-G3%P91XitS=("stiP0b=j%q#CR!
"<T<K+S-Y<*X*Z'&0D#Vp](<r"9C.[KHC=="tp)\p&G*o!gF#Z$3('n!.k3&!.k3F!.Y~>

%%EndBinary
grestore
np
grestore
gsave
175.65 129.745 mo
69.15 129.745 li
69.15 126.745 li
73.244 126.745 li
73.244 127.081 li
170.895 127.081 li
170.895 126.745 li
175.65 126.745 li
175.65 129.745 li
clp
68.208 130.922 mo
176.592 130.922 li
176.592 125.978 li
68.208 125.978 li
cp
/17 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 36 
/Lookup <~
ccX+mcH*qibK%>U_md'c\Z2\oYbS*JXe;R?XIl@:XIc=9\>uSl_RHgXb/:oJccF"hccX+k_n!-d\ZDl"
Z(n<RY+_^AXe)I=ZD=EQ_mZs_beh,Oc,RS]`k&Wr]<88,[&9ra\ui&'`4<9hcH3nfc,R\cahGB6_R6XP
[]6Dn_6gLNa1]'/bf@S``4EBm~>
>>
/CSD add_res
/17 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[108.384 0 0 4.944 68.208 19.188 ]ct
snap_to_device
<<
/T 1
/W 144 
/H 6 
/M[144 0 0 -6 0 6 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;[$&!WrQ/"p^+nqZmE3"pG;?$OdL@!!WH*%M'*_#+cIm&dJUQ'*K!a$k<%5"T]AT(`<mf"kWt_&/cB*
!ZV[G!!WlQ*Zl40"Mc/$+9hrZ(a1(J!Vl^!%1E:Z(Cndo[K?[C,U*9u%JTo*%1F6mhu]\U!u;mc%K$3V
~>

%%EndBinary
grestore
np
grestore
73.62 126.705 mo
170.519 126.705 li
170.519 95.76 li
73.62 95.76 li
cp
0 .385199 .75198 0 cmyk
f
73.62 126.705 mo
73.62 126.33 li
170.143 126.33 li
170.143 96.136 li
73.996 96.136 li
73.996 126.705 li
73.62 126.705 li
73.62 126.33 li
73.62 126.705 li
73.244 126.705 li
73.244 95.385 li
170.895 95.385 li
170.895 127.081 li
73.244 127.081 li
73.244 126.705 li
73.62 126.705 li
f
0 0 0 0 cmyk
%ADOBeginSubsetFont: ODAAAA+Calibri-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (ODAAAA+Calibri)
%%Title: (ODAAAA+Calibri Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /ODAAAA+Calibri def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-503 -312 1240 1026} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 1010 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 9 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
90 <001C60D8A8C9B79C5FEE44F314FFC38CE4EF87FC1BC5BA498FDD47672E37
A5F29CF58ECF31C007FDE4A3817F15E647D623C8D6D1F4A73D7B6832B4D42989
C1A55BCD585ED57C222CC2F78A215F05F4E9A80BA1FCD1DB376BCE47D9921733
E44EDE5BEAEC1D2153F2FA8A2E1C22E242D6C1A4BADF7B3C9D6692C8957849B7
C757134864A498CBD963474EEA254A542992BCD7D23FC8C03B24B3B32CB8DE36
B1F672A455AF821729B85730506FEACB3392B97578F79A301DEE39865FDBFD87
31B3029E0DE4CAFE78BFA5CB852575D437DF1324ED582E9AF5A0234A2594A744
CBD8A820BF84E58BCFA0173DA6F4633F9CBE6F24B1E9A9AA3FBA2EC97D071CB6
D5A774FEB91C9639FD6744C0FCD372B9710A9F8B9537B94D2F3171FFE5B97199
5351C2AE63C69CA08EAE162057803FEFCA06736258DDA27C02FD926DA3B7BF59
E5B7BF6347045A4700726CA8EDCBC532E0E356415CE7BCA89E1BE403BD462A42
26BC0587B5B955AD2652D9A4B9A806727D8110> |
75 <001C60D8A8C9B64B6A243C5D499416E7BC4B22E8B629E09B8028C056D587
EE9CF3EDF2973119D5417CAB133A39C67B614E010AE0DD832BCFA4821BD97E22
5D43A74776F0BFD87B432DD8C21445FC4ADD550E21897D7C9E8DE35386D83093
D3FF407F51B83131A4C29A9A19F0D66509D8A0DC226CCF6F69FBA7442E368FC0
BB3313B0C314C003045967AC913CA278D0CD495B5C5D3B104FD8FE9306C40B1E
684F8B702E1CF50ACD13BCB247F919B2F23E586EB73CDBD82C4696F7C27EE8FF
40F1B366DF4538A9B1C7C873783BED33A9CC79EC8072551DCD083245F853F09D
7BA82936C03B9ABC832E704C4042C4CFF1A8C1165F42A0> |
104 <001C60D8A8C9B677ECC2D761C908DB90C47A92800E8DA9F580AE95DF303
6F3660C02232DCD6E66BA74E64BCFF08FC69541BD1ADF528637E7F048CA5FC0A
B911EBFD42B9E8671A2AA23DE68C399177D223C5833F931D4B1D26350A985298
765460954328F76A286CB6F3EB98D05D1D02FA99091438D6A70CDAD1BD0B7EAC
0209E113AC49242A65FCE3FE16DD39B5FBB080521F00CF4EC25D97E8AB7617F9
F8753D0683EC16C7483F3F827C65A33CB62EC6035151C9ED285A449D64D70D55
E975B6FDE8BD5D93C1FC1CD7F52373AAB43F261624B7081D091DB595365DB519
E652118E1DAAF0D73DA6FEC04B26239B5A2899D37EAA1FDE91EB5E7> |
69 <001C60D8A8C9B67B16EC17A11C9303513193038382E210A42B5CE850AFC1
18B8F8E20755C8A90C95C89303B8AF97DF2083371B19301E0DB8111A384A8E03
5C8C8FD179B5FF5DEE9371CE5D28447AD71E5F20621DEE2C342616335A1AAB16
69E519E232E79C4980DE37E3F1E4DCD25C4506A181A5E635190DDA595BDDE157
3CB44863FF5A83BD7D7E515B71492920EF87FE789C8908736F38EB074EA06C50
C8F913E2E6E48D5D36311F7C911CB6784E303E758C4B3B979518975255BBF01E
B8B827E2459ECECE07A833BA1FB2794232A02C9AD337BE827A573B5E9CE89F5D
6EBE26850BF2926DF1667989BD0A0C14BF6B80D7EA27888CC10DB4AF2B2A5C69
A8F8245C9A4E02EC85AC1422B48B35F04B8FEAA16155CD67FB40B03E773C1C5B
CA284053C42517C1397CDE066EE439C5025920AAC2AF0AA2792D9E710F7897AA
CDF305> |
24 <001C60D8A8C9B7D4743405E233890E0A55534F43CA9133B29299791AB3DB
BE2A168EA78A7CB17DB0B060289D007AE138DDD7A874C20C0D1520156DF13FAC
E49220AECA91409AE8B52232B88DA851C2DCC83FF3926F0A798122A50015C04B
7E00C749CF9804781F643848BCD8EE92B57CB757A23284ECD5E56D8CA18327E9
8454C09854624F1CB0E6F9646D20C4617F03B71EB8405F3505A5816E6439DF15
D91294CE077BD16B66305872E9E54213ED4B2F> |
1005 <001C60D8A8C9B7A0860A305D7D1540DECC7BE2F83965065BA1F58088FE
751F51768999AF3CB0CBD98712B4A20A30CFDD23F3D718AE6664545AA64C90E8
7A977C061638AE7B9844BD53D39E1CD919540EC0AFC0ADDD639213BAA3C2156E
CF4D5FEFDF4B77C92C9A62F21FEF596A47F254F30F662D97990A276CD1E50761
DD9D07D78B626617E74128BC5D647B42ED807FE6DD0588AD25D211834DAC9410
A0AEBD06E6565C1DCBD86013B11A7BE0A2010B12635869FAC3323D92D6BCCC10
D02550F431D6753E5E6C65DB63D883AF6BCE4C75C5A66BF9AE47A5570BA4B61C
5763C152A7FDEC11C0C748631E999D604A7F2938BB57220CBE02AE758E601833
1661C475AA9DED7C59> |
882 <001C60D8A8C9B83844CBABF75256C23589A050D2F18EC6AAEA2DCAA879D
629F0698E85A7558DC3794B984219238EC694626573D368F005AA7EB3DEDB55C
E7021DF056336AEE3D77182F0055C3CB6954365C7523BFC42E70B7DCDE95A> |
410 <001C60D8A8C9B81D89610FFBFD2F87712D18AB3F2201A6640C86A2CD8B5
33C9E9613B748962BD3321D998A13FF4A410946A55D4AE3CDBD806BF0BBD38F8
435DE762245288A30426FF012946D0E2E36D4EBD7E81C44D06926164FB6F91AA
67EEAF9AC4BC77C470E117D4634F7F90C1771292F30769DD575DD5B3F0D10473
0DECDCF41E7D59747B6A2D0EF143B06FA6BBA4F9E744BD6E4827C627C6619571
4151061BE64BA6B45A36E91B80557E1CF613697CA2B60F02790B7CBE3BBB5ABE
C190F88D2844D8139B7D141D834706D11BA3108576C531B823977B908AC9FF80
DF322060C351BA43A8EA770319D1AF8085E209B940EDEE1B85419EF87F01EED1
C4E0307B2BC95989AC0998A9EA8A0DFB99539E7D0B836F4EB9E9D6147AFB5508
2A1E63F64D57A8E7F63465BA308FA03AEB2787221627AF8F99523DB260C> |
0 <001C60D8A8C9B7A086528E2CBE7FD4F03CC1C545DFC3C53F52C6923342525
31335C4AFD91E9493A7B9787114ADBF50CAD0D8D8F4E0FD112CA0EDC244BC77A
FB35E52902467E4B7D65BC23E8AB084EE08EDC3C9FE17948A4E93ECA5D5D8A99
AF099DAB98A96A7EEC3487AD5909F63F36A9F52E364FE794F0586CEACB0693AE
A3E3B131EDB924E9018AC085D5D058B3A8419D5096479413ADE107D9F5302816
818EECEB683CD82FAAA79E358EAA71283CC02664EE09C62BDF6E0D9BC98D9F30
8DF8AEA61A9B7C090BD7FD96A3223C7AE0D3D1A8F2E623FA6B7C467CA6FECDBA
0B792188DFEEBD3D01BCE6CC077D778842DE1B5E36F7F8EB4C68A439269E0981
B28AD1790AA058065E4B6AD27A659E12C7322A5BE1E7DF9729C0030192F3688A
380035351BB0945D5DC7515959F458727E2B8854977E466D6DDC900E997B52F6
BAB4C73A178A3B47EBB3C3FC842F51CC6E114336F3E4E5E72B20D8F94A7BA3BA
965E83BF37BAA664C34B8502BB9E9B9BEDD7EBC5DCBC4FFF5EBCA9C032449885
D42A9DCCBA2A816B59D7978373DF4208E5608F69A2EAF492AC156CC637D5A11A
F573B17CF9F38> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /ODAAAA+Calibri-Identity-H /Identity-H 0 [/ODAAAA+Calibri] ct_ComposeFont pop end end
%ADOEndSubsetFont
/KJJRUZ+Calibri /ODAAAA+Calibri-Identity-H findfont ct_VMDictPut
KJJRUZ+Calibri [14.25 0 0 -14.25 0 0 ]msf
89.9998 115.625 mo
(\000Z\000K\000h\000E\000\030\003\355\003r\001\232)
[7.49551 9.00453 9.0117 9.73991 8.28654 7.09239 4.27786 0 ]xsh
KJJRUZ+Calibri [9 0 0 -9 0 0 ]msf
149.6 117.575 mo
(\003\355)sh
gsave
481.65 133.675 mo
375.15 133.675 li
375.15 129.745 li
481.65 129.745 li
481.65 133.675 li
481.65 126.745 mo
375.15 126.745 li
375.15 64.897 li
375.55 64.896 li
375.826 64.896 376.049 64.672 376.049 64.396 cv
376.049 64.12 375.825 63.897 375.549 63.897 cv
375.15 63.897 li
375.15 63.176 li
481.65 63.176 li
481.65 126.745 li
378.55 63.895 mo
377.549 63.896 li
377.273 63.896 377.05 64.12 377.05 64.396 cv
377.05 64.672 377.274 64.895 377.55 64.895 cv
378.55 64.895 li
378.826 64.895 379.05 64.671 379.05 64.395 cv
379.049 64.119 378.826 63.895 378.55 63.895 cv
clp
374.208 134.642 mo
482.592 134.642 li
482.592 62.258 li
374.208 62.258 li
cp
/18 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 47 
/Lookup <~
z!!WE'!!!-%!!ro2!!il2!!j&7!t,bB!"TYA!"KM>!!s)7!#-:N!#?RT!#?[W!#ZmZ!#?UU!#$7N!"fk
E!tuLO!#HgZ!$*Qi!$Nrp!$3fo!$O&s!$j2t!$*Wk!#d3b!#$:O!!!6(!$a<#!$sW*!$s`-!$s],!$aE
&!"p%I!>lpZ!$3`m!%'Z*!%'l0!%:)4!%'u3!$F&t!$!9b!#-4L!%'u3!%1,6!$!<c!%'l0!$=&u~>
>>
/CSD add_res
/18 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[108.384 0 0 72.384 374.208 15.468 ]ct
snap_to_device
<<
/T 1
/W 144 
/H 96 
/M[144 0 0 -96 0 96 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcLB&JcLB&[f?F0!mUnT"9/Gr!!<9*"U<liU^%#,#RLS6q#CNu"9o2@nI1Wj"UtqP&.&F6!!<9+&J>-Y
'GZB=!>QCS(`=4s)Zfd8"TelH'-&$X*q:9U+!;71+TqiB!!WN0+sS?Z-Dr6M-O1tG*[iHe#m0r'"p5)=
'H\\Q\1GuX#:h/C*%_a/!r;m#!s]5K+"#&[^+9I9/h\(S#m0r'"Tnu<'H\[T/?LH--S@%i&IAO8!!NH0
$ksd1l7AGV"t)#V)%d/Vq>^[$#7M:g-Mo?P/-mUU0,Y?.!WW5u!!NH0$ksd1N@alV"t)#V)%d/Vq>^[$
#7M:g-CudP/-[IS0,Y?.!r;m#!s]5K+""0Bf.7+R/h\(S#m0r'"Tnu<'H\[;/B04F-S@%i&IAO8!!NH0
$ksd1d4D[V"t)#V)%d/Vq>^[$#7M:g-K6SP/-[IS0,Y?.!r;m#!s]5K+"$S1P:Qnc/h\(S#m0r'!WrZ9
!Yc_'Ke*EU/h\(S#m0r'"Tnu<'H\Zf/FY1p-S@%i&IAO8!!NH0$ksd1V_$^V"t)#V)%d/Vq>^[$#7M:g
-FbVP/-[IS0,Y?.!r;m#!s]5K+"#)\]ds@8/h\(S#m0r'"Tnu<'H\[U/?CB,-S@%i&IAO<!;um$!s]5K
+!uptqCDgu/h\(S#m0r'"Tnu<'H\Zm/En\i-S@%i&IAO8!!NH0$ksd1Xt83V"t)#V)%d/Vq>^[$#7M:g
-GM+P/-[IS0,Y?.!r;m#!s]5K+"#>c[O_V1/h\(S#m0r'"Tnu<'H\[\/>Xm%-S@%i&IAO8!!NH0$ksd1
ngp"V"t)#V)%d/Vq>^U"#7M:I+!u[m!%.q&0,Y?.!r;m#!s]5K+"!7(nLOkl/h\(S#m0r'"Tnu<'H\[!
/Dr&`-S@%i&IAO8!!NH0$ksd1[k,iV"t)#V)%d/Vq>^[$#7M:g-HIaP/-[IS0,Y?.!r;m#!s]5K+"#Yl
XXjZ(/h\(S#m0r'"Tnu<'H\[e/=\6q-S@%i&IAO8!!NH0$ksd1q^dXV#U_5X)%d/V!!)os"Tnu<'H\Z]
/GUh$-S@%i&IAO8!!NH0$ksd1Sh0(V"t)#V)%d/Vq>^[$#7M:g-EeuP/-[IS0,Y?.!r;m#!s]5K+""cS
`[h<A/h\(S#m0r'"Tnu<'H\[L/@@#5-S@%i&IAO8!!NH0$ksd1i[glV"t)#V)%d/Vq>^[$#7M:g-M&dP
/-[IS0,Y?.!r;lu!s]59'H\ZU/-[IS0,Y?.!r;m#!s]5K+"!:)n14bk/h\(S#m0r'"Tnu<'H\["/Dhu_
-S@%i&IAO8!!NH0$ksd1\1GoV"t)#V)%d/Vq>^[$#7M:g-HRgP/-[IS0,Y?.!r;m#!s]5K+"#\mX=OQ'
/h\(S#m1)+r;[!'#7M:g-B'MP/-[IS0,Y?.!r;m#!s]5K+"!O0kq!#d/h\(S#m0r'"Tnu<'H\[)/D)KX
-S@%i&IAO8!!NH0$ksd1^F[DV"t)#V)%d/Vq>^[$#7M:g-I=<P/-[IS0,Y?.!r;m#!s]5K+"#qtV(;fu
/h\(S#m0r'"Tnu<'H\[m/<h[i-S@%i&IAO8!!<<.$kr^a-A<uN-Nu+U)%d/Vq>^[$#7M:g-C$.P/-[IS
0,Y?.!r;m#!s]5K+"!j9i%,'[/h\(S#m0r'"Tnu<'H\[2/C,jO-S@%i&IAO8!!NH0$ksd1a=P%V"t)#V
)%d/Vq>^[$#7M:g-J9rP/-[IS0,Y?.!r;m#!s]5K+"$8(S1Fjl/h\(S#m0r'"Tnu<'H\\!/;l%b-S@%i
&IAL=!;lg#!s]5K+!usuq()^t/h\(S#m0r'"Tnu<'H\Zn/EeVh-S@%i&IAO8!!NH0$ksd1Y:S9V"t)#V
)%d/Vq>^[$#7M:g-GV1P/-[IS0,Y?.!r;m#!s]5K+"#Ad[4DM0/h\(S#m0r'"Tnu<'H\[]/>Og$-S@%i
&IAO8!!NH0$ksd1o.6(V"t)#V)%d/Vq>^R!#7LYJ+!u[m"t)#V)%d/Vq>^[$#7M:g-C-4P/-[IS0,Y?.
!r;m#!s]5K+"!m:h^esZ/h\(S#m0r'"Tnu<'H\[3/C#dN-S@%i&IAO8!!NH0$ksd1aXk+V"t)#V)%d/V
q>^[$#7M:g-JC#P/-[IS0,Y?.!r`2u!!NH0$ksd1N%FfV"t)#V)%d/Vq>^^%#7M:g-S(c>l7</j-QX6Z
&IAO8!!WN0+sS?Z-EefM-O1tG*[iHe#m0r'"TelH'-&%-*lf<++!;71+TqiB!!WK.&J>`k("!f+('bQj
(`=4s)Zfd8"9AW0$4Gc#V$mM:%M'*W!r)`t!X&Z2nHY6_"9o,<!s/,r!<E7R!s/Q+!egW+!.k3&!42`V
~>

%%EndBinary
grestore
np
grestore
gsave
375.15 64.897 mo
375.15 63.897 li
375.549 63.897 li
375.825 63.897 376.049 64.12 376.049 64.396 cv
376.049 64.672 375.826 64.896 375.55 64.896 cv
375.15 64.897 li
378.55 64.895 mo
377.55 64.895 li
377.274 64.895 377.05 64.672 377.05 64.396 cv
377.05 64.12 377.273 63.896 377.549 63.896 cv
378.55 63.895 li
378.826 63.895 379.049 64.119 379.05 64.395 cv
379.05 64.671 378.826 64.895 378.55 64.895 cv
clp
374.208 65.642 mo
379.872 65.642 li
379.872 62.978 li
374.208 62.978 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[5.664 0 0 2.664 374.208 84.468 ]ct
snap_to_device
<<
/T 1
/W 7 
/H 3 
/M[7 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~cd0q`cd0q`cd0q`cd0q`cd0q`cN~>
<~b0%lLb0%lLb0%lLb0%lLb0%lLao~>
<~_SX1,_SX1,_SX1,_SX1,_SX1,_>~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R/~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
375.15 126.745 mo
481.65 126.745 li
481.65 129.745 li
375.15 129.745 li
cp
clp
374.208 130.922 mo
482.592 130.922 li
482.592 125.978 li
374.208 125.978 li
cp
/19 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 46 
/Lookup <~
ccX+mcH*qibK%>U`4<9h\ZDl"ZD=EQY+MU?XIl@:XIc=9Xe)I=YG.sI[]$,b^pC:Ib.kT>cH!edccX+k
c,RS]\uVo"ZDFNUY+_^AXe;R?YbS*J\#?;f_6^CJ`k&^#]WSD0[ATu_Z(n<R[&0i]_mZgUbJCoGccF"h
c,R\c\Z2\o[]6Dn\#ZPp\ui&'^Tk%CcH3nfaM5B9`k&Wr_md'c_n!-d`4EBmaLo',b/:oJbf@S`~>
>>
/CSD add_res
/19 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[108.384 0 0 4.944 374.208 19.188 ]ct
snap_to_device
<<
/T 1
/W 144 
/H 6 
/M[144 0 0 -6 0 6 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;[$&!WrQ/"p^+nqZmE3#mq%K%1WpF!!WH8!tc.Z'V5Wr#mV.K'c%Sp%M/C9"V2.])&aHs("a6*"WRXc
*Zkph!!WrV%36;h+i#;C+pT89,UF9/-4fqQ"V2[d-R])D.CLZ/.P!&%%M/=7!tQIr&E!Vc!X'&e%KR+=
!.Y~>

%%EndBinary
grestore
np
grestore
379.76 126.705 mo
476.659 126.705 li
476.659 65.937 li
379.76 65.937 li
cp
.727352 .472572 .246159 0 cmyk
f
.751 lw
2 lc
0 lj
379.76 126.705 mo
476.659 126.705 li
476.659 65.937 li
379.76 65.937 li
cp
@
0 0 0 0 cmyk
%ADOBeginSubsetFont: ODAAAA+Calibri-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ODAAAA+Calibri 1 GetGlyphDirectory
1007 <001C60D8A8C9B7A0860A2FEF09FCB80607108B3B71A30E2FFE5A0F53F1
F3CE33E25BDD9A37F12480657F287B11234D872A9341B8D761BAC5B337758ED3
4FBDB0155B2DB8FB089986F2CBFC580855A552E4E7BA3E50F802AF5BABA1A72C
62BC1E6D108EEB3A3C66741F416B352CC414FB931072A8C5863DBBAA93C49B22
4ADC9F8CAA75F5C9BFEB2915D3505CD6144D20AF6779286AAF407AAC26D69248
C394FBB9BF32373F684ACA2E19C0F36192202ACAF72B1025D6F0CF7066494E82
7BB306A2A776E0F2B6F3F0E76AC8A13169FA8D6AD525762CBAE08E1976BA0FA8
68484244B2C6286C74EE91A2C98728E442E286200142B1A5906E7DF9201821B2
7907537A9A18D5757AABAE23C46953763B0140A749D71AFB31CB71FE8CEB3596
B5D9F27628C8660D823DA7A912BCD8F676248CEB1E8BAEB1BE8A438B018DEAB6
2C462D1458D0606C924EBCEC79E3D916B8F995C300564C3F71FF08DB1F5BD306
FF743BF5E6C612870C09ECDB532B05A7DD75F09723F8164F23FA51923DA26610
7C0EB4976641F969687AA087A6CC3FBA3B6B49CB68C88F765064561D586CDB15
837CCCDF95B1ED2288DB0948C8291CEF223BB458BF8475B7D75BEC1205D90B55
55DC2429D51153DF3C83901B6982E60F7C7F061954215DB5FAEB8718AB7756E4
DAA99626BD231EE3CF4090380F8238B83D56E35DB5099A025EA0320D1A3DE89D
5285DD> |
!
end
end end
%ADOEndSubsetFont
KJJRUZ+Calibri [14.275 0 0 -14.275 0 0 ]msf
394.95 100.705 mo
(\000Z\000K\000h\000E\000\030\003\357\003r\001\232)
[7.49429 9.19305 8.9075 9.74982 8.52216 6.98047 4.11111 0 ]xsh
KJJRUZ+Calibri [9.422 0 0 -9.422 0 0 ]msf
454.424 102.846 mo
(\003\357)sh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: ODAAAA+Calibri-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ODAAAA+Calibri 5 GetGlyphDirectory
1004 <001C60D8A8C9B7A0860A0ABA2698AC8E090156BBF2C9C30ADDAE7DCB3D
97848CC5D38A5C6D85B8937F2533AAB8D6BFA0DD62B7BCE11E4F148006AA53F1
6B7661785227AEDEF098A1104625EF68DF52BAE87BC71C0E793E6FAD1A965E4D
38BA9CF4CEDAADD0504EE4CE20EF80FE3B0F494717869AEF9FD48C1A316DF08A
DA9E5D4CE0C25CB68B43C1EB2B9FE55F89B0B22C758BDED5FDD580CE702C559F
6E1F276FBE929DD9A2C3557CE4E2CABBF3EDF814307556BE2579995A57ECC922
B3376DB39CC4DC2518F12025BDC7A3EE507BE357864FDBF8F62FBD571913B865
713255C738D4AEB39D8820C2AC5F5D7DF55CB64B7CD192349742D481F16CF800
95A893636D91177B06233710432F07D42A84BDDC> |
856 <001C60D8A8C9B86ED904792469819B411F782D644953F5FB87FEF664579
CE5AF47E01D6D9A7DF6EB24F15E9AD1EE074A41E03462D7DE0F1E92BD9640F34
58F7DADF49E5D4EB0B3> |
1009 <001C60D8A8C9B7A0860A2FEF2204D5F6595F7308551A6818CDF94E88E3
B51B4BFE590C6C493EDCD8FEAF219DF0A81427DD4448B9AA3D521907C381F007
F90EAA6BC6813C5ECBAAF3D43E8D7ECD68BE462C6609F3ACF35A15EAD8FA724A
39F8FF3985AE57C3EE7F2468EE63E1FB60462E54FAAE1AC468FACAB638834339
178434A5708D879091BB754334B9583D4A5B182F7341B7C5532CBD4850F827BD
47C22464ADF744DC69CDD73CE1B847A119D178326C1D936B2671B4F66DB4C82A
BBF0998D204C6B2C54A8D1373452768F53CE9B8820F53D8324A8C20B1220EC9C
C36BAB88FC34DC3CEFE67B448F164F98C88B484017D4F4837C386AA9084C5557
45CF40FCBA2F2E48A2601177A6F7710FB1E609D9618B1B59141D82B990F42223
3CFE27E6C13ACAEB970E79830DB3E2D7CCF772EC4469F50BF2745AF6F9896253
2A3064E83D5AB1B0D7166D20C01E1963E937E8AD71B78DC8903FAA6A9997FA20
C8> |
1008 <001C60D8A8C9B7A0860A05CDAB07FCC8C6F1456010984E043BC1080A8E
4004C7A6F96FF4AD7F2A4B870B666CC1C7EA11B61E750FAAE008DD2598CE85BE
E4C2722299D9BDE6BD901B361B9FFD1A74A6881105044BA6119A67BABA2C5AA3
44BC5F5DC3AF8B4A3D3F44101FD3AF23A3469D02149FFD63F48CC3EA80D9EB13
A8494F7709B008152FFA0D84385AFFDE11B5FA65E8FC9AAD2BCC7E5E38278323
5F954A8738DCC9A5760FEB582741B59F3C495CA1895A9F6120A54415FC0BB449
4CFF5A03D1CB88055E001BDA6B35B19BB5CD64D26C1A126C3877F4B0A8ECE981
7BE4A2EC5FA3C6FC9FCDEF6FA038892760F02C70AC24D1AFF24D0C> |
1006 <001C60D8A8C9B7A0860A3F41F4B5F8C84A302144D2A68052268BA33C08
F14E9024203A43F9861DB1372AE620C85B5997156713B3D52B841947202E77B0
C2CB414A698B86ABC8A4E75821012456D5020DA227DFEF8C5D8DB95EBE919EE7
1528F7186EAF21E351CBD957516793A596628548012B490542857EE9AD26B93B
E09822488FFA92D417AEC74A1F7CD3F4086D2106FC51C85A2037F2B9A0C7F20F
95265886609863A1C5F24DF7B0A900E498DA2F78FC8847FC48711DA5F7718C54
3AB1317AD922AE297322A814FAE4926A273690C557D10E81AE194D331B49C1AE
8C81F09FF9C6C0138B7CA170F398B4828657BCD8F518515EBEE88F3E7CAAF8D5
3DFF51CD8B58FC43A0393FF3BAAC61C4C54BAED846AB03C5029732B46B642E71
B9F477640318C582068EEDAD42004E409178DCD37800E9D052502DD85B334EBD
679CA70294673E8EE8A3969E138989BAAC7D6DF5921118D0D203FDC015CB8008
4F99BE2DC9C90C6E2171BED79C2858C6> |
!
end
end end
%ADOEndSubsetFont
KJJRUZ+Calibri [12 0 0 -12 0 0 ]msf
16.9497 51.1453 mo
(\003\354\003X\003\361)
[6.09119 3.03113 0 ]xsh
16.9497 66.8293 mo
(\003\354\003X\003\360)
[6.09119 3.03113 0 ]xsh
16.9497 96.6133 mo
(\003\354\003X\003\356)
[6.09119 3.03113 0 ]xsh
48.63 65.385 mo
49.63 65.385 li
49.906 65.385 50.13 65.609 50.13 65.885 cv
50.13 66.161 49.906 66.385 49.63 66.385 cv
48.63 66.385 li
48.354 66.385 48.13 66.161 48.13 65.885 cv
48.13 65.609 48.354 65.385 48.63 65.385 cv
51.63 65.385 mo
52.63 65.385 li
52.906 65.385 53.13 65.609 53.13 65.885 cv
53.13 66.161 52.906 66.385 52.63 66.385 cv
51.63 66.385 li
51.354 66.385 51.13 66.161 51.13 65.885 cv
51.13 65.609 51.354 65.385 51.63 65.385 cv
54.63 65.385 mo
55.63 65.385 li
55.906 65.385 56.13 65.609 56.13 65.885 cv
56.13 66.161 55.906 66.385 55.63 66.385 cv
54.63 66.385 li
54.354 66.385 54.13 66.161 54.13 65.885 cv
54.13 65.609 54.354 65.385 54.63 65.385 cv
57.63 65.385 mo
58.63 65.385 li
58.906 65.385 59.13 65.609 59.13 65.885 cv
59.13 66.161 58.906 66.385 58.63 66.385 cv
57.63 66.385 li
57.354 66.385 57.13 66.161 57.13 65.885 cv
57.13 65.609 57.354 65.385 57.63 65.385 cv
60.63 65.385 mo
61.63 65.385 li
61.906 65.385 62.13 65.609 62.13 65.885 cv
62.13 66.161 61.906 66.385 61.63 66.385 cv
60.63 66.385 li
60.354 66.385 60.13 66.161 60.13 65.885 cv
60.13 65.609 60.354 65.385 60.63 65.385 cv
63.63 65.385 mo
64.63 65.385 li
64.906 65.385 65.13 65.609 65.13 65.885 cv
65.13 66.161 64.906 66.385 64.63 66.385 cv
63.63 66.385 li
63.354 66.385 63.13 66.161 63.13 65.885 cv
63.13 65.609 63.354 65.385 63.63 65.385 cv
66.63 65.385 mo
67.63 65.385 li
67.907 65.385 68.13 65.609 68.13 65.885 cv
68.13 66.161 67.907 66.385 67.63 66.385 cv
66.63 66.385 li
66.354 66.385 66.13 66.161 66.13 65.885 cv
66.13 65.609 66.354 65.385 66.63 65.385 cv
69.63 65.385 mo
70.63 65.385 li
70.906 65.385 71.13 65.609 71.13 65.885 cv
71.13 66.161 70.906 66.385 70.63 66.385 cv
69.63 66.385 li
69.354 66.385 69.13 66.161 69.13 65.885 cv
69.13 65.609 69.354 65.385 69.63 65.385 cv
f
47.6266 48.4007 mo
48.8091 48.4007 li
49.1354 48.4007 49.4003 48.6477 49.4003 48.9521 cv
49.4003 49.2564 49.1354 49.5035 48.8091 49.5035 cv
47.6266 49.5035 li
47.3003 49.5035 47.0366 49.2564 47.0366 48.9521 cv
47.0366 48.6477 47.3003 48.4007 47.6266 48.4007 cv
51.1752 48.4007 mo
52.3564 48.4007 li
52.6828 48.4007 52.9477 48.6477 52.9477 48.9521 cv
52.9477 49.2564 52.6828 49.5035 52.3564 49.5035 cv
51.1752 49.5035 li
50.8476 49.5035 50.5828 49.2564 50.5828 48.9521 cv
50.5828 48.6477 50.8476 48.4007 51.1752 48.4007 cv
54.7213 48.4007 mo
55.9038 48.4007 li
56.2313 48.4007 56.495 48.6477 56.495 48.9521 cv
56.495 49.2564 56.2313 49.5035 55.9038 49.5035 cv
54.7213 49.5035 li
54.395 49.5035 54.1301 49.2564 54.1301 48.9521 cv
54.1301 48.6477 54.395 48.4007 54.7213 48.4007 cv
58.2687 48.4007 mo
59.4511 48.4007 li
59.7775 48.4007 60.0424 48.6477 60.0424 48.9521 cv
60.0424 49.2564 59.7775 49.5035 59.4511 49.5035 cv
58.2687 49.5035 li
57.9423 49.5035 57.6786 49.2564 57.6786 48.9521 cv
57.6786 48.6477 57.9423 48.4007 58.2687 48.4007 cv
61.8172 48.4007 mo
62.9985 48.4007 li
63.3248 48.4007 63.5897 48.6477 63.5897 48.9521 cv
63.5897 49.2564 63.3248 49.5035 62.9985 49.5035 cv
61.8172 49.5035 li
61.4897 49.5035 61.2248 49.2564 61.2248 48.9521 cv
61.2248 48.6477 61.4897 48.4007 61.8172 48.4007 cv
65.3634 48.4007 mo
66.5458 48.4007 li
66.8734 48.4007 67.137 48.6477 67.137 48.9521 cv
67.137 49.2564 66.8734 49.5035 66.5458 49.5035 cv
65.3634 49.5035 li
65.037 49.5035 64.7721 49.2564 64.7721 48.9521 cv
64.7721 48.6477 65.037 48.4007 65.3634 48.4007 cv
68.9107 48.4007 mo
70.0932 48.4007 li
70.4195 48.4007 70.6844 48.6477 70.6844 48.9521 cv
70.6844 49.2564 70.4195 49.5035 70.0932 49.5035 cv
68.9107 49.5035 li
68.5844 49.5035 68.3207 49.2564 68.3207 48.9521 cv
68.3207 48.6477 68.5844 48.4007 68.9107 48.4007 cv
72.4593 48.4007 mo
73.6405 48.4007 li
73.9669 48.4007 74.2317 48.6477 74.2317 48.9521 cv
74.2317 49.2564 73.9669 49.5035 73.6405 49.5035 cv
72.4593 49.5035 li
72.1317 49.5035 71.8668 49.2564 71.8668 48.9521 cv
71.8668 48.6477 72.1317 48.4007 72.4593 48.4007 cv
76.0054 48.4007 mo
77.1879 48.4007 li
77.5154 48.4007 77.7791 48.6477 77.7791 48.9521 cv
77.7791 49.2564 77.5154 49.5035 77.1879 49.5035 cv
76.0054 49.5035 li
75.6791 49.5035 75.4142 49.2564 75.4142 48.9521 cv
75.4142 48.6477 75.6791 48.4007 76.0054 48.4007 cv
79.5528 48.4007 mo
80.7352 48.4007 li
81.0616 48.4007 81.3264 48.6477 81.3264 48.9521 cv
81.3264 49.2564 81.0616 49.5035 80.7352 49.5035 cv
79.5528 49.5035 li
79.2264 49.5035 78.9627 49.2564 78.9627 48.9521 cv
78.9627 48.6477 79.2264 48.4007 79.5528 48.4007 cv
83.1013 48.4007 mo
84.2826 48.4007 li
84.6089 48.4007 84.8738 48.6477 84.8738 48.9521 cv
84.8738 49.2564 84.6089 49.5035 84.2826 49.5035 cv
83.1013 49.5035 li
82.7738 49.5035 82.5089 49.2564 82.5089 48.9521 cv
82.5089 48.6477 82.7738 48.4007 83.1013 48.4007 cv
86.6475 48.4007 mo
87.8299 48.4007 li
88.1574 48.4007 88.4211 48.6477 88.4211 48.9521 cv
88.4211 49.2564 88.1574 49.5035 87.8299 49.5035 cv
86.6475 49.5035 li
86.3211 49.5035 86.0562 49.2564 86.0562 48.9521 cv
86.0562 48.6477 86.3211 48.4007 86.6475 48.4007 cv
90.1948 48.4007 mo
91.3773 48.4007 li
91.7048 48.4007 91.9685 48.6477 91.9685 48.9521 cv
91.9685 49.2564 91.7048 49.5035 91.3773 49.5035 cv
90.1948 49.5035 li
89.8685 49.5035 89.6048 49.2564 89.6048 48.9521 cv
89.6048 48.6477 89.8685 48.4007 90.1948 48.4007 cv
93.7433 48.4007 mo
94.9246 48.4007 li
95.251 48.4007 95.5158 48.6477 95.5158 48.9521 cv
95.5158 49.2564 95.251 49.5035 94.9246 49.5035 cv
93.7433 49.5035 li
93.417 49.5035 93.1509 49.2564 93.1509 48.9521 cv
93.1509 48.6477 93.417 48.4007 93.7433 48.4007 cv
97.2895 48.4007 mo
98.472 48.4007 li
98.7995 48.4007 99.0632 48.6477 99.0632 48.9521 cv
99.0632 49.2564 98.7995 49.5035 98.472 49.5035 cv
97.2895 49.5035 li
96.9632 49.5035 96.6983 49.2564 96.6983 48.9521 cv
96.6983 48.6477 96.9632 48.4007 97.2895 48.4007 cv
100.837 48.4007 mo
102.019 48.4007 li
102.347 48.4007 102.611 48.6477 102.611 48.9521 cv
102.611 49.2564 102.347 49.5035 102.019 49.5035 cv
100.837 49.5035 li
100.51 49.5035 100.247 49.2564 100.247 48.9521 cv
100.247 48.6477 100.51 48.4007 100.837 48.4007 cv
104.385 48.4007 mo
105.567 48.4007 li
105.893 48.4007 106.158 48.6477 106.158 48.9521 cv
106.158 49.2564 105.893 49.5035 105.567 49.5035 cv
104.385 49.5035 li
104.059 49.5035 103.793 49.2564 103.793 48.9521 cv
103.793 48.6477 104.059 48.4007 104.385 48.4007 cv
107.932 48.4007 mo
109.114 48.4007 li
109.442 48.4007 109.705 48.6477 109.705 48.9521 cv
109.705 49.2564 109.442 49.5035 109.114 49.5035 cv
107.932 49.5035 li
107.605 49.5035 107.34 49.2564 107.34 48.9521 cv
107.34 48.6477 107.605 48.4007 107.932 48.4007 cv
111.48 48.4007 mo
112.661 48.4007 li
112.989 48.4007 113.253 48.6477 113.253 48.9521 cv
113.253 49.2564 112.989 49.5035 112.661 49.5035 cv
111.48 49.5035 li
111.151 49.5035 110.888 49.2564 110.888 48.9521 cv
110.888 48.6477 111.151 48.4007 111.48 48.4007 cv
115.027 48.4007 mo
116.209 48.4007 li
116.536 48.4007 116.801 48.6477 116.801 48.9521 cv
116.801 49.2564 116.536 49.5035 116.209 49.5035 cv
115.027 49.5035 li
114.701 49.5035 114.435 49.2564 114.435 48.9521 cv
114.435 48.6477 114.701 48.4007 115.027 48.4007 cv
118.575 48.4007 mo
119.755 48.4007 li
120.084 48.4007 120.348 48.6477 120.348 48.9521 cv
120.348 49.2564 120.084 49.5035 119.755 49.5035 cv
118.575 49.5035 li
118.248 49.5035 117.982 49.2564 117.982 48.9521 cv
117.982 48.6477 118.248 48.4007 118.575 48.4007 cv
122.122 48.4007 mo
123.303 48.4007 li
123.631 48.4007 123.896 48.6477 123.896 48.9521 cv
123.896 49.2564 123.631 49.5035 123.303 49.5035 cv
122.122 49.5035 li
121.793 49.5035 121.53 49.2564 121.53 48.9521 cv
121.53 48.6477 121.793 48.4007 122.122 48.4007 cv
125.669 48.4007 mo
126.851 48.4007 li
127.178 48.4007 127.443 48.6477 127.443 48.9521 cv
127.443 49.2564 127.178 49.5035 126.851 49.5035 cv
125.669 49.5035 li
125.343 49.5035 125.077 49.2564 125.077 48.9521 cv
125.077 48.6477 125.343 48.4007 125.669 48.4007 cv
129.217 48.4007 mo
130.397 48.4007 li
130.726 48.4007 130.99 48.6477 130.99 48.9521 cv
130.99 49.2564 130.726 49.5035 130.397 49.5035 cv
129.217 49.5035 li
128.89 49.5035 128.624 49.2564 128.624 48.9521 cv
128.624 48.6477 128.89 48.4007 129.217 48.4007 cv
132.763 48.4007 mo
133.945 48.4007 li
134.273 48.4007 134.538 48.6477 134.538 48.9521 cv
134.538 49.2564 134.273 49.5035 133.945 49.5035 cv
132.763 49.5035 li
132.435 49.5035 132.172 49.2564 132.172 48.9521 cv
132.172 48.6477 132.435 48.4007 132.763 48.4007 cv
136.312 48.4007 mo
137.493 48.4007 li
137.82 48.4007 138.085 48.6477 138.085 48.9521 cv
138.085 49.2564 137.82 49.5035 137.493 49.5035 cv
136.312 49.5035 li
135.985 49.5035 135.719 49.2564 135.719 48.9521 cv
135.719 48.6477 135.985 48.4007 136.312 48.4007 cv
139.859 48.4007 mo
141.039 48.4007 li
141.368 48.4007 141.633 48.6477 141.633 48.9521 cv
141.633 49.2564 141.368 49.5035 141.039 49.5035 cv
139.859 49.5035 li
139.533 49.5035 139.266 49.2564 139.266 48.9521 cv
139.266 48.6477 139.533 48.4007 139.859 48.4007 cv
143.404 48.4007 mo
144.589 48.4007 li
144.915 48.4007 145.18 48.6477 145.18 48.9521 cv
145.18 49.2564 144.915 49.5035 144.589 49.5035 cv
143.404 49.5035 li
143.077 49.5035 142.814 49.2564 142.814 48.9521 cv
142.814 48.6477 143.077 48.4007 143.404 48.4007 cv
146.954 48.4007 mo
148.136 48.4007 li
148.462 48.4007 148.727 48.6477 148.727 48.9521 cv
148.727 49.2564 148.462 49.5035 148.136 49.5035 cv
146.954 49.5035 li
146.627 49.5035 146.362 49.2564 146.362 48.9521 cv
146.362 48.6477 146.627 48.4007 146.954 48.4007 cv
150.501 48.4007 mo
151.681 48.4007 li
152.01 48.4007 152.275 48.6477 152.275 48.9521 cv
152.275 49.2564 152.01 49.5035 151.681 49.5035 cv
150.501 49.5035 li
150.175 49.5035 149.91 49.2564 149.91 48.9521 cv
149.91 48.6477 150.175 48.4007 150.501 48.4007 cv
154.046 48.4007 mo
155.231 48.4007 li
155.557 48.4007 155.822 48.6477 155.822 48.9521 cv
155.822 49.2564 155.557 49.5035 155.231 49.5035 cv
154.046 49.5035 li
153.72 49.5035 153.457 49.2564 153.457 48.9521 cv
153.457 48.6477 153.72 48.4007 154.046 48.4007 cv
157.596 48.4007 mo
158.778 48.4007 li
159.104 48.4007 159.369 48.6477 159.369 48.9521 cv
159.369 49.2564 159.104 49.5035 158.778 49.5035 cv
157.596 49.5035 li
157.269 49.5035 157.004 49.2564 157.004 48.9521 cv
157.004 48.6477 157.269 48.4007 157.596 48.4007 cv
161.143 48.4007 mo
162.323 48.4007 li
162.652 48.4007 162.917 48.6477 162.917 48.9521 cv
162.917 49.2564 162.652 49.5035 162.323 49.5035 cv
161.143 49.5035 li
160.817 49.5035 160.552 49.2564 160.552 48.9521 cv
160.552 48.6477 160.817 48.4007 161.143 48.4007 cv
164.688 48.4007 mo
165.873 48.4007 li
166.199 48.4007 166.464 48.6477 166.464 48.9521 cv
166.464 49.2564 166.199 49.5035 165.873 49.5035 cv
164.688 49.5035 li
164.362 49.5035 164.099 49.2564 164.099 48.9521 cv
164.099 48.6477 164.362 48.4007 164.688 48.4007 cv
168.238 48.4007 mo
169.42 48.4007 li
169.746 48.4007 170.011 48.6477 170.011 48.9521 cv
170.011 49.2564 169.746 49.5035 169.42 49.5035 cv
168.238 49.5035 li
167.911 49.5035 167.646 49.2564 167.646 48.9521 cv
167.646 48.6477 167.911 48.4007 168.238 48.4007 cv
171.785 48.4007 mo
172.965 48.4007 li
173.294 48.4007 173.559 48.6477 173.559 48.9521 cv
173.559 49.2564 173.294 49.5035 172.965 49.5035 cv
171.785 49.5035 li
171.459 49.5035 171.194 49.2564 171.194 48.9521 cv
171.194 48.6477 171.459 48.4007 171.785 48.4007 cv
175.33 48.4007 mo
176.515 48.4007 li
176.841 48.4007 177.106 48.6477 177.106 48.9521 cv
177.106 49.2564 176.841 49.5035 176.515 49.5035 cv
175.33 49.5035 li
175.004 49.5035 174.741 49.2564 174.741 48.9521 cv
174.741 48.6477 175.004 48.4007 175.33 48.4007 cv
178.88 48.4007 mo
180.062 48.4007 li
180.389 48.4007 180.653 48.6477 180.653 48.9521 cv
180.653 49.2564 180.389 49.5035 180.062 49.5035 cv
178.88 49.5035 li
178.553 49.5035 178.288 49.2564 178.288 48.9521 cv
178.288 48.6477 178.553 48.4007 178.88 48.4007 cv
182.427 48.4007 mo
183.607 48.4007 li
183.936 48.4007 184.201 48.6477 184.201 48.9521 cv
184.201 49.2564 183.936 49.5035 183.607 49.5035 cv
182.427 49.5035 li
182.101 49.5035 181.836 49.2564 181.836 48.9521 cv
181.836 48.6477 182.101 48.4007 182.427 48.4007 cv
185.972 48.4007 mo
187.157 48.4007 li
187.483 48.4007 187.748 48.6477 187.748 48.9521 cv
187.748 49.2564 187.483 49.5035 187.157 49.5035 cv
185.972 49.5035 li
185.646 49.5035 185.383 49.2564 185.383 48.9521 cv
185.383 48.6477 185.646 48.4007 185.972 48.4007 cv
189.522 48.4007 mo
190.704 48.4007 li
191.031 48.4007 191.295 48.6477 191.295 48.9521 cv
191.295 49.2564 191.031 49.5035 190.704 49.5035 cv
189.522 49.5035 li
189.195 49.5035 188.931 49.2564 188.931 48.9521 cv
188.931 48.6477 189.195 48.4007 189.522 48.4007 cv
193.069 48.4007 mo
194.249 48.4007 li
194.578 48.4007 194.843 48.6477 194.843 48.9521 cv
194.843 49.2564 194.578 49.5035 194.249 49.5035 cv
193.069 49.5035 li
192.743 49.5035 192.478 49.2564 192.478 48.9521 cv
192.478 48.6477 192.743 48.4007 193.069 48.4007 cv
196.614 48.4007 mo
197.799 48.4007 li
198.125 48.4007 198.39 48.6477 198.39 48.9521 cv
198.39 49.2564 198.125 49.5035 197.799 49.5035 cv
196.614 49.5035 li
196.288 49.5035 196.025 49.2564 196.025 48.9521 cv
196.025 48.6477 196.288 48.4007 196.614 48.4007 cv
200.164 48.4007 mo
201.346 48.4007 li
201.673 48.4007 201.937 48.6477 201.937 48.9521 cv
201.937 49.2564 201.673 49.5035 201.346 49.5035 cv
200.164 49.5035 li
199.837 49.5035 199.573 49.2564 199.573 48.9521 cv
199.573 48.6477 199.837 48.4007 200.164 48.4007 cv
203.711 48.4007 mo
204.894 48.4007 li
205.22 48.4007 205.485 48.6477 205.485 48.9521 cv
205.485 49.2564 205.22 49.5035 204.894 49.5035 cv
203.711 49.5035 li
203.385 49.5035 203.12 49.2564 203.12 48.9521 cv
203.12 48.6477 203.385 48.4007 203.711 48.4007 cv
207.256 48.4007 mo
208.441 48.4007 li
208.767 48.4007 209.032 48.6477 209.032 48.9521 cv
209.032 49.2564 208.767 49.5035 208.441 49.5035 cv
207.256 49.5035 li
206.93 49.5035 206.667 49.2564 206.667 48.9521 cv
206.667 48.6477 206.93 48.4007 207.256 48.4007 cv
210.806 48.4007 mo
211.988 48.4007 li
212.315 48.4007 212.58 48.6477 212.58 48.9521 cv
212.58 49.2564 212.315 49.5035 211.988 49.5035 cv
210.806 49.5035 li
210.479 49.5035 210.215 49.2564 210.215 48.9521 cv
210.215 48.6477 210.479 48.4007 210.806 48.4007 cv
214.353 48.4007 mo
215.536 48.4007 li
215.862 48.4007 216.127 48.6477 216.127 48.9521 cv
216.127 49.2564 215.862 49.5035 215.536 49.5035 cv
214.353 49.5035 li
214.027 49.5035 213.762 49.2564 213.762 48.9521 cv
213.762 48.6477 214.027 48.4007 214.353 48.4007 cv
217.898 48.4007 mo
219.083 48.4007 li
219.409 48.4007 219.674 48.6477 219.674 48.9521 cv
219.674 49.2564 219.409 49.5035 219.083 49.5035 cv
217.898 49.5035 li
217.572 49.5035 217.309 49.2564 217.309 48.9521 cv
217.309 48.6477 217.572 48.4007 217.898 48.4007 cv
221.448 48.4007 mo
222.63 48.4007 li
222.957 48.4007 223.222 48.6477 223.222 48.9521 cv
223.222 49.2564 222.957 49.5035 222.63 49.5035 cv
221.448 49.5035 li
221.122 49.5035 220.857 49.2564 220.857 48.9521 cv
220.857 48.6477 221.122 48.4007 221.448 48.4007 cv
224.995 48.4007 mo
226.178 48.4007 li
226.504 48.4007 226.769 48.6477 226.769 48.9521 cv
226.769 49.2564 226.504 49.5035 226.178 49.5035 cv
224.995 49.5035 li
224.669 49.5035 224.404 49.2564 224.404 48.9521 cv
224.404 48.6477 224.669 48.4007 224.995 48.4007 cv
228.54 48.4007 mo
229.725 48.4007 li
230.051 48.4007 230.316 48.6477 230.316 48.9521 cv
230.316 49.2564 230.051 49.5035 229.725 49.5035 cv
228.54 49.5035 li
228.214 49.5035 227.951 49.2564 227.951 48.9521 cv
227.951 48.6477 228.214 48.4007 228.54 48.4007 cv
232.09 48.4007 mo
233.272 48.4007 li
233.599 48.4007 233.864 48.6477 233.864 48.9521 cv
233.864 49.2564 233.599 49.5035 233.272 49.5035 cv
232.09 49.5035 li
231.764 49.5035 231.499 49.2564 231.499 48.9521 cv
231.499 48.6477 231.764 48.4007 232.09 48.4007 cv
235.637 48.4007 mo
236.677 48.4007 li
237.003 48.4007 237.268 48.6477 237.268 48.9521 cv
237.268 49.2564 237.003 49.5035 236.677 49.5035 cv
235.637 49.5035 li
235.311 49.5035 235.046 49.2564 235.046 48.9521 cv
235.046 48.6477 235.311 48.4007 235.637 48.4007 cv
f
%ADOBeginSubsetFont: ODAAAA+Calibri-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/ODAAAA+Calibri 8 GetGlyphDirectory
62 <001C60D8A8C9B7171E8B1A8E6313E3398209E3D260B6F15325DCB45ECD77
36181F507CB4487F34F0C59AFEB0721592A12F0589FA4C3A7603462313C63656
B09A8D44D0BD8D70558844CA341A4EE2AC79F611A3ED366B2D2FE339B138BAAE
B8D89A1F21C50A63D7C75CB2B4AF444273F3D83A0ACE429472C68390F392B236
C485C1D89000FF66B1CD626A7276BDCB191387CD8BEAF0A2AA6552> |
381 <001C60D8A8C9B78C66ECF3075BCC0F7D87F2E9EA9E473D66D53E6D1735C
12EAC0562A2F6FB428E7F7051A3A7B2D4CA6ED90F77808579359B7E539B5388F
6F54555E1422B5F329989100C1CD5239E87FECD85E14E914ADC27391A1F5624B
31EE69A68B9016D73D6A01A100E004523AC53318A2FC2260E74BA80D4ABD1433
EC67800CC9F77763DCF8156EA5CA478ABF1FAF7864EAD55939BE7FA4A9E8660C
E98DDE8CBC35F3FFF4E5C2DA4A292CE30D82057E70A8562AFB17C90FC331A4C4
6B48C7BBCED55DB7F94D559D534C59FF211B5A85F0207876BD8D6B2C7BBBC069
64A16F72BBAE841F001B71209E6C81DC64817ADE625E8FF> |
258 <001C60D8A8C9B75CBB53379352952B97D633633CE49B1F5650B8155AFDF
A57F94D359804093E4912F3B89577762AB5877203F1CDAD240C521DE74183EDA
10501967DB6487C182138B12C453C5DB9629F7EF021028117511EFEAB941896E
32D9CC68D6E66540771999A4E30C4826A52D7536EDDF7E00016C895CE43408B4
4BE33E2D9A6163827E05AB8B1144BC909A74F6D7828DE6E08164A25E320920E3
54020A41D59E9E3B008A20EC107F9E18745DE21F9AF293EB0F319B529D840D8B
A9319522EDDCACA13336C059581181C082BF0D7F4117FAEB429D871E099AEE43
94FED2FB3A1C712D1799055BA832AD846B95DA8BB4E63B103C908FA309FAA3B7
8140CE2A22AE06B2A1EA5BD3AA13DD1ED75DA4AD37493780FE662EF5D1B53C4A
F41845C0C77655CE94F0C9DEBE29248A1EAAF3A6EA79D5BB5C090457B818DD62
F70E197CEA94F90229AB4FD685A1ADB5E4E4C1DBDB28AA3854323EE2FD22692E
C70> |
282 <001C60D8A8C9B78E05EAA3CECCCC7ABA6A35E55F211820F669BFFF2D107
F3F003F84456D947B5557966A2009812B81B51372EB70EB729C8C82B63A473DB
5161C83385AAD04B71C9D388B2F86E7C2E91E06E59E76C532F8A600B530589A2
18BCA1E889366120C885033631C7850C65A7F9274D24F9BF6FA89E174B53B0E1
A2CF6D783F32D4C0BE4ACD3EEAF66A8BEC8DB7AC7ADBF3C9CDF5485D002662D3
10ACCD320AD0234A2F2251E7C0B1667BFFC7E10EE40C7CB623518E3E168137CE
699E133B767C86E16CACCA64A58BD9D7F6E66BED6D6FE5D80E0381141549FFB2
FBF94ECD2D262EB097909F9092B71E3573FC9B4FD273505C685B327AE9095A2A
15545986A397AE2796BDB3888D16AF3DD82BF32621BC8C1393814540227FC926
F77872F2FAF5DD33717EB461ACFE3EE5C279294EBB5AADC09C8B10C3F2CB25CC
D97C6> |
3 <001C60D8A8C9B888C146> |
894 <001C60D8A8C9B83D5FF27DA8D8E6046A27BA23CC1486AB72A59E47AACC8
161CC74CDD95CC2A654D5856D60A8DC5F8C184EC1ABC4D1D2160575FE6D70949
B41A6CABCFACD73360CFC5DA53716AD56E7BCBA30E5CBADDBCE536F92B4EFC10
AF93D5AA400F7912003F9E093421F683C28EAAC53C2248A1C92A4ADDC6F6F189
A13C295B6CA124F9A4CA4E40FBBF41FDD3287A0301EBE9D805D7A4030F818C18
B05D8592B2DBF59F7F26BA45EDE7B24A816E6CC3105B053A64C91913E22DD3F6
6D2B695F53F3F722E2F8096827FF689C16601C625CCC1> |
400 <001C60D8A8C9B7347873EC11B675AA6F6B461106EA2C61A0AE571750A08
2679294B529694EFA74202690239BCD02BDE93B33BD8DE0F0F0056B04093EE6C
4E83D6F00E22E61E0A53509E628E3614EF2EF2CA3A8502F22A560E46ED3E4AED
0BFD271CCE464114B6332D17C4A046EF74FFF1283283A642C8C06B85A0D72357
B5665CD862A8E3D30EFFEE242F88B9C12DF917A74252DB462B49970474974786
9638F8FD8E70AF4405F95B11DFD154B7101933A31068AA1E65CC021277CCB9EC
0EAA7B978A081D1A4252A6693984AAF2CEC4413666DCF8B310A71A67C6E7B1DB
954E186EA16C83551DD0516966C156876A3DE36ED7253FFBBC1504668DC98301
370300A04E6753189718288CD7EF0ED409765A888272FDB25977C8A74BC113E1
88B3DF6A69F7851A7E60496291AA0B15532572787EAC7F32F09F1E72589E0E74
E0349313472D872E64E7DB78BAB05598FE04B70E52D818F2F7B0B56A56882993
52E62F16B011595A7D7701FD641BB2FCFCADB2E33263B8A208C4183E753AD5C2
5861BF542F2009EA70BB7A67B3BE61085D37469DCDCB97CB2B41A0E2B4DB3BE6
7C2BA9A1482E51611AB708AAB8BC978B06758006F3287DD3A3CABA09A9F59A21
B0D386F88> |
895 <001C60D8A8C9B83D5FF29F44B652980D05B9EE187D926BB2CE034E7CDFB
42233F20EA0B6A7D3053EB0C035C6C189F4DA6B49B40A0EB0636B7ACA2CF4279
2FC2164693E9F6F7B6636D9708884EE48CE23B1AFB94FA912772ABED4AB22E20
E0410244F282681ABF0BF3F1FF921D275AD5C6D7F8F439D5D0B2BAD1CBD8078F
961EB6B7FB4BFFE77692BCE19880B8A84987A61F63B3F03252C231FCBB5CB61D
BA6789BB581DA0ED1802F2C6AAE0EF2092080B688E21E45FC07A90B21EAB8701
889CC58EAA06C962B> |
!
end
end end
%ADOEndSubsetFont
KJJRUZ+Calibri [12 0 0 -12 0 0 ]msf
.3458 14.4553 mo
(\000>\001}\001\002\001\032\000\003\003~\001\220\003\177)
[5.04126 6.3252 5.74933 6.30121 2.71326 3.63721 4.69336 0 ]xsh
gsave
328.4 132.925 mo
221.15 132.925 li
221.15 129.745 li
328.4 129.745 li
328.4 132.925 li
328.4 126.745 mo
221.15 126.745 li
221.15 85.675 li
221.9 85.675 li
221.9 93.175 li
225.564 93.175 li
225.564 126.196 li
225.94 126.196 li
225.564 126.196 li
225.564 126.57 li
323.215 126.57 li
323.215 93.175 li
327.65 93.175 li
327.65 85.675 li
328.4 85.675 li
328.4 126.745 li
clp
220.208 133.922 mo
329.312 133.922 li
329.312 84.698 li
220.208 84.698 li
cp
/20 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 43 
/Lookup <~
z!!WE'!!!-%!!ro2!!!6(!!s)7!"KM>!t,bB!"TYA!"p%I!"g.M!#?[W!"p%I!#ZmZ!$!Be!$3`m!$3f
o!$O&s!!j&7!"p+K!#d3b!%'Z*!$s],!$s`-!#[9e!$aE&!%0l/!%'u3!>QXU!$*Qi!%'l0!%1,6!$*N
h!$jK'!#$7N!$F&t!#Zs\!$3ip!tuLO!>lpZ!#d$]!#Hm\!!il2!##tF~>
>>
/CSD add_res
/20 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[109.104 0 0 49.224 220.208 16.188 ]ct
snap_to_device
<<
/T 1
/W 145 
/H 65 
/M[145 0 0 -65 0 65 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcLB&JcLB&ZN(%-!WpgQYQFq.!Whup"9AW/"pa8rT*PQ)"pG,1p](Et!sT&=pBuof":>G>!s/<"rW!-(
"UkhM%hO[3q[j#D%h9$W"TnK""p,DN'G2&qSepW-"r7pc'GD)\q#CR""pu1b)Qt+2)[.,t(^^HKq#CR"
"rnX$*l/r:*sE]'*?57bq#CR""rna'*n)4:*sE]'+<1Req#CR""rna'*p"K:*sE]'+<1Req#CR""rna'
*qpb:*sE]'+<1ReqZ$j$!!3?E+;l5X+8[,`*Z6(?"p4T#"TelJ+;l5j+6ajN*Z6(?"p4T#"TelJ+;l6'
+4hS<*Z6(?"p4T#"TelJ+;l69+2o<**Z6(?"p4T#"TelJ+;l6K+1!$m*Z6(?"p4T#"TelJ+;l6]+/'b[
*Z6(?"p4T#"TelJ+;l6o+-.KI*Z6(?"p4W$"on]/*$?+?M')X;"WeO(*!QK?!!NE.*$?+?Rigo;"WeO(
*!QK?!!NE.*$?+?XWQ1;"WeO(*!QK?!!NE.*$?+?^E:H;"WeO(*!QK?!!NE.*$?+?d3#_;"WeO(*!QK?
!!NE.*$?+?iub!;"WeO(*!QK?!!NE.*$?+?ocK8;"WeO(*!QKC!;um$!X9Ve)'4_Yq&]b])'Bn'!r2g"
!X9Ve)'5@kk8sjK)'Bn'!r2g"!X9Ve)'6"(eK4r9)'Bn'!r2g"!X9Ve)'6X:_]K%')'Bn'!r2g"!X9Ve
)'79LYoa,j)'Bn'!r2g"!X9Ve)'7o^T-"4X)'Bn'!r2g"!X9Ve)'8PpN?8<F)'Bn'!rN&t!!NE.*$?+?
M]_d;"WeO(*!QK?!!NE.*$?+?SKI&;"WeO(*!QK?!!NE.*$?+?Y92=;"WeO(*!QK?!!NE.*$?+?_&pT;
"WeO(*!QK?!!NE.*$?+?diYk;"WeO(*!QK?!!NE.*$?+?jWC-;"WeO(*!QK?!!NE.*$?+?pE,D;"WeO(
*!QKA!!`K(!X9Ve)'4YWq]>t_)'Bn'!r2g"!X9Ve)'5:ikoU'M)'Bn'!r2g"!X9Ve)'5q&f,k/;)'Bn'
!r2g"!X9Ve)'6R8`?,7))'Bn'!r2g"!X9Ve)'73JZQB>l)'Bn'!r2g"!X9Ve)'7i\TcXFZ)'Bn'!r2g"
!X9Ve)'8JnNunNH)'Bn'!r;m$!!3?E+;l5W+8d2a*Z6(?"p4T#"TelJ+;l5i+6jpO*Z6(?"p4T#"TelJ
+;l6&+4qY=*Z6(?"p4T#"TelJ+;l68+3#B+*Z6(?"p4T#"TelJ+;l6J+1**n*Z6(?"p4T#"TelJ*>opY
+/0h\*Z5t<"p4T#"Tel8(a0sn)iu!B*[)@-"p4`'r;[!&&g@f1'oWt)(BkNu%O)Meq#CU#"UQFp&1*q\
kRe"F&03#&"TnK""T\`2-7:4G.FfjN-mp>H"9J8t!s0qV/&;Y2$j/!a.K];D!<NAO.^(<&!s8&oj8keP
joBu5JcLB&h>i'~>

%%EndBinary
grestore
np
grestore
gsave
221.15 126.745 mo
328.4 126.745 li
328.4 129.745 li
221.15 129.745 li
cp
clp
220.208 130.922 mo
329.312 130.922 li
329.312 125.978 li
220.208 125.978 li
cp
/21 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 32 
/Lookup <~
ccX+mccX+kbf@S``Oi^&]rnM2[&9l^YG.pFY+MU?Xe)I=c,R\caLo',^9Xq?\#?;fZDFNUYbS*JYG.sI
cH!edahYT@_RHgX]WSD0\Z2\o\#QGj\>cGgcH3nfc,RS]ahGB6`4<9h_R?^T_R6XPccF"hbf7>RbJCoG
cH*qi~>
>>
/CSD add_res
/21 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[109.104 0 0 4.944 220.208 19.188 ]ct
snap_to_device
<<
/T 1
/W 145 
/H 6 
/M[145 0 0 -6 0 6 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
r;[$&!WrQ/"p^+nq?R91"pG,3!Wi)s"p##;$OdIST+C,r"qD(N$OR1@q#CU"&.oNg'G[kgeeSH)'GD)k
&-;S,"T]DV)&aI2*5`a")]BS2(BO:2!s'DD*n)48*s3Pc*<Gj6!<F>(*M"2O+9D?>J,~>

%%EndBinary
grestore
np
grestore
225.94 126.196 mo
322.839 126.196 li
322.839 88.559 li
225.94 88.559 li
cp
.505211 0 .679927 0 cmyk
f
225.94 126.196 mo
225.94 125.82 li
322.463 125.82 li
322.463 88.933 li
226.315 88.934 li
226.315 126.196 li
225.94 126.196 li
225.94 125.82 li
225.94 126.196 li
225.564 126.196 li
225.564 88.183 li
323.215 88.183 li
323.215 126.57 li
225.564 126.57 li
225.564 126.196 li
225.94 126.196 li
f
0 0 0 0 cmyk
KJJRUZ+Calibri [14.25 0 0 -14.25 0 0 ]msf
242.35 111.775 mo
(\000Z\000K\000h\000E\000\030\003\356\003r\001\232)
[7.49551 9.00452 9.01172 9.7399 8.25656 7.10217 4.29785 0 ]xsh
KJJRUZ+Calibri [9 0 0 -9 0 0 ]msf
301.92 113.725 mo
(\003\356)sh
gsave
175.65 100.675 mo
175.65 93.175 li
69.15 93.175 li
69.15 66.026 li
69.211 66.233 69.402 66.385 69.629 66.385 cv
70.63 66.385 li
70.906 66.385 71.13 66.161 71.13 65.885 cv
71.13 65.609 70.906 65.385 70.63 65.385 cv
69.629 65.385 li
69.402 65.385 69.211 65.537 69.15 65.744 cv
69.15 60.175 li
175.65 60.175 li
175.65 100.675 li
173.55 63.965 mo
173.274 63.965 173.049 64.189 173.049 64.465 cv
173.049 64.742 173.274 64.966 173.55 64.965 cv
174.55 64.965 li
174.826 64.965 175.05 64.741 175.05 64.465 cv
175.05 64.189 174.825 63.965 174.549 63.965 cv
173.55 63.965 li
clp
68.208 101.642 mo
176.592 101.642 li
176.592 59.258 li
68.208 59.258 li
cp
/22 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 54 
/Lookup <~
z!!WE'!!!-%!!ro2!!il2!!j&7!t,bB!"TYA!tuLO!#?RT!#ZmZ!#?[W!#?UU!"p+K!#-:N!#Hm\!$*Q
i!$Nrp!$3fo!$O&s!$!9b!"KM>!$a<#!$sW*!$s`-!$aE&!$*Wk!>lpZ!!!6(!%'l0!%:)4!%'u3!$s]
,!Y5nD!%'u3!%1,6!$3ip!#Zs\!"fkE!$j2t!$jK'!$3]l!##tF!#$7N!$!<c!$3`m!$j2t!#d3b!"g.
M!#HaX!#d'^!>QXU!"9M@!!s)7!"p%I~>
>>
/CSD add_res
/22 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[108.384 0 0 42.384 68.208 48.468 ]ct
snap_to_device
<<
/T 1
/W 144 
/H 56 
/M[144 0 0 -56 0 56 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcLB&JcLB&[f?F0!mUnT!s&H(p&G0r"9f"f#G_S,"pG,2p](Hu"9o,<$M"Rh$O$kG%0m";q#CKu"V)%E
&.oP1'*/^X":u7V'a+73"Tnr8&/H(I)"AFI(E",1#93d@!!WN1$5"'p*iC+=*sWi-+;,&*"9J?!"p5)<
&f;Z6\0K?F#9k3+,UFc?!Vud"!s]2I(a$gD^*<h((aLCS"9J?!"Tnu;',VhE,HW0p*uH7L-3OAG!!NH0
$PO@!l6DfD"s4[-,pi`qq>^[$#7D1^+8[:@,7#A.,UFc?!<<,t!!NH0$PO@!N?e6D"s4[-,pi`qq>^[$
#7D1^+.a_@,6f5,,UFc?!Vud"!s]2I(a#q+f-:JA(aLCS"9J?!"Tnu;',Vh,,K:r4*uH7L-3OAG!!NH0
$PO@!d3H%D"s4[-,pi`qq>^[$#7D1^+6"N@,6f5,,UFc?!Vud"!s]2I(a&>oP9U8R(aLCS"9J?!!WrZ8
!YZCmKd-dD(aLCS"9J?!"Tnu;',VgW,Oco^*uH7L-3OAG!!NH0$PO@!V^((D"s4[-,pi`qq>^[$#7D1^
+1NQ@,6f5,,UFc?!Vud"!s]2I(a$jE]d!_'(aLCS"9J?!"Tnu;',VhF,HN*o*uH7L-3OAK!;um$!s]2I
(a"\]qBH1d(aLCS"9J?!"Tnu;',Vg^,O$EW*uH7L-3OAG!!NH0$PO@!Xs;RD"s4[-,pi`qq>^[$#7D1^
+29&@,6f5,,UFc?!Vud"!s]2I(a%*L[Nbtu(aLCS"9J?!"Tnu;',VhM,GcUh*uH7L-3OAG!!NH0$PO@!
nfsAD"s4[-,pi`qq>^U"#7D1G(a"GV!$;@],UFc?!Vud"!s]2I(a#"fnKS5[(aLCS"9J?!"Tnu;',Vgg
,N'dN*uH7L-3OAG!!NH0$PO@![j03D"s4[-,pi`qq>^[$#7D1^+35\@,6f5,,UFc?!Vud"!s]2I(a%EU
XWn#l(aLCS"9J?!"Tnu;',VhV,Fft_*uH7L-3OAG!!NH0$PO@!q]h"D#Tjm/,pi`q!!)os"Tnu;',VgN
,P`Pg*uH7L-3OAG!!NH0$PO@!Sg3GD"s4[-,pi`qq>^^%#7D.]*[7g5fHUVF*Z-.K-3OAG!!WN1$7?W1
*l/r=*sWi-+;,tD"9J?!"Tnr;)CQ`U(pt1b+=JZG.NAKc!!NE=.kE8)iY/+$"YMA[0EqXT!!NE,+YYW+
o+.#q"YpHA1c5@0!!*-Y!<sm(2?buc#;lSapAb3q*0^To"9KPE!V?Ag!SmdR!.k3&!29ID~>

%%EndBinary
grestore
np
grestore
gsave
174.55 64.965 mo
173.55 64.965 li
173.274 64.966 173.049 64.742 173.049 64.465 cv
173.049 64.189 173.274 63.965 173.55 63.965 cv
174.549 63.965 li
174.825 63.965 175.05 64.189 175.05 64.465 cv
175.05 64.741 174.826 64.965 174.55 64.965 cv
clp
172.488 65.642 mo
175.872 65.642 li
175.872 62.978 li
172.488 62.978 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[3.384 0 0 2.664 172.488 84.468 ]ct
snap_to_device
<<
/T 1
/W 4 
/H 3 
/M[4 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~cd0q`cd0q`cHjh_~>
<~b0%lLb0%lLaNDZJ~>
<~_SX1,_SX1,`59C.~>
<~R@0J2Q^O80QC4//~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
gsave
175.65 100.675 mo
170.895 100.675 li
170.895 95.385 li
73.244 95.385 li
73.244 100.675 li
69.15 100.675 li
69.15 93.175 li
175.65 93.175 li
175.65 100.675 li
clp
68.688 101.162 mo
176.112 101.162 li
176.112 92.858 li
68.688 92.858 li
cp
/23 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 122 
/Lookup <~
z!!ro2!"TS?!"p.L!#HgZ!$3`m!$aE&!%0l/!%'u3!%:)4!%1,6!$*]m!#d'^!#6@O!"feC!!ir4!!il
2!!WE'!!<3$!$*Zl!$sH%!%'u3!"TS?!#6=N!#d$]!$Nrp!$j]-!%:#2!$s`-!#$4M!=fbC!$Nim!$a<
#!$jW+!%'l0!%'l0!$s],!$*Wk!#d$]!t,bB!!<Q.!!<N-!t5bA!"p+K!#ZmZ!#mBf!$a2u!$sW*!$X3
!!$3Ti!#Zs\!#?FP!tZ(F!!*E,!!!6(!!<B)!"9D=!"]nG!#-CQ!#[3c!$Nrp!$X9#!$sH%!$jH&!$3f
o!#$@Q!"p%I!tc+F!!!-%!!s)7!#6@O!#d*_!$*Qi!$O#r!$j2t!$X)s!$*Wk!#[-a!"g.M!"fnF!"f\
@!!ii1!#HFO!#HaX!$!9b!$*Qi!$Efm"!9,q"Wf8r!$*Qi"<Aii!uiKc!"p+K!"TJ<!#-"F!"KG<!#?^
X!#QRR!"958!#$7N!#['_!$*Nh!$X/u!#I!_!"KM>!"fkE!$3ip!$a6!!$F&t!$3`m!#[0b!t5_@!"p%
I!#?UU!$!Ef!$aH'!$O&s!#?^X!#m$\!$sf/!#Hm\!$X#q!$3]l~>
>>
/CSD add_res
/23 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[107.424 0 0 8.304 68.688 48.948 ]ct
snap_to_device
<<
/T 1
/W 223 
/H 17 
/M[223 0 0 -17 0 17 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qu@$(!<N?+"U52;$'>S!$4@.G#6kPE%1Wm[&JFm>$3://!sB8O#71\Ond9sUcjC0r#mgh@$OdIS%hK<c
q#Ca&!>ZIg)&*tp)[Xt.Jed_h$jdjY*#'%p*?Gb'&JFm>$3:/C(Dn5:+X/-MZm1VV$l^E8,TnB[*@E6a
&JFm>#QXrU.kE8)0-$/\X9T(P0/,+91GgsI&JFm>#rae&3BB5a4[)+&#(d''"pmLX4[;(p6:27ppAbLf
6q%ST7n?3D9%?Rd9C#4W8kMZK9hnJ\&5i0%#t.00*`>p9<E<20=Gp8e=&rI->?hYD6i]XL!!u%]-lu8b
<)lt#QWU7i$!1/1<)Z7m?T0q<!!u%]-lu8b<)lt#pK3#La]JjN<`Mk%@:!;<;>1%s6ptJo@q9.98hSb.
JnF4Y#qehA9P6CHBE8/.!!kt\?YO"E9PS@Q+GV'BCM[j*3WhBU!<Mop#Z4H;E,fniF"`q)VBH:"F*'!V
.i'Qm&eb!?$3:/W6?YmR+U928qfdX9a*.q9+pT8S-$TM-2)Z$Zq#Ca&!>ZIgGn_DH)[Y:*JdCKE$jdjt
*#'%p*@DC0&JFm>$3://!sEoa*!lod]a9E"!u2+K#7(MA$k3[W&.oQN!"&`-!WrQ='F+pN'qPc/$4IXU
#mUYB$k3[W&.oQS!.Y~>

%%EndBinary
grestore
np
grestore
gsave
73.995 96.136 mo
170.143 96.136 li
170.143 100.675 li
73.995 100.675 li
cp
clp
72.648 101.642 mo
171.312 101.642 li
171.312 95.258 li
72.648 95.258 li
cp
/24 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
!+iqG!+itH!+`nG!+`kF!+itH!+N_D!+N_D!+`kF~>
>>
/CSD add_res
/24 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[98.664 0 0 6.384 72.648 48.468 ]ct
snap_to_device
<<
/T 1
/W 131 
/H 8 
/M[131 0 0 -8 0 8 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!!*!!L&qS]!<E9*"U"j`#5eZ/!=&`0"9=DapB1Ks"-*QR"dB,W"-j%A"bHp:"b6~>

%%EndBinary
grestore
np
grestore
gsave
170.895 100.675 mo
170.143 100.675 li
170.143 96.136 li
73.995 96.136 li
73.995 100.675 li
73.244 100.675 li
73.244 95.385 li
170.895 95.385 li
170.895 100.675 li
clp
71.928 101.642 mo
172.032 101.642 li
172.032 94.538 li
71.928 94.538 li
cp
/25 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
!+itH!+iqG!+`nG!+itH!+`kF!+N_D!+N_D!+`kF~>
>>
/CSD add_res
/25 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[100.104 0 0 7.104 71.928 48.468 ]ct
snap_to_device
<<
/T 1
/W 133 
/H 9 
/M[133 0 0 -9 0 9 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
"98H(!s+/[#6Y/1!s8N+!WE1\!r2m'!s8Z0"TS]+"-Wr\"pY58!!NN/!!/Geli7(f"9b.si!#kYhZT_Y
Jd$`0b6<C~>

%%EndBinary
grestore
np
grestore
gsave
70.63 66.385 mo
69.629 66.385 li
69.402 66.385 69.211 66.233 69.15 66.026 cv
69.15 65.744 li
69.211 65.537 69.402 65.385 69.629 65.385 cv
70.63 65.385 li
70.906 65.385 71.13 65.609 71.13 65.885 cv
71.13 66.161 70.906 66.385 70.63 66.385 cv
clp
68.208 67.082 mo
72.312 67.082 li
72.312 64.538 li
68.208 64.538 li
cp
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[4.104 0 0 2.544 68.208 83.028 ]ct
snap_to_device
<<
/T 1
/W 5 
/H 3 
/M[5 0 0 -3 0 3 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 0 1 ]
/DS 
[
<~cd0q`cd0q`cd'k_cd0l~>
<~b0%lLb0%lLb/h`Jb0%d~>
<~_SX1,_SX1,_Sj=._SX4~>
<~R@0J2Q^O80R?j8/R@0?~>
]
/O 3
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
73.62 93.995 mo
170.519 93.995 li
170.519 63.05 li
73.62 63.05 li
cp
0 .633417 .672175 0 cmyk
f
73.62 93.995 mo
170.519 93.995 li
170.519 63.05 li
73.62 63.05 li
cp
@
0 0 0 0 cmyk
KJJRUZ+Calibri [14.25 0 0 -14.25 0 0 ]msf
89.9998 82.8953 mo
(\000Z\000K\000h\000E\000\030\003\360\003r\001\232)
[7.49551 9.00453 9.0117 9.73991 8.28654 7.09239 4.27786 0 ]xsh
KJJRUZ+Calibri [9 0 0 -9 0 0 ]msf
149.6 84.8552 mo
(\003\360)sh
gsave
327.658 85.675 mo
225.282 85.675 li
225.282 64.811 li
225.372 64.72 225.427 64.594 225.427 64.454 cv
225.427 64.314 225.371 64.188 225.282 64.097 cv
225.282 46.675 li
327.658 46.675 li
327.658 85.675 li
226.879 63.953 mo
226.612 63.953 226.394 64.177 226.394 64.453 cv
226.394 64.729 226.612 64.953 226.879 64.953 cv
227.848 64.952 li
228.115 64.952 228.332 64.729 228.332 64.453 cv
228.332 64.176 228.114 63.953 227.847 63.953 cv
226.879 63.953 li
229.783 63.952 mo
229.516 63.952 229.3 64.176 229.3 64.452 cv
229.3 64.728 229.517 64.952 229.784 64.952 cv
230.752 64.951 li
231.019 64.951 231.236 64.727 231.236 64.451 cv
231.235 64.175 231.019 63.952 230.752 63.952 cv
229.783 63.952 li
232.688 63.951 mo
232.42 63.951 232.204 64.175 232.204 64.451 cv
232.204 64.727 232.421 64.951 232.688 64.951 cv
233.656 64.951 li
233.923 64.951 234.14 64.727 234.14 64.45 cv
234.14 64.174 233.923 63.951 233.656 63.951 cv
232.688 63.951 li
236.559 63.949 mo
235.592 63.95 li
235.325 63.95 235.107 64.174 235.107 64.45 cv
235.108 64.727 235.325 64.95 235.592 64.95 cv
236.56 64.95 li
236.828 64.95 237.044 64.726 237.044 64.45 cv
237.044 64.174 236.827 63.949 236.559 63.949 cv
238.496 63.949 mo
238.228 63.949 238.012 64.173 238.012 64.449 cv
238.012 64.726 238.229 64.949 238.497 64.949 cv
239.465 64.948 li
239.732 64.948 239.949 64.725 239.949 64.449 cv
239.948 64.173 239.732 63.949 239.465 63.949 cv
238.496 63.949 li
241.401 63.948 mo
241.133 63.948 240.917 64.172 240.917 64.448 cv
240.917 64.724 241.134 64.948 241.401 64.948 cv
242.369 64.947 li
242.636 64.947 242.853 64.724 242.853 64.447 cv
242.853 64.171 242.636 63.948 242.369 63.948 cv
241.401 63.948 li
244.305 63.947 mo
244.038 63.947 243.82 64.171 243.82 64.447 cv
243.821 64.723 244.038 64.947 244.305 64.947 cv
245.273 64.947 li
245.54 64.947 245.757 64.722 245.757 64.446 cv
245.757 64.17 245.539 63.947 245.272 63.947 cv
244.305 63.947 li
248.177 63.945 mo
247.208 63.946 li
246.941 63.946 246.725 64.17 246.725 64.446 cv
246.725 64.722 246.942 64.946 247.209 64.946 cv
248.177 64.946 li
248.445 64.946 248.662 64.721 248.662 64.446 cv
248.661 64.169 248.445 63.945 248.177 63.945 cv
251.082 63.944 mo
250.114 63.945 li
249.846 63.945 249.63 64.169 249.63 64.446 cv
249.63 64.721 249.846 64.945 250.114 64.945 cv
251.082 64.945 li
251.349 64.945 251.566 64.721 251.566 64.445 cv
251.566 64.169 251.349 63.944 251.082 63.944 cv
253.018 63.944 mo
252.751 63.944 252.533 64.168 252.533 64.444 cv
252.534 64.72 252.751 64.944 253.018 64.944 cv
253.986 64.943 li
254.253 64.943 254.47 64.72 254.47 64.443 cv
254.47 64.167 254.252 63.944 253.985 63.944 cv
253.018 63.944 li
255.921 63.943 mo
255.654 63.943 255.438 64.167 255.438 64.443 cv
255.438 64.719 255.655 64.943 255.922 64.943 cv
256.89 64.942 li
257.158 64.942 257.374 64.718 257.374 64.442 cv
257.373 64.166 257.158 63.943 256.89 63.943 cv
255.921 63.943 li
259.795 63.941 mo
258.827 63.942 li
258.558 63.942 258.342 64.166 258.342 64.442 cv
258.342 64.718 258.559 64.941 258.827 64.941 cv
259.795 64.941 li
260.062 64.941 260.279 64.717 260.279 64.441 cv
260.279 64.165 260.062 63.941 259.795 63.941 cv
262.698 63.94 mo
261.731 63.941 li
261.464 63.941 261.246 64.165 261.246 64.441 cv
261.246 64.717 261.464 64.941 261.731 64.941 cv
262.699 64.941 li
262.966 64.941 263.183 64.716 263.183 64.44 cv
263.183 64.164 262.965 63.94 262.698 63.94 cv
265.603 63.939 mo
264.634 63.94 li
264.367 63.94 264.151 64.164 264.151 64.44 cv
264.151 64.716 264.367 64.94 264.635 64.94 cv
265.603 64.94 li
265.87 64.94 266.087 64.716 266.087 64.44 cv
266.086 64.164 265.87 63.939 265.603 63.939 cv
267.539 63.938 mo
267.271 63.938 267.055 64.163 267.055 64.439 cv
267.055 64.715 267.272 64.939 267.539 64.939 cv
268.507 64.938 li
268.775 64.938 268.992 64.714 268.992 64.438 cv
268.992 64.162 268.775 63.938 268.507 63.938 cv
267.539 63.938 li
270.444 63.938 mo
270.176 63.938 269.959 64.162 269.959 64.438 cv
269.959 64.714 270.176 64.938 270.444 64.937 cv
271.412 64.937 li
271.679 64.937 271.896 64.713 271.896 64.437 cv
271.896 64.161 271.678 63.938 271.411 63.938 cv
270.444 63.938 li
274.316 63.936 mo
273.347 63.937 li
273.08 63.937 272.864 64.161 272.864 64.437 cv
272.864 64.713 273.08 64.936 273.348 64.936 cv
274.316 64.936 li
274.583 64.936 274.8 64.712 274.8 64.436 cv
274.799 64.16 274.583 63.936 274.316 63.936 cv
277.22 63.935 mo
276.252 63.936 li
275.984 63.936 275.768 64.159 275.768 64.436 cv
275.768 64.712 275.985 64.936 276.252 64.936 cv
277.22 64.936 li
277.487 64.936 277.704 64.712 277.704 64.435 cv
277.704 64.159 277.487 63.935 277.22 63.935 cv
279.156 63.934 mo
278.889 63.935 278.672 64.159 278.672 64.435 cv
278.672 64.712 278.889 64.935 279.156 64.935 cv
280.125 64.934 li
280.392 64.934 280.609 64.711 280.609 64.435 cv
280.609 64.158 280.391 63.934 280.124 63.934 cv
279.156 63.934 li
282.06 63.933 mo
281.793 63.933 281.577 64.158 281.577 64.434 cv
281.577 64.71 281.793 64.934 282.061 64.934 cv
283.029 64.933 li
283.296 64.933 283.513 64.709 283.513 64.433 cv
283.512 64.157 283.296 63.933 283.029 63.933 cv
282.06 63.933 li
285.933 63.932 mo
284.965 63.933 li
284.697 63.933 284.481 64.157 284.481 64.433 cv
284.481 64.709 284.698 64.933 284.965 64.932 cv
285.933 64.932 li
286.2 64.932 286.417 64.708 286.417 64.432 cv
286.417 64.156 286.2 63.932 285.933 63.932 cv
288.836 63.931 mo
287.869 63.932 li
287.602 63.932 287.384 64.156 287.384 64.432 cv
287.384 64.708 287.602 64.932 287.869 64.932 cv
288.837 64.932 li
289.105 64.932 289.321 64.707 289.321 64.431 cv
289.321 64.155 289.104 63.931 288.836 63.931 cv
290.773 63.93 mo
290.505 63.931 290.29 64.154 290.29 64.43 cv
290.29 64.707 290.505 64.931 290.774 64.931 cv
291.742 64.93 li
292.009 64.93 292.226 64.706 292.226 64.43 cv
292.225 64.154 292.009 63.93 291.742 63.93 cv
290.773 63.93 li
293.678 63.929 mo
293.41 63.929 293.194 64.154 293.194 64.43 cv
293.194 64.706 293.411 64.93 293.678 64.93 cv
294.646 64.929 li
294.913 64.929 295.13 64.706 295.13 64.429 cv
295.13 64.153 294.913 63.929 294.646 63.929 cv
293.678 63.929 li
296.582 63.928 mo
296.315 63.928 296.097 64.153 296.097 64.429 cv
296.097 64.705 296.315 64.929 296.582 64.928 cv
297.55 64.928 li
297.817 64.928 298.033 64.704 298.033 64.428 cv
298.033 64.152 297.816 63.928 297.549 63.928 cv
296.582 63.928 li
300.455 63.927 mo
299.486 63.928 li
299.218 63.928 299.002 64.152 299.002 64.428 cv
299.002 64.704 299.218 64.927 299.486 64.927 cv
300.455 64.927 li
300.722 64.927 300.939 64.703 300.939 64.427 cv
300.938 64.151 300.722 63.927 300.455 63.927 cv
303.359 63.926 mo
302.39 63.927 li
302.123 63.927 301.907 64.151 301.907 64.427 cv
301.907 64.703 302.124 64.926 302.391 64.926 cv
303.359 64.926 li
303.626 64.926 303.843 64.702 303.843 64.426 cv
303.843 64.15 303.626 63.926 303.359 63.926 cv
305.295 63.925 mo
305.028 63.925 304.81 64.149 304.81 64.425 cv
304.81 64.701 305.028 64.926 305.295 64.926 cv
306.263 64.925 li
306.53 64.925 306.746 64.701 306.746 64.424 cv
306.746 64.148 306.529 63.925 306.262 63.925 cv
305.295 63.925 li
308.198 63.924 mo
307.931 63.924 307.715 64.148 307.715 64.424 cv
307.715 64.701 307.931 64.925 308.199 64.925 cv
309.167 64.924 li
309.435 64.924 309.651 64.7 309.651 64.424 cv
309.65 64.148 309.435 63.924 309.167 63.924 cv
308.198 63.924 li
311.103 63.923 mo
310.835 63.923 310.62 64.148 310.62 64.424 cv
310.62 64.7 310.836 64.923 311.104 64.923 cv
312.072 64.923 li
312.339 64.923 312.556 64.699 312.556 64.423 cv
312.556 64.147 312.339 63.923 312.072 63.923 cv
311.103 63.923 li
314.975 63.922 mo
314.008 63.923 li
313.741 63.923 313.523 64.147 313.523 64.423 cv
313.523 64.699 313.741 64.922 314.008 64.922 cv
314.976 64.922 li
315.243 64.922 315.459 64.698 315.459 64.422 cv
315.459 64.146 315.242 63.922 314.975 63.922 cv
316.911 63.921 mo
316.644 63.922 316.427 64.145 316.428 64.422 cv
316.428 64.698 316.644 64.921 316.912 64.921 cv
317.88 64.921 li
318.147 64.921 318.364 64.697 318.364 64.421 cv
318.363 64.145 318.147 63.921 317.88 63.921 cv
316.911 63.921 li
319.815 63.92 mo
319.548 63.92 319.332 64.144 319.332 64.42 cv
319.332 64.696 319.549 64.921 319.816 64.921 cv
320.785 64.92 li
321.052 64.92 321.269 64.696 321.269 64.42 cv
321.269 64.144 321.052 63.92 320.785 63.92 cv
319.815 63.92 li
322.721 63.919 mo
322.454 63.919 322.236 64.144 322.236 64.42 cv
322.236 64.696 322.454 64.92 322.721 64.919 cv
323.689 64.919 li
323.956 64.919 324.172 64.695 324.172 64.419 cv
324.172 64.143 323.955 63.919 323.688 63.919 cv
322.721 63.919 li
326.593 63.918 mo
325.624 63.918 li
325.357 63.918 325.14 64.143 325.141 64.419 cv
325.141 64.695 325.357 64.918 325.625 64.918 cv
326.593 64.918 li
326.86 64.918 327.077 64.694 327.076 64.418 cv
327.076 64.142 326.86 63.918 326.593 63.918 cv
clp
224.341 86.642 mo
328.57 86.642 li
328.57 45.698 li
224.341 45.698 li
cp
/26 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 35 
/Lookup <~
z"98E%$3^D0"TSZ*%hB'K&.J[@&e=sB((UBF&deU='+FpA*"WJX*YAAP+qt"W+qt"W$j6k:)%?QG,8C@
^.Mi'b0,FTg0,FTg/encp'+G6J*tSSU.2Dm`1`$>r2])Pq3#;_u/JSEh3#M\r4;e>'4<";$'FtBJ+;4n
Y/f"Nh4;e8%4W4>$~>
>>
/CSD add_res
/26 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[104.229 0 0 40.944 224.341 63.468 ]ct
snap_to_device
<<
/T 1
/W 143 
/H 54 
/M[143 0 0 -54 0 54 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
JcLB&JcLB&])Vj4!m1VU!s&H(p&G0t"U54d#c\.4#6k>7p](Hu"UPMD%."Fm%0[.J$4-k:q#CU%%M'*_
&ek3XN"cI0&ePZc%Kub2qu?m%'c%T&)3#R2)?guq(D[_eq#CR"#R_Rk*M"8:*X*Q()[coQq#CR"+!;^E
,-<*D,6]8/+Wqj.q#CR"+!;^H*k`f@,6],.+Wqj.q#CR"+!;^H*mGq@,6],.+Wqj.q#CR"+!;^H*o/'@
,6],.+Wqj.q#CR"+!;^H*pk2@,6],.+Wqj.q#CR"+!;^H*rR=@,6o80+Wqj.!!)lr"Tfbg+WMP`,P`Pf
*ZQ=G*s26<"Tfbg+WMPp,O$EV*ZQ=G*s26<"Tfbg+WMQ+,M=:F*ZQ=G*s26<"Tfbg+WMQ;,KV/6*ZQ=G
*s26<"Tfbg+WMQK,Io$&*ZQ=G*s26<"Tfbg+WMQ[,H2mk*ZQ=G*s26<"Tfbg+WMQk,FKb[*ZQ=G*s26<
"Tfbg+WMR&,DdWL*ZQ=G*s)H=!!NEG+<_^GO!FEE"WeX,+<L[\!!NEG+<_^GT-NPE"WeX,+<L[\!!NEG
+<_^GY9V[E"WeX,+<L[\!!NEG+<_^G^E^fE"WeX,+<L[`!;um$!ZrO.*$1%`q]c7c*$HFH!r2g"!ZrO.
*$1UplQZQS*$HFH!r2g"!ZrO.*$21+gEQkC*$HFH!r2g"!ZrO.*$2a;b9I03*$HFH!r2g"!ZrO.*$3<K
]-@J#*$HFH!r2g"!ZrO.*$3l[X!7ch*$HFH!r2g"!ZrO.*$4GkRj/(X*$HFH!r2g"!ZrO.*$5#&M^&BH
*$HFH!r`2t!!NEG+<_^GN?e9E"WeX,+<L[\!!NEG+<_^GSKmDE"WeX,+<L[\!!NEG+<_^GXWuOE"WeX,
+<L[\!!NEG+<_^G]d(ZE"WeX,+<L[\!!NEG+<_^Gbp0eE"WeX,+<L[\!!NEG+<_^Gh'8pE"WeX,+<L[\
!!NEG+<_^Gm3A&E"WeX,+<L[\!!NEG+<_^Gr?I1E#9Fj.+<LXb!;ca"!ZrO.*$1+bq'-%a*$HFH!r2g"
!ZrO.*$1[rkp$?Q*$HFH!r2g"!ZrO.*$27-fcpYA*$HFH!r2g"!ZrO.*$2g=aWgs1*$HFH!r2g"!ZrO.
*$3BM\K_8!*$HFH!r2g"!ZrO.*$3r]W?VQf*$HFH!r2g"!ZrO.*$4MmR3MkV*$HFH!r2g"!ZrO.*$5)(
M'E3G*$HFH!W`&s"Tfbg+WMPa,PWJe*ZQ=G*s26<"p,kh',_u7THi\G"s"m*'-J@ur;_?~>

%%EndBinary
grestore
np
grestore
gsave
223.55 64.953 mo
223.274 64.953 223.049 64.729 223.049 64.453 cv
223.049 64.177 223.274 63.953 223.55 63.953 cv
224.549 63.953 li
224.825 63.953 225.05 64.176 225.05 64.453 cv
225.05 64.729 224.826 64.952 224.55 64.952 cv
223.55 64.953 li
226.55 64.952 mo
226.274 64.952 226.05 64.728 226.05 64.452 cv
226.05 64.176 226.273 63.952 226.549 63.952 cv
227.55 63.952 li
227.826 63.952 228.049 64.175 228.05 64.451 cv
228.05 64.727 227.826 64.951 227.55 64.951 cv
226.55 64.952 li
230.55 64.951 mo
229.55 64.951 li
229.274 64.951 229.05 64.727 229.05 64.451 cv
229.05 64.175 229.273 63.951 229.55 63.951 cv
230.55 63.951 li
230.826 63.951 231.05 64.174 231.05 64.45 cv
231.05 64.727 230.826 64.951 230.55 64.951 cv
233.55 64.95 mo
232.55 64.95 li
232.274 64.95 232.05 64.727 232.049 64.45 cv
232.049 64.174 232.274 63.95 232.55 63.95 cv
233.549 63.949 li
233.825 63.949 234.05 64.174 234.05 64.45 cv
234.05 64.726 233.826 64.95 233.55 64.95 cv
235.55 64.949 mo
235.274 64.949 235.05 64.726 235.05 64.449 cv
235.05 64.173 235.273 63.949 235.549 63.949 cv
236.55 63.949 li
236.826 63.949 237.049 64.173 237.05 64.449 cv
237.05 64.725 236.826 64.948 236.55 64.948 cv
235.55 64.949 li
238.55 64.948 mo
238.274 64.948 238.05 64.724 238.05 64.448 cv
238.05 64.172 238.273 63.948 238.55 63.948 cv
239.55 63.948 li
239.826 63.948 240.05 64.171 240.05 64.447 cv
240.05 64.724 239.826 64.947 239.55 64.947 cv
238.55 64.948 li
242.55 64.947 mo
241.55 64.947 li
241.274 64.947 241.05 64.723 241.049 64.447 cv
241.049 64.171 241.274 63.947 241.55 63.947 cv
242.549 63.947 li
242.825 63.947 243.05 64.17 243.05 64.446 cv
243.05 64.722 242.826 64.947 242.55 64.947 cv
245.55 64.946 mo
244.55 64.946 li
244.274 64.946 244.05 64.722 244.05 64.446 cv
244.05 64.17 244.273 63.946 244.549 63.946 cv
245.55 63.945 li
245.826 63.945 246.049 64.169 246.05 64.446 cv
246.05 64.721 245.826 64.946 245.55 64.946 cv
248.55 64.945 mo
247.55 64.945 li
247.274 64.945 247.05 64.721 247.05 64.446 cv
247.05 64.169 247.273 63.945 247.55 63.945 cv
248.55 63.944 li
248.826 63.944 249.05 64.169 249.05 64.445 cv
249.05 64.721 248.826 64.945 248.55 64.945 cv
250.55 64.944 mo
250.274 64.944 250.05 64.72 250.049 64.444 cv
250.049 64.168 250.274 63.944 250.55 63.944 cv
251.549 63.944 li
251.825 63.944 252.05 64.167 252.05 64.443 cv
252.05 64.72 251.826 64.943 251.55 64.943 cv
250.55 64.944 li
253.55 64.943 mo
253.274 64.943 253.05 64.719 253.05 64.443 cv
253.05 64.167 253.273 63.943 253.549 63.943 cv
254.55 63.943 li
254.826 63.943 255.049 64.166 255.05 64.442 cv
255.05 64.718 254.826 64.942 254.55 64.942 cv
253.55 64.943 li
257.55 64.941 mo
256.55 64.941 li
256.274 64.941 256.05 64.718 256.05 64.442 cv
256.05 64.166 256.273 63.942 256.55 63.942 cv
257.55 63.941 li
257.826 63.941 258.05 64.165 258.05 64.441 cv
258.05 64.717 257.826 64.941 257.55 64.941 cv
260.55 64.941 mo
259.55 64.941 li
259.274 64.941 259.049 64.717 259.049 64.441 cv
259.049 64.165 259.274 63.941 259.55 63.941 cv
260.549 63.94 li
260.825 63.94 261.05 64.164 261.05 64.44 cv
261.05 64.716 260.826 64.941 260.55 64.941 cv
263.55 64.94 mo
262.55 64.94 li
262.273 64.94 262.05 64.716 262.05 64.44 cv
262.05 64.164 262.273 63.94 262.549 63.94 cv
263.55 63.939 li
263.826 63.939 264.049 64.164 264.05 64.44 cv
264.05 64.716 263.826 64.94 263.55 64.94 cv
265.55 64.939 mo
265.274 64.939 265.05 64.715 265.05 64.439 cv
265.05 64.163 265.273 63.938 265.55 63.938 cv
266.55 63.938 li
266.826 63.938 267.05 64.162 267.05 64.438 cv
267.05 64.714 266.826 64.938 266.55 64.938 cv
265.55 64.939 li
269.55 64.937 mo
268.55 64.937 li
268.274 64.938 268.049 64.714 268.049 64.438 cv
268.049 64.162 268.274 63.938 268.55 63.938 cv
269.549 63.938 li
269.825 63.938 270.05 64.161 270.05 64.437 cv
270.05 64.713 269.826 64.937 269.55 64.937 cv
272.55 64.936 mo
271.55 64.936 li
271.273 64.936 271.05 64.713 271.05 64.437 cv
271.05 64.161 271.273 63.937 271.549 63.937 cv
272.55 63.936 li
272.826 63.936 273.049 64.16 273.05 64.436 cv
273.05 64.712 272.826 64.936 272.55 64.936 cv
275.55 64.936 mo
274.55 64.936 li
274.274 64.936 274.05 64.712 274.05 64.436 cv
274.05 64.159 274.273 63.936 274.55 63.936 cv
275.55 63.935 li
275.826 63.935 276.05 64.159 276.05 64.435 cv
276.05 64.712 275.826 64.936 275.55 64.936 cv
277.55 64.935 mo
277.274 64.935 277.049 64.712 277.049 64.435 cv
277.049 64.159 277.274 63.935 277.55 63.934 cv
278.549 63.934 li
278.825 63.934 279.05 64.158 279.05 64.435 cv
279.05 64.711 278.826 64.934 278.55 64.934 cv
277.55 64.935 li
280.55 64.934 mo
280.273 64.934 280.05 64.71 280.05 64.434 cv
280.05 64.158 280.273 63.933 280.549 63.933 cv
281.55 63.933 li
281.826 63.933 282.049 64.157 282.05 64.433 cv
282.05 64.709 281.826 64.933 281.55 64.933 cv
280.55 64.934 li
284.55 64.932 mo
283.55 64.932 li
283.274 64.933 283.05 64.709 283.05 64.433 cv
283.05 64.157 283.273 63.933 283.55 63.933 cv
284.55 63.932 li
284.826 63.932 285.05 64.156 285.05 64.432 cv
285.05 64.708 284.826 64.932 284.55 64.932 cv
287.55 64.932 mo
286.55 64.932 li
286.274 64.932 286.049 64.708 286.049 64.432 cv
286.049 64.156 286.274 63.932 286.55 63.932 cv
287.549 63.931 li
287.825 63.931 288.05 64.155 288.05 64.431 cv
288.05 64.707 287.826 64.932 287.55 64.932 cv
289.55 64.931 mo
289.273 64.931 289.05 64.707 289.05 64.43 cv
289.05 64.154 289.273 63.931 289.549 63.93 cv
290.55 63.93 li
290.826 63.93 291.049 64.154 291.05 64.43 cv
291.05 64.706 290.826 64.93 290.55 64.93 cv
289.55 64.931 li
292.55 64.93 mo
292.274 64.93 292.05 64.706 292.05 64.43 cv
292.05 64.154 292.273 63.929 292.55 63.929 cv
293.55 63.929 li
293.826 63.929 294.05 64.153 294.05 64.429 cv
294.05 64.706 293.826 64.929 293.55 64.929 cv
292.55 64.93 li
296.55 64.928 mo
295.55 64.928 li
295.274 64.929 295.049 64.705 295.049 64.429 cv
295.049 64.153 295.274 63.928 295.55 63.928 cv
296.549 63.928 li
296.825 63.928 297.049 64.152 297.049 64.428 cv
297.049 64.704 296.826 64.928 296.55 64.928 cv
299.55 64.927 mo
298.55 64.927 li
298.273 64.927 298.05 64.704 298.05 64.428 cv
298.05 64.152 298.273 63.928 298.549 63.928 cv
299.55 63.927 li
299.826 63.927 300.049 64.151 300.05 64.427 cv
300.05 64.703 299.826 64.927 299.55 64.927 cv
302.55 64.926 mo
301.55 64.926 li
301.274 64.926 301.05 64.703 301.05 64.427 cv
301.05 64.151 301.273 63.927 301.549 63.927 cv
302.55 63.926 li
302.826 63.926 303.05 64.15 303.05 64.426 cv
303.05 64.702 302.826 64.926 302.55 64.926 cv
304.55 64.926 mo
304.274 64.926 304.049 64.701 304.049 64.425 cv
304.049 64.149 304.274 63.925 304.55 63.925 cv
305.549 63.925 li
305.825 63.925 306.049 64.148 306.049 64.424 cv
306.049 64.701 305.826 64.925 305.55 64.925 cv
304.55 64.926 li
307.55 64.925 mo
307.273 64.925 307.05 64.701 307.05 64.424 cv
307.05 64.148 307.273 63.924 307.549 63.924 cv
308.55 63.924 li
308.826 63.924 309.049 64.148 309.05 64.424 cv
309.05 64.7 308.826 64.924 308.55 64.924 cv
307.55 64.925 li
311.55 64.923 mo
310.55 64.923 li
310.274 64.923 310.05 64.7 310.05 64.424 cv
310.05 64.148 310.273 63.923 310.549 63.923 cv
311.55 63.923 li
311.826 63.923 312.05 64.147 312.05 64.423 cv
312.05 64.699 311.826 64.923 311.55 64.923 cv
314.55 64.922 mo
313.55 64.922 li
313.274 64.922 313.049 64.699 313.049 64.423 cv
313.049 64.147 313.274 63.923 313.55 63.923 cv
314.549 63.922 li
314.825 63.922 315.049 64.146 315.049 64.422 cv
315.049 64.698 314.826 64.922 314.55 64.922 cv
317.55 64.921 mo
316.55 64.921 li
316.273 64.921 316.05 64.698 316.05 64.422 cv
316.049 64.145 316.273 63.922 316.549 63.921 cv
317.55 63.921 li
317.826 63.921 318.049 64.145 318.05 64.421 cv
318.05 64.697 317.826 64.921 317.55 64.921 cv
319.55 64.921 mo
319.274 64.921 319.05 64.696 319.05 64.42 cv
319.05 64.144 319.273 63.92 319.549 63.92 cv
320.55 63.92 li
320.826 63.92 321.05 64.144 321.05 64.42 cv
321.05 64.696 320.826 64.92 320.55 64.92 cv
319.55 64.921 li
323.55 64.919 mo
322.55 64.919 li
322.274 64.92 322.049 64.696 322.049 64.42 cv
322.049 64.144 322.274 63.919 322.55 63.919 cv
323.549 63.919 li
323.825 63.919 324.049 64.143 324.049 64.419 cv
324.049 64.695 323.826 64.919 323.55 64.919 cv
326.55 64.918 mo
325.55 64.918 li
325.273 64.918 325.05 64.695 325.05 64.419 cv
325.049 64.143 325.273 63.918 325.549 63.918 cv
326.55 63.918 li
326.826 63.918 327.049 64.142 327.049 64.418 cv
327.05 64.694 326.826 64.918 326.55 64.918 cv
221.9 64.811 mo
221.9 64.097 li
221.992 64.188 222.05 64.314 222.05 64.454 cv
222.05 64.594 221.993 64.72 221.9 64.811 cv
clp
220.928 65.642 mo
327.872 65.642 li
327.872 62.978 li
220.928 62.978 li
cp
/27 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 7 
/Lookup <~
ccX+mccO"gcc*JNahFc_`3>am_5ibJ^o<A<^o<A<~>
>>
/CSD add_res
/27 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[106.944 0 0 2.664 220.928 84.468 ]ct
snap_to_device
<<
/T 1
/W 142 
/H 3 
/M[142 0 0 -3 0 3 ]
/MD false
/BC 8 
/D[0 255 ]
/DS 
<~!!!!!!<N?+"U52:#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6k>7!s/K'!!!!!!!!$$!sAc3#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6tJ=#6tJ=#6tJ=#6tJ<"U"o/!<<*"!!!!!!<N?+"U52:#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=
#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6tJ=#6k>7!s/K'!!!~>
/O 2
>>
%%BeginBinary: 1
idximg
%%EndBinary
grestore
np
grestore
gsave
327.65 93.175 mo
323.215 93.175 li
323.215 88.183 li
225.564 88.183 li
225.564 93.175 li
221.9 93.175 li
221.9 85.675 li
327.65 85.675 li
327.65 93.175 li
clp
221.528 93.602 mo
328.352 93.602 li
328.352 85.298 li
221.528 85.298 li
cp
/28 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 145 
/Lookup <~
z$3^D0'Fk<I)A38T+VY%Z///6f1)Boj3>hes4<";$4W4>$/f"Nh3#;Sq4;e8%4;e>'&deU=)%crN+VP(
\.hr6g0GXim2AQMt3Z8&"3uS8&#mUV6$O6e7&IAF;(_HlN+;,"].2*!f/eeTl2&-As3#M\r3>_l!3#Do
$$k*XH%h]<O&.\dA(CgEF*tnhY-56Xa1Dg)l2AcJq2&?Jt1`-2m"TSZ*"p>#.$OI%<'+Y0F)\N2P,S^R
b.MrHl.i8Kk//JZo//JTm"98E%#R1J5&IJaC(_6oQ*"r_\+;P=b+rCdi,8gjh,Sppj,T$mh,8L^g"UY>
3#6G23$O@1A$kNsM'+toX(_dYa)&<nd)Aa"d)ANkb!!<3$!!WE'!!ic/!t#P="V)+E"qqaP%2K`[%Mp&
a&/ZDf%iH>e!!WE'!!ro2!t5_@!tZ+G!u)UQ$5OQ\$lC&d$lC,f!!!'#!!!-%!!ru4!!s)7!Y,qF!#-:
N!>lpZ!#m0`!$!Be!$*Wk!Zion!Zion"!9,q!"'5:!Y?+I!#HOR!#Zs\!$!<c!$*Qi!$3fo!$<lp!$<r
r!$X)s!!ir4!!a#7!"]nG!#-LT!$!9b!$3`m!$F&t!$aE&!$jK'!%'Z*!#-UW!$!Be!$jW+!%0l/!!!6
(!"KG<!"TS?!"p+K!#-XX!#mHh!$O6#!$sW*!$sf/!%'u3!#$4M!#Hm\!$*Wk!%'l0!%:)4!#-@P!#[$
^!%1,6~>
>>
/CSD add_res
/28 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[106.824 0 0 8.304 221.528 56.508 ]ct
snap_to_device
<<
/T 1
/W 222 
/H 17 
/M[222 0 0 -17 0 17 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
qu@!'!<N?+"U52;O9r,t#RCY>"U"o/!<Mop$3://!sAr8$OdIRnHjdRdKp6i%1EUK$3UG4!<Mop$3:/;
%hK<c',2,qd0tU8ndGj?'GM2n&J,H_!<Mop$5OEp)&aG6*?H:FYm6Ht$6UE3*?6":)&O/*qZ-Qp$6^T<
,UFcL&go(VOXd[e$7RAN&eQH:,U4KVpAbON/1iJ-&25go1GnSVJhke1$8aOo0ea.l/hJV)pAbOX2)[BQ
3BB5a4[.4WJj8ik$9gU84$#A]2`<NNpAbLb5X@_(6q'R88$>II8-qdV7R]^46:!k%q>^p(8P2WK9MJ8X
:f1+gO&<5\$W9l":esh\9M8#N8c&Jn8Q/Sf<E<1'=mK7C>0pFY=]ea+<E)pr8c&Jq>?kH??XR;O@q9._
c=_`Ao4JGCARo:[@:3GK?!LV2!"3"9?>+%fCM[j*DfDk!P]7(MDf0E.CMIQs?<g_3!")q8EcZ>FG'A1V
HB!9XHO>(EG^"=RFE;J->PeC,>?kHIFF8L]H%,(/Jq)3u$%@/EI=--M?!LV2!!uk[JV&N-KnbA=bDCh-
nqd[/LPCM9K7\Z)>PeC,>C_9VMMmFJIZ:CgPE#s/IYNf>MLpD0>PeC#>6ob1Jrc"PL44u;OgC/VM112<
OH5!EJ6W!QJ,~>

%%EndBinary
grestore
np
grestore
gsave
322.463 93.175 mo
226.315 93.175 li
226.315 88.934 li
322.463 88.933 li
322.463 93.175 li
clp
225.488 94.082 mo
323.312 94.082 li
323.312 87.698 li
225.488 87.698 li
cp
/29 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 14 
/Lookup <~
KEA%OL'XLRLC9XQLC9XQLCB[QJH2_NKEA+QK)h_JKE.kLKE@tMJH2bOK)i"RJH2_NJH2ePJH2bO~>
>>
/CSD add_res
/29 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[97.824 0 0 6.384 225.488 56.028 ]ct
snap_to_device
<<
/T 1
/W 130 
/H 8 
/M[130 0 0 -8 0 8 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
"98H(!sFD^!!EK.!W`H/#7-.mrWr]5#6kMCM@B:h!=K?q%eU<l%>#%@%>#&R%=e~>

%%EndBinary
grestore
np
grestore
gsave
323.215 93.175 mo
322.463 93.175 li
322.463 88.933 li
226.315 88.934 li
226.315 93.175 li
225.564 93.175 li
225.564 88.183 li
323.215 88.183 li
323.215 93.175 li
clp
224.768 94.082 mo
324.152 94.082 li
324.152 86.978 li
224.768 86.978 li
cp
/30 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 18 
/Lookup <~
K)hnOK`n4PLC9XQL_,gOM%>dMJH2_NKEA%OL'XLRLC9XQLCB[QJH2bOJH2_NKEA+QK)h_JKE.kLKE@tM
JH2bOK)i"RJH2eP~>
>>
/CSD add_res
/30 /CSD get_res idxcs
gsave
clp
[1 0 0 -1 0 150.11 ]ct
[99.384 0 0 7.104 224.768 56.028 ]ct
snap_to_device
<<
/T 1
/W 132 
/H 9 
/M[132 0 0 -9 0 9 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
!rr?'",6pc"9\f.!<iZ4#Qb<l!rN*+#m(A;"pt_H%1\L2p(%?;%1EUU$5&L+mf`e*$5*u=&Esap&qUaJ
&qUbG&qB~>

%%EndBinary
grestore
np
grestore
225.94 86.515 mo
322.839 86.515 li
322.839 48.878 li
225.94 48.878 li
cp
.678859 0 .732021 0 cmyk
f
0 0 0 0 cmyk
KJJRUZ+Calibri [14.25 0 0 -14.25 0 0 ]msf
241.1 72.075 mo
(\000Z\000K\000h\000E\000\030\003\361\003r\001\232)
[7.49551 9.19131 8.90625 9.74554 8.52161 6.98257 4.11829 0 ]xsh
KJJRUZ+Calibri [9.405 0 0 -9.405 0 0 ]msf
300.586 74.213 mo
(\003\361)sh
1 lw
1 lc
1 lj
[1 2 ] 0 dsh
47.21 94.225 mo
69.89 94.225 li
1 /0 /CSD get_res sepcs
1 sep
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 /14 /15 /16 /17 /18 /19 
/20 /21 /22 /23 /24 /25 /26 /27 /28 /29 
/30 ]]
] del_res
/KJJRUY+Calibri-Bold-Identity-H uf
/KJJRUY+Calibri-Bold /CIDFont ur
/KJJRUZ+Calibri-Identity-H uf
/KJJRUZ+Calibri /CIDFont ur
/KJJRUX+SimSun-GBK-EUC-H-Identity-H uf
/KJJRUX+SimSun-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
