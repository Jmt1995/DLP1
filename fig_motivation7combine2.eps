%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP1E5F.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/21, 23:49:34
%%BoundingBox: 0 0 424 322
%%HiResBoundingBox: 0 0 424 322
%%CropBox: 0 0 424 322
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 967 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-09-21T23:49:20+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-21T23:49:20+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:6deb7be4-4a81-42ef-9388-52365d401405"
   xmpMM:InstanceID="uuid:ad4992a0-0b42-4e16-9eaf-500be6095f45">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivation7combine2.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -322 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 322 li
424 322 li
424 0 li
cp
clp
.059998 321.51 mo
424.02 321.51 li
424.02 .48999 li
.059998 .48999 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
59.846 279.122 mo
416.966 279.122 li
416.966 13.01 li
59.846 13.01 li
cp
f
76.079 279.122 mo
76.079 282.622 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
76.079 279.122 mo
76.079 282.622 li
@
73.316 295.638 mo
75.57 295.638 li
75.57 287.854 li
73.12 288.344 li
73.12 287.084 li
75.556 286.594 li
76.942 286.594 li
76.942 295.638 li
79.196 295.638 li
79.196 296.8 li
73.316 296.8 li
73.316 295.638 li
ef
112.152 279.122 mo
112.152 282.622 li
f
112.152 279.122 mo
112.152 282.622 li
@
110.388 295.638 mo
115.204 295.638 li
115.204 296.8 li
108.722 296.8 li
108.722 295.638 li
109.24 295.106 109.954 294.378 110.864 293.454 cv
111.76 292.544 112.334 291.956 112.572 291.69 cv
113.02 291.2 113.328 290.78 113.496 290.43 cv
113.664 290.094 113.762 289.744 113.762 289.408 cv
113.762 288.876 113.566 288.428 113.188 288.092 cv
112.81 287.756 112.32 287.574 111.704 287.574 cv
111.27 287.574 110.808 287.658 110.332 287.798 cv
109.856 287.952 109.338 288.176 108.792 288.484 cv
108.792 287.084 li
109.352 286.86 109.87 286.692 110.346 286.58 cv
110.822 286.468 111.27 286.412 111.676 286.412 cv
112.726 286.412 113.566 286.678 114.196 287.21 cv
114.826 287.742 115.148 288.442 115.148 289.324 cv
115.148 289.744 115.064 290.15 114.91 290.514 cv
114.756 290.892 114.476 291.34 114.056 291.844 cv
113.944 291.984 113.58 292.362 112.964 292.992 cv
112.348 293.622 111.494 294.504 110.388 295.638 cv
ef
148.225 279.122 mo
148.225 282.622 li
f
148.225 279.122 mo
148.225 282.622 li
@
149.504 291.298 mo
150.162 291.438 150.68 291.732 151.044 292.18 cv
151.408 292.628 151.604 293.188 151.604 293.832 cv
151.604 294.84 151.254 295.624 150.568 296.17 cv
149.868 296.716 148.888 296.982 147.614 296.982 cv
147.18 296.982 146.732 296.94 146.284 296.856 cv
145.836 296.786 145.36 296.66 144.884 296.492 cv
144.884 295.162 li
145.262 295.386 145.682 295.554 146.144 295.666 cv
146.592 295.778 147.068 295.834 147.572 295.834 cv
148.44 295.834 149.098 295.666 149.546 295.33 cv
149.994 294.994 150.232 294.49 150.232 293.832 cv
150.232 293.244 150.022 292.768 149.602 292.432 cv
149.182 292.096 148.594 291.914 147.838 291.914 cv
146.648 291.914 li
146.648 290.78 li
147.894 290.78 li
148.566 290.78 149.084 290.654 149.448 290.374 cv
149.812 290.108 149.994 289.716 149.994 289.198 cv
149.994 288.68 149.798 288.274 149.434 287.994 cv
149.056 287.714 148.524 287.574 147.838 287.574 cv
147.46 287.574 147.054 287.616 146.62 287.7 cv
146.186 287.784 145.71 287.91 145.192 288.078 cv
145.192 286.846 li
145.71 286.706 146.2 286.594 146.662 286.524 cv
147.11 286.454 147.544 286.412 147.964 286.412 cv
149 286.412 149.826 286.65 150.442 287.126 cv
151.058 287.602 151.366 288.246 151.366 289.058 cv
151.366 289.618 151.198 290.094 150.876 290.486 cv
150.554 290.878 150.092 291.158 149.504 291.298 cv
ef
184.297 279.122 mo
184.297 282.622 li
f
184.297 279.122 mo
184.297 282.622 li
@
185.112 287.798 mo
181.626 293.244 li
185.112 293.244 li
185.112 287.798 li
184.748 286.594 mo
186.484 286.594 li
186.484 293.244 li
187.94 293.244 li
187.94 294.392 li
186.484 294.392 li
186.484 296.8 li
185.112 296.8 li
185.112 294.392 li
180.506 294.392 li
180.506 293.062 li
184.748 286.594 li
ef
220.37 279.122 mo
220.37 282.622 li
f
220.37 279.122 mo
220.37 282.622 li
@
217.452 286.594 mo
222.87 286.594 li
222.87 287.756 li
218.712 287.756 li
218.712 290.262 li
218.908 290.192 219.118 290.136 219.314 290.108 cv
219.51 290.08 219.72 290.052 219.916 290.052 cv
221.05 290.052 221.946 290.374 222.618 290.99 cv
223.29 291.62 223.626 292.46 223.626 293.524 cv
223.626 294.63 223.276 295.484 222.59 296.086 cv
221.904 296.688 220.938 296.982 219.706 296.982 cv
219.272 296.982 218.838 296.94 218.39 296.884 cv
217.942 296.814 217.494 296.716 217.018 296.562 cv
217.018 295.176 li
217.424 295.4 217.844 295.568 218.292 295.68 cv
218.726 295.792 219.188 295.834 219.678 295.834 cv
220.462 295.834 221.092 295.638 221.554 295.218 cv
222.002 294.798 222.24 294.238 222.24 293.524 cv
222.24 292.824 222.002 292.264 221.554 291.844 cv
221.092 291.424 220.462 291.214 219.678 291.214 cv
219.314 291.214 218.936 291.256 218.572 291.34 cv
218.208 291.424 217.83 291.55 217.452 291.718 cv
217.452 286.594 li
ef
256.443 279.122 mo
256.443 282.622 li
f
256.443 279.122 mo
256.443 282.622 li
@
256.56 291.144 mo
255.944 291.144 255.454 291.368 255.09 291.788 cv
254.726 292.208 254.544 292.796 254.544 293.524 cv
254.544 294.266 254.726 294.854 255.09 295.274 cv
255.454 295.694 255.944 295.904 256.56 295.904 cv
257.176 295.904 257.666 295.694 258.03 295.274 cv
258.394 294.854 258.576 294.266 258.576 293.524 cv
258.576 292.796 258.394 292.208 258.03 291.788 cv
257.666 291.368 257.176 291.144 256.56 291.144 cv
259.304 286.818 mo
259.304 288.078 li
258.954 287.91 258.604 287.784 258.254 287.7 cv
257.89 287.616 257.54 287.574 257.204 287.574 cv
256.28 287.574 255.58 287.882 255.104 288.498 cv
254.628 289.114 254.348 290.052 254.292 291.284 cv
254.558 290.892 254.894 290.584 255.3 290.374 cv
255.706 290.164 256.154 290.052 256.644 290.052 cv
257.666 290.052 258.478 290.374 259.066 290.99 cv
259.654 291.606 259.962 292.46 259.962 293.524 cv
259.962 294.574 259.64 295.414 259.024 296.044 cv
258.408 296.674 257.582 296.982 256.56 296.982 cv
255.384 296.982 254.474 296.534 253.858 295.638 cv
253.228 294.742 252.92 293.426 252.92 291.704 cv
252.92 290.094 253.298 288.806 254.068 287.854 cv
254.824 286.902 255.86 286.412 257.148 286.412 cv
257.484 286.412 257.834 286.454 258.198 286.51 cv
258.548 286.58 258.912 286.678 259.304 286.818 cv
ef
292.516 279.122 mo
292.516 282.622 li
f
292.516 279.122 mo
292.516 282.622 li
@
289.208 286.594 mo
295.774 286.594 li
295.774 287.182 li
292.064 296.8 li
290.622 296.8 li
294.108 287.756 li
289.208 287.756 li
289.208 286.594 li
ef
328.588 279.122 mo
328.588 282.622 li
f
328.588 279.122 mo
328.588 282.622 li
@
328.632 291.956 mo
327.974 291.956 327.456 292.138 327.078 292.488 cv
326.7 292.838 326.518 293.314 326.518 293.93 cv
326.518 294.546 326.7 295.036 327.078 295.386 cv
327.456 295.736 327.974 295.904 328.632 295.904 cv
329.276 295.904 329.794 295.736 330.172 295.372 cv
330.55 295.022 330.746 294.546 330.746 293.93 cv
330.746 293.314 330.55 292.838 330.186 292.488 cv
329.808 292.138 329.29 291.956 328.632 291.956 cv
327.246 291.368 mo
326.658 291.228 326.196 290.948 325.86 290.542 cv
325.524 290.136 325.37 289.646 325.37 289.058 cv
325.37 288.246 325.65 287.602 326.238 287.126 cv
326.812 286.65 327.61 286.412 328.632 286.412 cv
329.64 286.412 330.438 286.65 331.026 287.126 cv
331.6 287.602 331.894 288.246 331.894 289.058 cv
331.894 289.646 331.726 290.136 331.39 290.542 cv
331.054 290.948 330.606 291.228 330.018 291.368 cv
330.676 291.522 331.194 291.83 331.572 292.278 cv
331.936 292.726 332.132 293.286 332.132 293.93 cv
332.132 294.924 331.824 295.68 331.222 296.198 cv
330.606 296.73 329.752 296.982 328.632 296.982 cv
327.498 296.982 326.63 296.73 326.028 296.198 cv
325.426 295.68 325.132 294.924 325.132 293.93 cv
325.132 293.286 325.314 292.726 325.692 292.278 cv
326.056 291.83 326.574 291.522 327.246 291.368 cv
326.742 289.184 mo
326.742 289.716 326.896 290.136 327.232 290.43 cv
327.568 290.724 328.03 290.864 328.632 290.864 cv
329.22 290.864 329.682 290.724 330.018 290.43 cv
330.354 290.136 330.522 289.716 330.522 289.184 cv
330.522 288.652 330.354 288.246 330.018 287.952 cv
329.682 287.658 329.22 287.504 328.632 287.504 cv
328.03 287.504 327.568 287.658 327.232 287.952 cv
326.896 288.246 326.742 288.652 326.742 289.184 cv
ef
364.661 279.122 mo
364.661 282.622 li
f
364.661 279.122 mo
364.661 282.622 li
@
361.72 296.59 mo
361.72 295.33 li
362.056 295.498 362.406 295.624 362.77 295.708 cv
363.12 295.792 363.47 295.834 363.82 295.834 cv
364.716 295.834 365.416 295.54 365.892 294.924 cv
366.368 294.308 366.648 293.384 366.732 292.124 cv
366.452 292.516 366.116 292.824 365.724 293.034 cv
365.318 293.244 364.87 293.342 364.38 293.342 cv
363.344 293.342 362.532 293.034 361.944 292.418 cv
361.356 291.802 361.062 290.962 361.062 289.884 cv
361.062 288.848 361.37 288.008 361.986 287.364 cv
362.602 286.734 363.428 286.412 364.464 286.412 cv
365.64 286.412 366.55 286.874 367.166 287.77 cv
367.782 288.68 368.104 289.996 368.104 291.704 cv
368.104 293.328 367.712 294.602 366.956 295.554 cv
366.186 296.506 365.164 296.982 363.876 296.982 cv
363.526 296.982 363.176 296.94 362.826 296.884 cv
362.462 296.828 362.098 296.73 361.72 296.59 cv
364.464 292.264 mo
365.08 292.264 365.57 292.054 365.934 291.634 cv
366.298 291.214 366.48 290.626 366.48 289.884 cv
366.48 289.156 366.298 288.568 365.934 288.148 cv
365.57 287.728 365.08 287.504 364.464 287.504 cv
363.848 287.504 363.358 287.728 362.994 288.148 cv
362.63 288.568 362.448 289.156 362.448 289.884 cv
362.448 290.626 362.63 291.214 362.994 291.634 cv
363.358 292.054 363.848 292.264 364.464 292.264 cv
ef
400.734 279.122 mo
400.734 282.622 li
f
400.734 279.122 mo
400.734 282.622 li
@
393.596 295.638 mo
395.85 295.638 li
395.85 287.854 li
393.4 288.344 li
393.4 287.084 li
395.836 286.594 li
397.222 286.594 li
397.222 295.638 li
399.476 295.638 li
399.476 296.8 li
393.596 296.8 li
393.596 295.638 li
ef
405.192 287.504 mo
404.478 287.504 403.946 287.854 403.582 288.554 cv
403.218 289.254 403.05 290.304 403.05 291.704 cv
403.05 293.104 403.218 294.154 403.582 294.854 cv
403.946 295.554 404.478 295.904 405.192 295.904 cv
405.906 295.904 406.438 295.554 406.802 294.854 cv
407.152 294.154 407.334 293.104 407.334 291.704 cv
407.334 290.304 407.152 289.254 406.802 288.554 cv
406.438 287.854 405.906 287.504 405.192 287.504 cv
405.192 286.412 mo
406.326 286.412 407.194 286.874 407.81 287.77 cv
408.412 288.68 408.72 289.996 408.72 291.704 cv
408.72 293.426 408.412 294.742 407.81 295.638 cv
407.194 296.534 406.326 296.982 405.192 296.982 cv
404.044 296.982 403.162 296.534 402.56 295.638 cv
401.958 294.742 401.664 293.426 401.664 291.704 cv
401.664 289.996 401.958 288.68 402.56 287.77 cv
403.162 286.874 404.044 286.412 405.192 286.412 cv
ef
223.478 304.021 mo
230.254 304.021 li
230.254 304.934 li
227.405 304.934 li
227.405 312.04 li
226.316 312.04 li
226.316 304.934 li
223.478 304.934 li
223.478 304.021 li
ef
234.741 306.947 mo
234.631 306.881 234.51 306.837 234.378 306.804 cv
234.246 306.782 234.103 306.76 233.949 306.76 cv
233.388 306.76 232.959 306.947 232.662 307.31 cv
232.354 307.673 232.211 308.19 232.211 308.872 cv
232.211 312.04 li
231.221 312.04 li
231.221 306.023 li
232.211 306.023 li
232.211 306.958 li
232.409 306.595 232.684 306.32 233.014 306.144 cv
233.344 305.968 233.751 305.88 234.235 305.88 cv
234.301 305.88 234.378 305.891 234.466 305.891 cv
234.543 305.902 234.631 305.913 234.741 305.935 cv
234.741 306.947 li
ef
235.694 306.023 mo
236.684 306.023 li
236.684 312.04 li
235.694 312.04 li
235.694 306.023 li
235.694 303.68 mo
235.694 303.68 mo
236.684 303.68 li
236.684 304.934 li
235.694 304.934 li
cp
ef
241.553 309.015 mo
240.75 309.015 240.2 309.114 239.892 309.29 cv
239.584 309.477 239.43 309.785 239.43 310.225 cv
239.43 310.577 239.54 310.863 239.771 311.061 cv
240.002 311.27 240.321 311.369 240.717 311.369 cv
241.267 311.369 241.707 311.182 242.037 310.786 cv
242.367 310.401 242.532 309.884 242.532 309.235 cv
242.532 309.015 li
241.553 309.015 li
243.522 308.608 mo
243.522 312.04 li
242.532 312.04 li
242.532 311.127 li
242.301 311.501 242.015 311.765 241.685 311.93 cv
241.355 312.095 240.937 312.183 240.453 312.183 cv
239.837 312.183 239.342 312.018 238.979 311.677 cv
238.616 311.336 238.44 310.874 238.44 310.291 cv
238.44 309.62 238.66 309.114 239.122 308.762 cv
239.573 308.421 240.244 308.245 241.146 308.245 cv
242.532 308.245 li
242.532 308.146 li
242.532 307.695 242.378 307.343 242.081 307.09 cv
241.784 306.848 241.366 306.716 240.827 306.716 cv
240.475 306.716 240.145 306.76 239.815 306.848 cv
239.485 306.936 239.177 307.057 238.88 307.211 cv
238.88 306.298 li
239.232 306.166 239.584 306.056 239.925 305.99 cv
240.266 305.924 240.596 305.88 240.926 305.88 cv
241.795 305.88 242.444 306.111 242.873 306.562 cv
243.302 307.013 243.522 307.695 243.522 308.608 cv
ef
245.534 312.04 mo
246.524 312.04 li
246.524 303.68 li
245.534 303.68 li
cp
f
252.493 306.199 mo
252.493 307.134 li
252.207 307.002 251.921 306.892 251.624 306.815 cv
251.316 306.749 251.008 306.705 250.689 306.705 cv
250.194 306.705 249.82 306.782 249.578 306.936 cv
249.336 307.09 249.215 307.31 249.215 307.607 cv
249.215 307.838 249.303 308.014 249.479 308.146 cv
249.655 308.278 250.007 308.41 250.535 308.52 cv
250.876 308.597 li
251.58 308.751 252.075 308.971 252.372 309.235 cv
252.658 309.51 252.812 309.895 252.812 310.379 cv
252.812 310.94 252.592 311.38 252.152 311.699 cv
251.712 312.029 251.096 312.183 250.326 312.183 cv
249.996 312.183 249.666 312.15 249.314 312.095 cv
248.962 312.04 248.599 311.952 248.214 311.82 cv
248.214 310.797 li
248.577 310.995 248.94 311.138 249.292 311.226 cv
249.644 311.325 249.996 311.369 250.348 311.369 cv
250.81 311.369 251.173 311.292 251.426 311.138 cv
251.668 310.984 251.8 310.753 251.8 310.456 cv
251.8 310.192 251.701 309.983 251.525 309.84 cv
251.349 309.697 250.953 309.554 250.337 309.422 cv
249.996 309.345 li
249.38 309.213 248.929 309.015 248.665 308.751 cv
248.39 308.487 248.258 308.124 248.258 307.651 cv
248.258 307.09 248.456 306.65 248.852 306.342 cv
249.248 306.034 249.82 305.88 250.568 305.88 cv
250.931 305.88 251.272 305.913 251.602 305.968 cv
251.921 306.023 252.218 306.1 252.493 306.199 cv
ef
59.846 279.122 mo
56.346 279.122 li
f
59.846 279.122 mo
56.346 279.122 li
@
26.112 275.144 mo
25.398 275.144 24.866 275.494 24.502 276.194 cv
24.138 276.894 23.97 277.944 23.97 279.344 cv
23.97 280.744 24.138 281.794 24.502 282.494 cv
24.866 283.194 25.398 283.544 26.112 283.544 cv
26.826 283.544 27.358 283.194 27.722 282.494 cv
28.072 281.794 28.254 280.744 28.254 279.344 cv
28.254 277.944 28.072 276.894 27.722 276.194 cv
27.358 275.494 26.826 275.144 26.112 275.144 cv
26.112 274.052 mo
27.246 274.052 28.114 274.514 28.73 275.41 cv
29.332 276.32 29.64 277.636 29.64 279.344 cv
29.64 281.066 29.332 282.382 28.73 283.278 cv
28.114 284.174 27.246 284.622 26.112 284.622 cv
24.964 284.622 24.082 284.174 23.48 283.278 cv
22.878 282.382 22.584 281.066 22.584 279.344 cv
22.584 277.636 22.878 276.32 23.48 275.41 cv
24.082 274.514 24.964 274.052 26.112 274.052 cv
ef
32.038 284.44 mo
33.48 284.44 li
33.48 282.704 li
32.038 282.704 li
cp
f
39.432 275.144 mo
38.718 275.144 38.186 275.494 37.822 276.194 cv
37.458 276.894 37.29 277.944 37.29 279.344 cv
37.29 280.744 37.458 281.794 37.822 282.494 cv
38.186 283.194 38.718 283.544 39.432 283.544 cv
40.146 283.544 40.678 283.194 41.042 282.494 cv
41.392 281.794 41.574 280.744 41.574 279.344 cv
41.574 277.944 41.392 276.894 41.042 276.194 cv
40.678 275.494 40.146 275.144 39.432 275.144 cv
39.432 274.052 mo
40.566 274.052 41.434 274.514 42.05 275.41 cv
42.652 276.32 42.96 277.636 42.96 279.344 cv
42.96 281.066 42.652 282.382 42.05 283.278 cv
41.434 284.174 40.566 284.622 39.432 284.622 cv
38.284 284.622 37.402 284.174 36.8 283.278 cv
36.198 282.382 35.904 281.066 35.904 279.344 cv
35.904 277.636 36.198 276.32 36.8 275.41 cv
37.402 274.514 38.284 274.052 39.432 274.052 cv
ef
48.432 275.144 mo
47.718 275.144 47.186 275.494 46.822 276.194 cv
46.458 276.894 46.29 277.944 46.29 279.344 cv
46.29 280.744 46.458 281.794 46.822 282.494 cv
47.186 283.194 47.718 283.544 48.432 283.544 cv
49.146 283.544 49.678 283.194 50.042 282.494 cv
50.392 281.794 50.574 280.744 50.574 279.344 cv
50.574 277.944 50.392 276.894 50.042 276.194 cv
49.678 275.494 49.146 275.144 48.432 275.144 cv
48.432 274.052 mo
49.566 274.052 50.434 274.514 51.05 275.41 cv
51.652 276.32 51.96 277.636 51.96 279.344 cv
51.96 281.066 51.652 282.382 51.05 283.278 cv
50.434 284.174 49.566 284.622 48.432 284.622 cv
47.284 284.622 46.402 284.174 45.8 283.278 cv
45.198 282.382 44.904 281.066 44.904 279.344 cv
44.904 277.636 45.198 276.32 45.8 275.41 cv
46.402 274.514 47.284 274.052 48.432 274.052 cv
ef
59.846 245.858 mo
56.346 245.858 li
f
59.846 245.858 mo
56.346 245.858 li
@
26.112 241.904 mo
25.398 241.904 24.866 242.254 24.502 242.954 cv
24.138 243.654 23.97 244.704 23.97 246.104 cv
23.97 247.504 24.138 248.554 24.502 249.254 cv
24.866 249.954 25.398 250.304 26.112 250.304 cv
26.826 250.304 27.358 249.954 27.722 249.254 cv
28.072 248.554 28.254 247.504 28.254 246.104 cv
28.254 244.704 28.072 243.654 27.722 242.954 cv
27.358 242.254 26.826 241.904 26.112 241.904 cv
26.112 240.812 mo
27.246 240.812 28.114 241.274 28.73 242.17 cv
29.332 243.08 29.64 244.396 29.64 246.104 cv
29.64 247.826 29.332 249.142 28.73 250.038 cv
28.114 250.934 27.246 251.382 26.112 251.382 cv
24.964 251.382 24.082 250.934 23.48 250.038 cv
22.878 249.142 22.584 247.826 22.584 246.104 cv
22.584 244.396 22.878 243.08 23.48 242.17 cv
24.082 241.274 24.964 240.812 26.112 240.812 cv
ef
32.038 251.2 mo
33.48 251.2 li
33.48 249.464 li
32.038 249.464 li
cp
f
37.668 250.038 mo
42.484 250.038 li
42.484 251.2 li
36.002 251.2 li
36.002 250.038 li
36.52 249.506 37.234 248.778 38.144 247.854 cv
39.04 246.944 39.614 246.356 39.852 246.09 cv
40.3 245.6 40.608 245.18 40.776 244.83 cv
40.944 244.494 41.042 244.144 41.042 243.808 cv
41.042 243.276 40.846 242.828 40.468 242.492 cv
40.09 242.156 39.6 241.974 38.984 241.974 cv
38.55 241.974 38.088 242.058 37.612 242.198 cv
37.136 242.352 36.618 242.576 36.072 242.884 cv
36.072 241.484 li
36.632 241.26 37.15 241.092 37.626 240.98 cv
38.102 240.868 38.55 240.812 38.956 240.812 cv
40.006 240.812 40.846 241.078 41.476 241.61 cv
42.106 242.142 42.428 242.842 42.428 243.724 cv
42.428 244.144 42.344 244.55 42.19 244.914 cv
42.036 245.292 41.756 245.74 41.336 246.244 cv
41.224 246.384 40.86 246.762 40.244 247.392 cv
39.628 248.022 38.774 248.904 37.668 250.038 cv
ef
45.492 240.994 mo
50.91 240.994 li
50.91 242.156 li
46.752 242.156 li
46.752 244.662 li
46.948 244.592 47.158 244.536 47.354 244.508 cv
47.55 244.48 47.76 244.452 47.956 244.452 cv
49.09 244.452 49.986 244.774 50.658 245.39 cv
51.33 246.02 51.666 246.86 51.666 247.924 cv
51.666 249.03 51.316 249.884 50.63 250.486 cv
49.944 251.088 48.978 251.382 47.746 251.382 cv
47.312 251.382 46.878 251.34 46.43 251.284 cv
45.982 251.214 45.534 251.116 45.058 250.962 cv
45.058 249.576 li
45.464 249.8 45.884 249.968 46.332 250.08 cv
46.766 250.192 47.228 250.234 47.718 250.234 cv
48.502 250.234 49.132 250.038 49.594 249.618 cv
50.042 249.198 50.28 248.638 50.28 247.924 cv
50.28 247.224 50.042 246.664 49.594 246.244 cv
49.132 245.824 48.502 245.614 47.718 245.614 cv
47.354 245.614 46.976 245.656 46.612 245.74 cv
46.248 245.824 45.87 245.95 45.492 246.118 cv
45.492 240.994 li
ef
59.846 212.594 mo
56.346 212.594 li
f
59.846 212.594 mo
56.346 212.594 li
@
26.112 208.664 mo
25.398 208.664 24.866 209.014 24.502 209.714 cv
24.138 210.414 23.97 211.464 23.97 212.864 cv
23.97 214.264 24.138 215.314 24.502 216.014 cv
24.866 216.714 25.398 217.064 26.112 217.064 cv
26.826 217.064 27.358 216.714 27.722 216.014 cv
28.072 215.314 28.254 214.264 28.254 212.864 cv
28.254 211.464 28.072 210.414 27.722 209.714 cv
27.358 209.014 26.826 208.664 26.112 208.664 cv
26.112 207.572 mo
27.246 207.572 28.114 208.034 28.73 208.93 cv
29.332 209.84 29.64 211.156 29.64 212.864 cv
29.64 214.586 29.332 215.902 28.73 216.798 cv
28.114 217.694 27.246 218.142 26.112 218.142 cv
24.964 218.142 24.082 217.694 23.48 216.798 cv
22.878 215.902 22.584 214.586 22.584 212.864 cv
22.584 211.156 22.878 209.84 23.48 208.93 cv
24.082 208.034 24.964 207.572 26.112 207.572 cv
ef
32.038 217.96 mo
33.48 217.96 li
33.48 216.224 li
32.038 216.224 li
cp
f
36.492 207.754 mo
41.91 207.754 li
41.91 208.916 li
37.752 208.916 li
37.752 211.422 li
37.948 211.352 38.158 211.296 38.354 211.268 cv
38.55 211.24 38.76 211.212 38.956 211.212 cv
40.09 211.212 40.986 211.534 41.658 212.15 cv
42.33 212.78 42.666 213.62 42.666 214.684 cv
42.666 215.79 42.316 216.644 41.63 217.246 cv
40.944 217.848 39.978 218.142 38.746 218.142 cv
38.312 218.142 37.878 218.1 37.43 218.044 cv
36.982 217.974 36.534 217.876 36.058 217.722 cv
36.058 216.336 li
36.464 216.56 36.884 216.728 37.332 216.84 cv
37.766 216.952 38.228 216.994 38.718 216.994 cv
39.502 216.994 40.132 216.798 40.594 216.378 cv
41.042 215.958 41.28 215.398 41.28 214.684 cv
41.28 213.984 41.042 213.424 40.594 213.004 cv
40.132 212.584 39.502 212.374 38.718 212.374 cv
38.354 212.374 37.976 212.416 37.612 212.5 cv
37.248 212.584 36.87 212.71 36.492 212.878 cv
36.492 207.754 li
ef
48.432 208.664 mo
47.718 208.664 47.186 209.014 46.822 209.714 cv
46.458 210.414 46.29 211.464 46.29 212.864 cv
46.29 214.264 46.458 215.314 46.822 216.014 cv
47.186 216.714 47.718 217.064 48.432 217.064 cv
49.146 217.064 49.678 216.714 50.042 216.014 cv
50.392 215.314 50.574 214.264 50.574 212.864 cv
50.574 211.464 50.392 210.414 50.042 209.714 cv
49.678 209.014 49.146 208.664 48.432 208.664 cv
48.432 207.572 mo
49.566 207.572 50.434 208.034 51.05 208.93 cv
51.652 209.84 51.96 211.156 51.96 212.864 cv
51.96 214.586 51.652 215.902 51.05 216.798 cv
50.434 217.694 49.566 218.142 48.432 218.142 cv
47.284 218.142 46.402 217.694 45.8 216.798 cv
45.198 215.902 44.904 214.586 44.904 212.864 cv
44.904 211.156 45.198 209.84 45.8 208.93 cv
46.402 208.034 47.284 207.572 48.432 207.572 cv
ef
59.846 179.33 mo
56.346 179.33 li
f
59.846 179.33 mo
56.346 179.33 li
@
26.112 175.304 mo
25.398 175.304 24.866 175.654 24.502 176.354 cv
24.138 177.054 23.97 178.104 23.97 179.504 cv
23.97 180.904 24.138 181.954 24.502 182.654 cv
24.866 183.354 25.398 183.704 26.112 183.704 cv
26.826 183.704 27.358 183.354 27.722 182.654 cv
28.072 181.954 28.254 180.904 28.254 179.504 cv
28.254 178.104 28.072 177.054 27.722 176.354 cv
27.358 175.654 26.826 175.304 26.112 175.304 cv
26.112 174.212 mo
27.246 174.212 28.114 174.674 28.73 175.57 cv
29.332 176.48 29.64 177.796 29.64 179.504 cv
29.64 181.226 29.332 182.542 28.73 183.438 cv
28.114 184.334 27.246 184.782 26.112 184.782 cv
24.964 184.782 24.082 184.334 23.48 183.438 cv
22.878 182.542 22.584 181.226 22.584 179.504 cv
22.584 177.796 22.878 176.48 23.48 175.57 cv
24.082 174.674 24.964 174.212 26.112 174.212 cv
ef
32.038 184.6 mo
33.48 184.6 li
33.48 182.864 li
32.038 182.864 li
cp
f
36.128 174.394 mo
42.694 174.394 li
42.694 174.982 li
38.984 184.6 li
37.542 184.6 li
41.028 175.556 li
36.128 175.556 li
36.128 174.394 li
ef
45.492 174.394 mo
50.91 174.394 li
50.91 175.556 li
46.752 175.556 li
46.752 178.062 li
46.948 177.992 47.158 177.936 47.354 177.908 cv
47.55 177.88 47.76 177.852 47.956 177.852 cv
49.09 177.852 49.986 178.174 50.658 178.79 cv
51.33 179.42 51.666 180.26 51.666 181.324 cv
51.666 182.43 51.316 183.284 50.63 183.886 cv
49.944 184.488 48.978 184.782 47.746 184.782 cv
47.312 184.782 46.878 184.74 46.43 184.684 cv
45.982 184.614 45.534 184.516 45.058 184.362 cv
45.058 182.976 li
45.464 183.2 45.884 183.368 46.332 183.48 cv
46.766 183.592 47.228 183.634 47.718 183.634 cv
48.502 183.634 49.132 183.438 49.594 183.018 cv
50.042 182.598 50.28 182.038 50.28 181.324 cv
50.28 180.624 50.042 180.064 49.594 179.644 cv
49.132 179.224 48.502 179.014 47.718 179.014 cv
47.354 179.014 46.976 179.056 46.612 179.14 cv
46.248 179.224 45.87 179.35 45.492 179.518 cv
45.492 174.394 li
ef
59.846 146.066 mo
56.346 146.066 li
f
59.846 146.066 mo
56.346 146.066 li
@
23.396 150.198 mo
25.65 150.198 li
25.65 142.414 li
23.2 142.904 li
23.2 141.644 li
25.636 141.154 li
27.022 141.154 li
27.022 150.198 li
29.276 150.198 li
29.276 151.36 li
23.396 151.36 li
23.396 150.198 li
ef
32.038 151.36 mo
33.48 151.36 li
33.48 149.624 li
32.038 149.624 li
cp
f
39.432 142.064 mo
38.718 142.064 38.186 142.414 37.822 143.114 cv
37.458 143.814 37.29 144.864 37.29 146.264 cv
37.29 147.664 37.458 148.714 37.822 149.414 cv
38.186 150.114 38.718 150.464 39.432 150.464 cv
40.146 150.464 40.678 150.114 41.042 149.414 cv
41.392 148.714 41.574 147.664 41.574 146.264 cv
41.574 144.864 41.392 143.814 41.042 143.114 cv
40.678 142.414 40.146 142.064 39.432 142.064 cv
39.432 140.972 mo
40.566 140.972 41.434 141.434 42.05 142.33 cv
42.652 143.24 42.96 144.556 42.96 146.264 cv
42.96 147.986 42.652 149.302 42.05 150.198 cv
41.434 151.094 40.566 151.542 39.432 151.542 cv
38.284 151.542 37.402 151.094 36.8 150.198 cv
36.198 149.302 35.904 147.986 35.904 146.264 cv
35.904 144.556 36.198 143.24 36.8 142.33 cv
37.402 141.434 38.284 140.972 39.432 140.972 cv
ef
48.432 142.064 mo
47.718 142.064 47.186 142.414 46.822 143.114 cv
46.458 143.814 46.29 144.864 46.29 146.264 cv
46.29 147.664 46.458 148.714 46.822 149.414 cv
47.186 150.114 47.718 150.464 48.432 150.464 cv
49.146 150.464 49.678 150.114 50.042 149.414 cv
50.392 148.714 50.574 147.664 50.574 146.264 cv
50.574 144.864 50.392 143.814 50.042 143.114 cv
49.678 142.414 49.146 142.064 48.432 142.064 cv
48.432 140.972 mo
49.566 140.972 50.434 141.434 51.05 142.33 cv
51.652 143.24 51.96 144.556 51.96 146.264 cv
51.96 147.986 51.652 149.302 51.05 150.198 cv
50.434 151.094 49.566 151.542 48.432 151.542 cv
47.284 151.542 46.402 151.094 45.8 150.198 cv
45.198 149.302 44.904 147.986 44.904 146.264 cv
44.904 144.556 45.198 143.24 45.8 142.33 cv
46.402 141.434 47.284 140.972 48.432 140.972 cv
ef
59.846 112.802 mo
56.346 112.802 li
f
59.846 112.802 mo
56.346 112.802 li
@
23.396 116.958 mo
25.65 116.958 li
25.65 109.174 li
23.2 109.664 li
23.2 108.404 li
25.636 107.914 li
27.022 107.914 li
27.022 116.958 li
29.276 116.958 li
29.276 118.12 li
23.396 118.12 li
23.396 116.958 li
ef
32.038 118.12 mo
33.48 118.12 li
33.48 116.384 li
32.038 116.384 li
cp
f
37.668 116.958 mo
42.484 116.958 li
42.484 118.12 li
36.002 118.12 li
36.002 116.958 li
36.52 116.426 37.234 115.698 38.144 114.774 cv
39.04 113.864 39.614 113.276 39.852 113.01 cv
40.3 112.52 40.608 112.1 40.776 111.75 cv
40.944 111.414 41.042 111.064 41.042 110.728 cv
41.042 110.196 40.846 109.748 40.468 109.412 cv
40.09 109.076 39.6 108.894 38.984 108.894 cv
38.55 108.894 38.088 108.978 37.612 109.118 cv
37.136 109.272 36.618 109.496 36.072 109.804 cv
36.072 108.404 li
36.632 108.18 37.15 108.012 37.626 107.9 cv
38.102 107.788 38.55 107.732 38.956 107.732 cv
40.006 107.732 40.846 107.998 41.476 108.53 cv
42.106 109.062 42.428 109.762 42.428 110.644 cv
42.428 111.064 42.344 111.47 42.19 111.834 cv
42.036 112.212 41.756 112.66 41.336 113.164 cv
41.224 113.304 40.86 113.682 40.244 114.312 cv
39.628 114.942 38.774 115.824 37.668 116.958 cv
ef
45.492 107.914 mo
50.91 107.914 li
50.91 109.076 li
46.752 109.076 li
46.752 111.582 li
46.948 111.512 47.158 111.456 47.354 111.428 cv
47.55 111.4 47.76 111.372 47.956 111.372 cv
49.09 111.372 49.986 111.694 50.658 112.31 cv
51.33 112.94 51.666 113.78 51.666 114.844 cv
51.666 115.95 51.316 116.804 50.63 117.406 cv
49.944 118.008 48.978 118.302 47.746 118.302 cv
47.312 118.302 46.878 118.26 46.43 118.204 cv
45.982 118.134 45.534 118.036 45.058 117.882 cv
45.058 116.496 li
45.464 116.72 45.884 116.888 46.332 117 cv
46.766 117.112 47.228 117.154 47.718 117.154 cv
48.502 117.154 49.132 116.958 49.594 116.538 cv
50.042 116.118 50.28 115.558 50.28 114.844 cv
50.28 114.144 50.042 113.584 49.594 113.164 cv
49.132 112.744 48.502 112.534 47.718 112.534 cv
47.354 112.534 46.976 112.576 46.612 112.66 cv
46.248 112.744 45.87 112.87 45.492 113.038 cv
45.492 107.914 li
ef
59.846 79.539 mo
56.346 79.539 li
f
59.846 79.539 mo
56.346 79.539 li
@
23.396 83.718 mo
25.65 83.718 li
25.65 75.934 li
23.2 76.424 li
23.2 75.164 li
25.636 74.674 li
27.022 74.674 li
27.022 83.718 li
29.276 83.718 li
29.276 84.88 li
23.396 84.88 li
23.396 83.718 li
ef
32.038 84.88 mo
33.48 84.88 li
33.48 83.144 li
32.038 83.144 li
cp
f
36.492 74.674 mo
41.91 74.674 li
41.91 75.836 li
37.752 75.836 li
37.752 78.342 li
37.948 78.272 38.158 78.216 38.354 78.188 cv
38.55 78.16 38.76 78.132 38.956 78.132 cv
40.09 78.132 40.986 78.454 41.658 79.07 cv
42.33 79.7 42.666 80.54 42.666 81.604 cv
42.666 82.71 42.316 83.564 41.63 84.166 cv
40.944 84.768 39.978 85.062 38.746 85.062 cv
38.312 85.062 37.878 85.02 37.43 84.964 cv
36.982 84.894 36.534 84.796 36.058 84.642 cv
36.058 83.256 li
36.464 83.48 36.884 83.648 37.332 83.76 cv
37.766 83.872 38.228 83.914 38.718 83.914 cv
39.502 83.914 40.132 83.718 40.594 83.298 cv
41.042 82.878 41.28 82.318 41.28 81.604 cv
41.28 80.904 41.042 80.344 40.594 79.924 cv
40.132 79.504 39.502 79.294 38.718 79.294 cv
38.354 79.294 37.976 79.336 37.612 79.42 cv
37.248 79.504 36.87 79.63 36.492 79.798 cv
36.492 74.674 li
ef
48.432 75.584 mo
47.718 75.584 47.186 75.934 46.822 76.634 cv
46.458 77.334 46.29 78.384 46.29 79.784 cv
46.29 81.184 46.458 82.234 46.822 82.934 cv
47.186 83.634 47.718 83.984 48.432 83.984 cv
49.146 83.984 49.678 83.634 50.042 82.934 cv
50.392 82.234 50.574 81.184 50.574 79.784 cv
50.574 78.384 50.392 77.334 50.042 76.634 cv
49.678 75.934 49.146 75.584 48.432 75.584 cv
48.432 74.492 mo
49.566 74.492 50.434 74.954 51.05 75.85 cv
51.652 76.76 51.96 78.076 51.96 79.784 cv
51.96 81.506 51.652 82.822 51.05 83.718 cv
50.434 84.614 49.566 85.062 48.432 85.062 cv
47.284 85.062 46.402 84.614 45.8 83.718 cv
45.198 82.822 44.904 81.506 44.904 79.784 cv
44.904 78.076 45.198 76.76 45.8 75.85 cv
46.402 74.954 47.284 74.492 48.432 74.492 cv
ef
59.846 46.274 mo
56.346 46.274 li
f
59.846 46.274 mo
56.346 46.274 li
@
23.396 50.478 mo
25.65 50.478 li
25.65 42.694 li
23.2 43.184 li
23.2 41.924 li
25.636 41.434 li
27.022 41.434 li
27.022 50.478 li
29.276 50.478 li
29.276 51.64 li
23.396 51.64 li
23.396 50.478 li
ef
32.038 51.64 mo
33.48 51.64 li
33.48 49.904 li
32.038 49.904 li
cp
f
36.128 41.434 mo
42.694 41.434 li
42.694 42.022 li
38.984 51.64 li
37.542 51.64 li
41.028 42.596 li
36.128 42.596 li
36.128 41.434 li
ef
45.492 41.434 mo
50.91 41.434 li
50.91 42.596 li
46.752 42.596 li
46.752 45.102 li
46.948 45.032 47.158 44.976 47.354 44.948 cv
47.55 44.92 47.76 44.892 47.956 44.892 cv
49.09 44.892 49.986 45.214 50.658 45.83 cv
51.33 46.46 51.666 47.3 51.666 48.364 cv
51.666 49.47 51.316 50.324 50.63 50.926 cv
49.944 51.528 48.978 51.822 47.746 51.822 cv
47.312 51.822 46.878 51.78 46.43 51.724 cv
45.982 51.654 45.534 51.556 45.058 51.402 cv
45.058 50.016 li
45.464 50.24 45.884 50.408 46.332 50.52 cv
46.766 50.632 47.228 50.674 47.718 50.674 cv
48.502 50.674 49.132 50.478 49.594 50.058 cv
50.042 49.638 50.28 49.078 50.28 48.364 cv
50.28 47.664 50.042 47.104 49.594 46.684 cv
49.132 46.264 48.502 46.054 47.718 46.054 cv
47.354 46.054 46.976 46.096 46.612 46.18 cv
46.248 46.264 45.87 46.39 45.492 46.558 cv
45.492 41.434 li
ef
59.846 13.01 mo
56.346 13.01 li
f
59.846 13.01 mo
56.346 13.01 li
@
24.348 17.118 mo
29.164 17.118 li
29.164 18.28 li
22.682 18.28 li
22.682 17.118 li
23.2 16.586 23.914 15.858 24.824 14.934 cv
25.72 14.024 26.294 13.436 26.532 13.17 cv
26.98 12.68 27.288 12.26 27.456 11.91 cv
27.624 11.574 27.722 11.224 27.722 10.888 cv
27.722 10.356 27.526 9.90802 27.148 9.57202 cv
26.77 9.23602 26.28 9.05402 25.664 9.05402 cv
25.23 9.05402 24.768 9.138 24.292 9.27802 cv
23.816 9.43201 23.298 9.65601 22.752 9.96402 cv
22.752 8.56403 li
23.312 8.34003 23.83 8.172 24.306 8.06 cv
24.782 7.948 25.23 7.892 25.636 7.892 cv
26.686 7.892 27.526 8.15802 28.156 8.69 cv
28.786 9.22202 29.108 9.922 29.108 10.804 cv
29.108 11.224 29.024 11.63 28.87 11.994 cv
28.716 12.372 28.436 12.82 28.016 13.324 cv
27.904 13.464 27.54 13.842 26.924 14.472 cv
26.308 15.102 25.454 15.984 24.348 17.118 cv
ef
32.038 18.28 mo
33.48 18.28 li
33.48 16.544 li
32.038 16.544 li
cp
f
39.432 8.98401 mo
38.718 8.98401 38.186 9.33401 37.822 10.034 cv
37.458 10.734 37.29 11.784 37.29 13.184 cv
37.29 14.584 37.458 15.634 37.822 16.334 cv
38.186 17.034 38.718 17.384 39.432 17.384 cv
40.146 17.384 40.678 17.034 41.042 16.334 cv
41.392 15.634 41.574 14.584 41.574 13.184 cv
41.574 11.784 41.392 10.734 41.042 10.034 cv
40.678 9.33401 40.146 8.98401 39.432 8.98401 cv
39.432 7.892 mo
40.566 7.892 41.434 8.354 42.05 9.25 cv
42.652 10.16 42.96 11.476 42.96 13.184 cv
42.96 14.906 42.652 16.222 42.05 17.118 cv
41.434 18.014 40.566 18.462 39.432 18.462 cv
38.284 18.462 37.402 18.014 36.8 17.118 cv
36.198 16.222 35.904 14.906 35.904 13.184 cv
35.904 11.476 36.198 10.16 36.8 9.25 cv
37.402 8.354 38.284 7.892 39.432 7.892 cv
ef
48.432 8.98401 mo
47.718 8.98401 47.186 9.33401 46.822 10.034 cv
46.458 10.734 46.29 11.784 46.29 13.184 cv
46.29 14.584 46.458 15.634 46.822 16.334 cv
47.186 17.034 47.718 17.384 48.432 17.384 cv
49.146 17.384 49.678 17.034 50.042 16.334 cv
50.392 15.634 50.574 14.584 50.574 13.184 cv
50.574 11.784 50.392 10.734 50.042 10.034 cv
49.678 9.33401 49.146 8.98401 48.432 8.98401 cv
48.432 7.892 mo
49.566 7.892 50.434 8.354 51.05 9.25 cv
51.652 10.16 51.96 11.476 51.96 13.184 cv
51.96 14.906 51.652 16.222 51.05 17.118 cv
50.434 18.014 49.566 18.462 48.432 18.462 cv
47.284 18.462 46.402 18.014 45.8 17.118 cv
45.198 16.222 44.904 14.906 44.904 13.184 cv
44.904 11.476 45.198 10.16 45.8 9.25 cv
46.402 8.354 47.284 7.892 48.432 7.892 cv
ef
8.292 204.393 mo
14.529 204.393 li
14.529 203.084 li
14.529 201.984 14.287 201.17 13.781 200.653 cv
13.275 200.147 12.483 199.883 11.405 199.883 cv
10.327 199.883 9.546 200.147 9.04 200.653 cv
8.545 201.17 8.292 201.984 8.292 203.084 cv
8.292 204.393 li
7.401 205.482 mo
7.401 203.249 li
7.401 201.698 7.731 200.554 8.369 199.828 cv
9.018 199.102 10.03 198.739 11.405 198.739 cv
12.791 198.739 13.803 199.113 14.452 199.839 cv
15.101 200.565 15.42 201.709 15.42 203.249 cv
15.42 205.482 li
7.401 205.482 li
ef
12.395 194.267 mo
12.395 195.07 12.494 195.62 12.67 195.928 cv
12.857 196.236 13.165 196.39 13.605 196.39 cv
13.957 196.39 14.243 196.28 14.441 196.049 cv
14.65 195.818 14.749 195.499 14.749 195.103 cv
14.749 194.553 14.562 194.113 14.166 193.783 cv
13.781 193.453 13.264 193.288 12.615 193.288 cv
12.395 193.288 li
12.395 194.267 li
11.988 192.298 mo
15.42 192.298 li
15.42 193.288 li
14.507 193.288 li
14.881 193.519 15.145 193.805 15.31 194.135 cv
15.475 194.465 15.563 194.883 15.563 195.367 cv
15.563 195.983 15.398 196.478 15.057 196.841 cv
14.716 197.204 14.254 197.38 13.671 197.38 cv
13 197.38 12.494 197.16 12.142 196.698 cv
11.801 196.247 11.625 195.576 11.625 194.674 cv
11.625 193.288 li
11.526 193.288 li
11.075 193.288 10.723 193.442 10.47 193.739 cv
10.228 194.036 10.096 194.454 10.096 194.993 cv
10.096 195.345 10.14 195.675 10.228 196.005 cv
10.316 196.335 10.437 196.643 10.591 196.94 cv
9.678 196.94 li
9.546 196.588 9.436 196.236 9.37 195.895 cv
9.304 195.554 9.26 195.224 9.26 194.894 cv
9.26 194.025 9.491 193.376 9.942 192.947 cv
10.393 192.518 11.075 192.298 11.988 192.298 cv
ef
7.698 189.307 mo
9.403 189.307 li
9.403 187.272 li
10.173 187.272 li
10.173 189.307 li
13.44 189.307 li
13.935 189.307 14.254 189.241 14.386 189.109 cv
14.529 188.977 14.595 188.702 14.595 188.284 cv
14.595 187.272 li
15.42 187.272 li
15.42 188.284 li
15.42 189.054 15.277 189.582 14.991 189.868 cv
14.705 190.154 14.188 190.297 13.44 190.297 cv
10.173 190.297 li
10.173 191.023 li
9.403 191.023 li
9.403 190.297 li
7.698 190.297 li
7.698 189.307 li
ef
12.395 183.227 mo
12.395 184.03 12.494 184.58 12.67 184.888 cv
12.857 185.196 13.165 185.35 13.605 185.35 cv
13.957 185.35 14.243 185.24 14.441 185.009 cv
14.65 184.778 14.749 184.459 14.749 184.063 cv
14.749 183.513 14.562 183.073 14.166 182.743 cv
13.781 182.413 13.264 182.248 12.615 182.248 cv
12.395 182.248 li
12.395 183.227 li
11.988 181.258 mo
15.42 181.258 li
15.42 182.248 li
14.507 182.248 li
14.881 182.479 15.145 182.765 15.31 183.095 cv
15.475 183.425 15.563 183.843 15.563 184.327 cv
15.563 184.943 15.398 185.438 15.057 185.801 cv
14.716 186.164 14.254 186.34 13.671 186.34 cv
13 186.34 12.494 186.12 12.142 185.658 cv
11.801 185.207 11.625 184.536 11.625 183.634 cv
11.625 182.248 li
11.526 182.248 li
11.075 182.248 10.723 182.402 10.47 182.699 cv
10.228 182.996 10.096 183.414 10.096 183.953 cv
10.096 184.305 10.14 184.635 10.228 184.965 cv
10.316 185.295 10.437 185.603 10.591 185.9 cv
9.678 185.9 li
9.546 185.548 9.436 185.196 9.37 184.855 cv
9.304 184.514 9.26 184.184 9.26 183.854 cv
9.26 182.985 9.491 182.336 9.942 181.907 cv
10.393 181.478 11.075 181.258 11.988 181.258 cv
ef
7.06 172.719 mo
7.885 172.719 li
7.885 173.665 li
7.885 174.017 7.962 174.27 8.105 174.402 cv
8.248 174.545 8.501 174.611 8.875 174.611 cv
9.403 174.611 li
9.403 172.983 li
10.173 172.983 li
10.173 174.611 li
15.42 174.611 li
15.42 175.601 li
10.173 175.601 li
10.173 176.547 li
9.403 176.547 li
9.403 175.601 li
8.985 175.601 li
8.325 175.601 7.83 175.447 7.522 175.139 cv
7.214 174.831 7.06 174.336 7.06 173.654 cv
7.06 172.719 li
ef
12.164 166.658 mo
12.648 166.658 li
12.648 171.201 li
13.33 171.157 13.858 170.959 14.21 170.585 cv
14.562 170.222 14.738 169.716 14.738 169.056 cv
14.738 168.682 14.694 168.308 14.606 167.956 cv
14.518 167.604 14.375 167.241 14.177 166.889 cv
15.112 166.889 li
15.266 167.241 15.387 167.604 15.453 167.978 cv
15.519 168.352 15.563 168.737 15.563 169.111 cv
15.563 170.079 15.288 170.838 14.738 171.399 cv
14.188 171.96 13.429 172.235 12.472 172.235 cv
11.493 172.235 10.712 171.971 10.129 171.443 cv
9.557 170.915 9.26 170.189 9.26 169.287 cv
9.26 168.473 9.524 167.835 10.041 167.362 cv
10.569 166.9 11.273 166.658 12.164 166.658 cv
11.878 167.648 mo
11.339 167.659 10.91 167.813 10.58 168.099 cv
10.261 168.396 10.096 168.792 10.096 169.276 cv
10.096 169.826 10.261 170.266 10.569 170.596 cv
10.877 170.926 11.317 171.124 11.878 171.168 cv
11.878 167.648 li
ef
7.698 164.107 mo
9.403 164.107 li
9.403 162.072 li
10.173 162.072 li
10.173 164.107 li
13.44 164.107 li
13.935 164.107 14.254 164.041 14.386 163.909 cv
14.529 163.777 14.595 163.502 14.595 163.084 cv
14.595 162.072 li
15.42 162.072 li
15.42 163.084 li
15.42 163.854 15.277 164.382 14.991 164.668 cv
14.705 164.954 14.188 165.097 13.44 165.097 cv
10.173 165.097 li
10.173 165.823 li
9.403 165.823 li
9.403 165.097 li
7.698 165.097 li
7.698 164.107 li
ef
9.634 156.432 mo
10.558 156.432 li
10.404 156.718 10.294 156.993 10.217 157.279 cv
10.14 157.565 10.096 157.84 10.096 158.126 cv
10.096 158.764 10.305 159.27 10.712 159.622 cv
11.119 159.974 11.691 160.15 12.417 160.15 cv
13.154 160.15 13.726 159.974 14.133 159.622 cv
14.54 159.27 14.738 158.764 14.738 158.126 cv
14.738 157.84 14.705 157.565 14.628 157.279 cv
14.551 156.993 14.43 156.718 14.276 156.432 cv
15.189 156.432 li
15.321 156.718 15.42 157.004 15.475 157.29 cv
15.53 157.587 15.563 157.906 15.563 158.236 cv
15.563 159.138 15.288 159.864 14.716 160.392 cv
14.155 160.931 13.385 161.195 12.417 161.195 cv
11.438 161.195 10.668 160.931 10.107 160.392 cv
9.546 159.853 9.26 159.116 9.26 158.17 cv
9.26 157.862 9.293 157.565 9.359 157.279 cv
9.425 156.993 9.513 156.707 9.634 156.432 cv
ef
11.79 149.761 mo
15.42 149.761 li
15.42 150.751 li
11.823 150.751 li
11.251 150.751 10.833 150.872 10.547 151.092 cv
10.261 151.312 10.118 151.642 10.118 152.082 cv
10.118 152.621 10.294 153.039 10.635 153.347 cv
10.976 153.655 11.438 153.809 12.021 153.809 cv
15.42 153.809 li
15.42 154.799 li
7.06 154.799 li
7.06 153.809 li
10.338 153.809 li
9.986 153.578 9.711 153.303 9.535 152.973 cv
9.359 152.654 9.26 152.28 9.26 151.862 cv
9.26 151.18 9.48 150.652 9.909 150.3 cv
10.338 149.948 10.965 149.761 11.79 149.761 cv
ef
9.403 147.806 mo
9.403 146.816 li
15.42 146.816 li
15.42 147.806 li
9.403 147.806 li
7.06 147.806 mo
8.314 147.806 mo
7.06 147.806 li
7.06 146.816 li
8.314 146.816 li
cp
ef
11.79 139.681 mo
15.42 139.681 li
15.42 140.671 li
11.823 140.671 li
11.251 140.671 10.833 140.792 10.547 141.012 cv
10.261 141.232 10.118 141.562 10.118 142.002 cv
10.118 142.541 10.294 142.959 10.635 143.267 cv
10.976 143.575 11.438 143.729 12.021 143.729 cv
15.42 143.729 li
15.42 144.719 li
9.403 144.719 li
9.403 143.729 li
10.338 143.729 li
9.986 143.498 9.711 143.223 9.535 142.893 cv
9.359 142.574 9.26 142.2 9.26 141.782 cv
9.26 141.1 9.48 140.572 9.909 140.22 cv
10.338 139.868 10.965 139.681 11.79 139.681 cv
ef
12.34 133.766 mo
11.636 133.766 11.075 133.92 10.679 134.206 cv
10.283 134.503 10.085 134.921 10.085 135.449 cv
10.085 135.977 10.283 136.395 10.679 136.692 cv
11.075 136.989 11.636 137.132 12.34 137.132 cv
13.055 137.132 13.605 136.989 14.001 136.692 cv
14.397 136.395 14.595 135.977 14.595 135.449 cv
14.595 134.921 14.397 134.503 14.001 134.206 cv
13.605 133.92 13.055 133.766 12.34 133.766 cv
14.672 132.776 mo
15.684 132.776 16.443 133.007 16.949 133.458 cv
17.444 133.92 17.697 134.613 17.697 135.548 cv
17.697 135.9 17.664 136.219 17.62 136.527 cv
17.565 136.835 17.488 137.143 17.378 137.429 cv
16.421 137.429 li
16.575 137.143 16.685 136.857 16.762 136.571 cv
16.839 136.285 16.883 135.999 16.883 135.702 cv
16.883 135.064 16.707 134.58 16.377 134.25 cv
16.036 133.931 15.53 133.766 14.848 133.766 cv
14.364 133.766 li
14.716 133.975 14.98 134.239 15.156 134.558 cv
15.332 134.877 15.42 135.251 15.42 135.691 cv
15.42 136.439 15.145 137.033 14.584 137.484 cv
14.023 137.935 13.275 138.155 12.34 138.155 cv
11.416 138.155 10.668 137.935 10.107 137.484 cv
9.546 137.033 9.26 136.439 9.26 135.691 cv
9.26 135.251 9.348 134.877 9.524 134.558 cv
9.7 134.239 9.964 133.975 10.316 133.766 cv
9.403 133.766 li
9.403 132.776 li
14.672 132.776 li
ef
7.698 126.307 mo
9.403 126.307 li
9.403 124.272 li
10.173 124.272 li
10.173 126.307 li
13.44 126.307 li
13.935 126.307 14.254 126.241 14.386 126.109 cv
14.529 125.977 14.595 125.702 14.595 125.284 cv
14.595 124.272 li
15.42 124.272 li
15.42 125.284 li
15.42 126.054 15.277 126.582 14.991 126.868 cv
14.705 127.154 14.188 127.297 13.44 127.297 cv
10.173 127.297 li
10.173 128.023 li
9.403 128.023 li
9.403 127.297 li
7.698 127.297 li
7.698 126.307 li
ef
9.403 122.966 mo
9.403 121.976 li
15.42 121.976 li
15.42 122.966 li
9.403 122.966 li
7.06 122.966 mo
8.314 122.966 mo
7.06 122.966 li
7.06 121.976 li
8.314 121.976 li
cp
ef
10.558 115.16 mo
10.118 114.918 9.799 114.621 9.579 114.28 cv
9.37 113.939 9.26 113.532 9.26 113.059 cv
9.26 112.443 9.48 111.959 9.92 111.618 cv
10.36 111.277 10.987 111.101 11.79 111.101 cv
15.42 111.101 li
15.42 112.091 li
11.823 112.091 li
11.251 112.091 10.822 112.201 10.536 112.399 cv
10.261 112.608 10.118 112.916 10.118 113.334 cv
10.118 113.851 10.294 114.258 10.635 114.555 cv
10.976 114.852 11.438 114.995 12.021 114.995 cv
15.42 114.995 li
15.42 115.985 li
11.823 115.985 li
11.251 115.985 10.822 116.095 10.536 116.293 cv
10.261 116.502 10.118 116.821 10.118 117.239 cv
10.118 117.745 10.294 118.152 10.635 118.449 cv
10.976 118.746 11.438 118.889 12.021 118.889 cv
15.42 118.889 li
15.42 119.879 li
9.403 119.879 li
9.403 118.889 li
10.338 118.889 li
9.975 118.669 9.7 118.394 9.524 118.075 cv
9.348 117.767 9.26 117.393 9.26 116.953 cv
9.26 116.513 9.37 116.15 9.59 115.842 cv
9.81 115.534 10.14 115.314 10.558 115.16 cv
ef
12.164 104.018 mo
12.648 104.018 li
12.648 108.561 li
13.33 108.517 13.858 108.319 14.21 107.945 cv
14.562 107.582 14.738 107.076 14.738 106.416 cv
14.738 106.042 14.694 105.668 14.606 105.316 cv
14.518 104.964 14.375 104.601 14.177 104.249 cv
15.112 104.249 li
15.266 104.601 15.387 104.964 15.453 105.338 cv
15.519 105.712 15.563 106.097 15.563 106.471 cv
15.563 107.439 15.288 108.198 14.738 108.759 cv
14.188 109.32 13.429 109.595 12.472 109.595 cv
11.493 109.595 10.712 109.331 10.129 108.803 cv
9.557 108.275 9.26 107.549 9.26 106.647 cv
9.26 105.833 9.524 105.195 10.041 104.722 cv
10.569 104.26 11.273 104.018 12.164 104.018 cv
11.878 105.008 mo
11.339 105.019 10.91 105.173 10.58 105.459 cv
10.261 105.756 10.096 106.152 10.096 106.636 cv
10.096 107.186 10.261 107.626 10.569 107.956 cv
10.877 108.286 11.317 108.484 11.878 108.528 cv
11.878 105.008 li
ef
7.071 96.47 mo
7.907 96.954 8.721 97.306 9.524 97.537 cv
10.327 97.779 11.141 97.889 11.966 97.889 cv
12.802 97.889 13.616 97.779 14.419 97.537 cv
15.233 97.306 16.036 96.954 16.861 96.47 cv
16.861 97.328 li
16.014 97.867 15.2 98.274 14.386 98.538 cv
13.572 98.802 12.769 98.934 11.966 98.934 cv
11.174 98.934 10.371 98.802 9.557 98.538 cv
8.743 98.274 7.918 97.878 7.071 97.328 cv
7.071 96.47 li
ef
9.579 90.807 mo
10.514 90.807 li
10.382 91.093 10.272 91.379 10.195 91.676 cv
10.129 91.984 10.085 92.292 10.085 92.611 cv
10.085 93.106 10.162 93.48 10.316 93.722 cv
10.47 93.964 10.69 94.085 10.987 94.085 cv
11.218 94.085 11.394 93.997 11.526 93.821 cv
11.658 93.645 11.79 93.293 11.9 92.765 cv
11.977 92.424 li
12.131 91.72 12.351 91.225 12.615 90.928 cv
12.89 90.642 13.275 90.488 13.759 90.488 cv
14.32 90.488 14.76 90.708 15.079 91.148 cv
15.409 91.588 15.563 92.204 15.563 92.974 cv
15.563 93.304 15.53 93.634 15.475 93.986 cv
15.42 94.338 15.332 94.701 15.2 95.086 cv
14.177 95.086 li
14.375 94.723 14.518 94.36 14.606 94.008 cv
14.705 93.656 14.749 93.304 14.749 92.952 cv
14.749 92.49 14.672 92.127 14.518 91.874 cv
14.364 91.632 14.133 91.5 13.836 91.5 cv
13.572 91.5 13.363 91.599 13.22 91.775 cv
13.077 91.951 12.934 92.347 12.802 92.963 cv
12.725 93.304 li
12.593 93.92 12.395 94.371 12.131 94.635 cv
11.867 94.91 11.504 95.042 11.031 95.042 cv
10.47 95.042 10.03 94.844 9.722 94.448 cv
9.414 94.052 9.26 93.48 9.26 92.732 cv
9.26 92.369 9.293 92.028 9.348 91.698 cv
9.403 91.379 9.48 91.082 9.579 90.807 cv
ef
7.071 89.04 mo
7.071 88.182 li
7.918 87.654 8.743 87.247 9.557 86.983 cv
10.371 86.719 11.174 86.576 11.966 86.576 cv
12.769 86.576 13.572 86.719 14.386 86.983 cv
15.2 87.247 16.014 87.654 16.861 88.182 cv
16.861 89.04 li
16.036 88.567 15.233 88.215 14.419 87.973 cv
13.616 87.742 12.802 87.621 11.966 87.621 cv
11.141 87.621 10.327 87.742 9.524 87.973 cv
8.721 88.215 7.907 88.567 7.071 89.04 cv
ef
1.5 lw
2 lc
76.079 238.587 mo
112.152 236.094 li
148.224 237.895 li
184.297 235.706 li
220.37 234.145 li
256.443 234.112 li
292.515 234.201 li
328.588 239.215 li
364.661 238.488 li
400.734 234.451 li
.883665 .769162 0 0 cmyk
@
73.079 241.587 mo
79.079 241.587 li
79.079 235.587 li
73.079 235.587 li
cp
f
1 lw
0 lc
0 lj
73.079 241.587 mo
79.079 241.587 li
79.079 235.587 li
73.079 235.587 li
cp
@
109.152 239.094 mo
115.152 239.094 li
115.152 233.094 li
109.152 233.094 li
cp
f
109.152 239.094 mo
115.152 239.094 li
115.152 233.094 li
109.152 233.094 li
cp
@
145.225 240.895 mo
151.225 240.895 li
151.225 234.895 li
145.225 234.895 li
cp
f
145.225 240.895 mo
151.225 240.895 li
151.225 234.895 li
145.225 234.895 li
cp
@
181.297 238.705 mo
187.297 238.705 li
187.297 232.705 li
181.297 232.705 li
cp
f
181.297 238.705 mo
187.297 238.705 li
187.297 232.705 li
181.297 232.705 li
cp
@
217.37 237.145 mo
223.37 237.145 li
223.37 231.145 li
217.37 231.145 li
cp
f
217.37 237.145 mo
223.37 237.145 li
223.37 231.145 li
217.37 231.145 li
cp
@
253.443 237.112 mo
259.443 237.112 li
259.443 231.112 li
253.443 231.112 li
cp
f
253.443 237.112 mo
259.443 237.112 li
259.443 231.112 li
253.443 231.112 li
cp
@
289.516 237.201 mo
295.516 237.201 li
295.516 231.201 li
289.516 231.201 li
cp
f
289.516 237.201 mo
295.516 237.201 li
295.516 231.201 li
289.516 231.201 li
cp
@
325.588 242.215 mo
331.588 242.215 li
331.588 236.215 li
325.588 236.215 li
cp
f
325.588 242.215 mo
331.588 242.215 li
331.588 236.215 li
325.588 236.215 li
cp
@
361.661 241.487 mo
367.661 241.487 li
367.661 235.487 li
361.661 235.487 li
cp
f
361.661 241.487 mo
367.661 241.487 li
367.661 235.487 li
361.661 235.487 li
cp
@
397.734 237.451 mo
403.734 237.451 li
403.734 231.451 li
397.734 231.451 li
cp
f
397.734 237.451 mo
403.734 237.451 li
403.734 231.451 li
397.734 231.451 li
cp
@
1.5 lw
2 lc
1 lj
76.079 189.653 mo
112.152 191.998 li
148.224 187.364 li
184.297 189.79 li
220.37 193.181 li
256.443 191.779 li
292.515 193.184 li
328.588 192.415 li
364.661 193.188 li
400.734 189.79 li
@
76.079 192.653 mo
76.875 192.653 77.638 192.337 78.2 191.774 cv
78.763 191.212 79.079 190.449 79.079 189.653 cv
79.079 188.857 78.763 188.094 78.2 187.532 cv
77.638 186.969 76.875 186.653 76.079 186.653 cv
75.283 186.653 74.52 186.969 73.958 187.532 cv
73.395 188.094 73.079 188.857 73.079 189.653 cv
73.079 190.449 73.395 191.212 73.958 191.774 cv
74.52 192.337 75.283 192.653 76.079 192.653 cv
cp
f
1 lw
0 lc
76.079 192.653 mo
76.875 192.653 77.638 192.337 78.2 191.774 cv
78.763 191.212 79.079 190.449 79.079 189.653 cv
79.079 188.857 78.763 188.094 78.2 187.532 cv
77.638 186.969 76.875 186.653 76.079 186.653 cv
75.283 186.653 74.52 186.969 73.958 187.532 cv
73.395 188.094 73.079 188.857 73.079 189.653 cv
73.079 190.449 73.395 191.212 73.958 191.774 cv
74.52 192.337 75.283 192.653 76.079 192.653 cv
cp
@
112.152 194.998 mo
112.948 194.998 113.711 194.682 114.273 194.119 cv
114.836 193.557 115.152 192.794 115.152 191.998 cv
115.152 191.202 114.836 190.439 114.273 189.877 cv
113.711 189.314 112.948 188.998 112.152 188.998 cv
111.356 188.998 110.593 189.314 110.031 189.877 cv
109.468 190.439 109.152 191.202 109.152 191.998 cv
109.152 192.794 109.468 193.557 110.031 194.119 cv
110.593 194.682 111.356 194.998 112.152 194.998 cv
cp
f
112.152 194.998 mo
112.948 194.998 113.711 194.682 114.273 194.119 cv
114.836 193.557 115.152 192.794 115.152 191.998 cv
115.152 191.202 114.836 190.439 114.273 189.877 cv
113.711 189.314 112.948 188.998 112.152 188.998 cv
111.356 188.998 110.593 189.314 110.031 189.877 cv
109.468 190.439 109.152 191.202 109.152 191.998 cv
109.152 192.794 109.468 193.557 110.031 194.119 cv
110.593 194.682 111.356 194.998 112.152 194.998 cv
cp
@
148.225 190.364 mo
149.021 190.364 149.784 190.048 150.346 189.485 cv
150.909 188.923 151.225 188.16 151.225 187.364 cv
151.225 186.568 150.909 185.805 150.346 185.243 cv
149.784 184.68 149.021 184.364 148.225 184.364 cv
147.429 184.364 146.666 184.68 146.104 185.243 cv
145.541 185.805 145.225 186.568 145.225 187.364 cv
145.225 188.16 145.541 188.923 146.104 189.485 cv
146.666 190.048 147.429 190.364 148.225 190.364 cv
cp
f
148.225 190.364 mo
149.021 190.364 149.784 190.048 150.346 189.485 cv
150.909 188.923 151.225 188.16 151.225 187.364 cv
151.225 186.568 150.909 185.805 150.346 185.243 cv
149.784 184.68 149.021 184.364 148.225 184.364 cv
147.429 184.364 146.666 184.68 146.104 185.243 cv
145.541 185.805 145.225 186.568 145.225 187.364 cv
145.225 188.16 145.541 188.923 146.104 189.485 cv
146.666 190.048 147.429 190.364 148.225 190.364 cv
cp
@
184.297 192.789 mo
185.093 192.789 185.856 192.473 186.418 191.91 cv
186.981 191.348 187.297 190.585 187.297 189.789 cv
187.297 188.993 186.981 188.23 186.418 187.668 cv
185.856 187.105 185.093 186.789 184.297 186.789 cv
183.501 186.789 182.738 187.105 182.176 187.668 cv
181.613 188.23 181.297 188.993 181.297 189.789 cv
181.297 190.585 181.613 191.348 182.176 191.91 cv
182.738 192.473 183.501 192.789 184.297 192.789 cv
cp
f
184.297 192.789 mo
185.093 192.789 185.856 192.473 186.418 191.91 cv
186.981 191.348 187.297 190.585 187.297 189.789 cv
187.297 188.993 186.981 188.23 186.418 187.668 cv
185.856 187.105 185.093 186.789 184.297 186.789 cv
183.501 186.789 182.738 187.105 182.176 187.668 cv
181.613 188.23 181.297 188.993 181.297 189.789 cv
181.297 190.585 181.613 191.348 182.176 191.91 cv
182.738 192.473 183.501 192.789 184.297 192.789 cv
cp
@
220.37 196.181 mo
221.166 196.181 221.929 195.865 222.491 195.302 cv
223.054 194.74 223.37 193.977 223.37 193.181 cv
223.37 192.385 223.054 191.622 222.491 191.06 cv
221.929 190.497 221.166 190.181 220.37 190.181 cv
219.574 190.181 218.811 190.497 218.249 191.06 cv
217.686 191.622 217.37 192.385 217.37 193.181 cv
217.37 193.977 217.686 194.74 218.249 195.302 cv
218.811 195.865 219.574 196.181 220.37 196.181 cv
cp
f
220.37 196.181 mo
221.166 196.181 221.929 195.865 222.491 195.302 cv
223.054 194.74 223.37 193.977 223.37 193.181 cv
223.37 192.385 223.054 191.622 222.491 191.06 cv
221.929 190.497 221.166 190.181 220.37 190.181 cv
219.574 190.181 218.811 190.497 218.249 191.06 cv
217.686 191.622 217.37 192.385 217.37 193.181 cv
217.37 193.977 217.686 194.74 218.249 195.302 cv
218.811 195.865 219.574 196.181 220.37 196.181 cv
cp
@
256.443 194.778 mo
257.239 194.778 258.002 194.462 258.564 193.899 cv
259.127 193.337 259.443 192.574 259.443 191.778 cv
259.443 190.982 259.127 190.219 258.564 189.657 cv
258.002 189.094 257.239 188.778 256.443 188.778 cv
255.647 188.778 254.884 189.094 254.322 189.657 cv
253.759 190.219 253.443 190.982 253.443 191.778 cv
253.443 192.574 253.759 193.337 254.322 193.899 cv
254.884 194.462 255.647 194.778 256.443 194.778 cv
cp
f
256.443 194.778 mo
257.239 194.778 258.002 194.462 258.564 193.899 cv
259.127 193.337 259.443 192.574 259.443 191.778 cv
259.443 190.982 259.127 190.219 258.564 189.657 cv
258.002 189.094 257.239 188.778 256.443 188.778 cv
255.647 188.778 254.884 189.094 254.322 189.657 cv
253.759 190.219 253.443 190.982 253.443 191.778 cv
253.443 192.574 253.759 193.337 254.322 193.899 cv
254.884 194.462 255.647 194.778 256.443 194.778 cv
cp
@
292.516 196.184 mo
293.312 196.184 294.075 195.868 294.637 195.305 cv
295.2 194.743 295.516 193.98 295.516 193.184 cv
295.516 192.388 295.2 191.625 294.637 191.063 cv
294.075 190.5 293.312 190.184 292.516 190.184 cv
291.72 190.184 290.957 190.5 290.395 191.063 cv
289.832 191.625 289.516 192.388 289.516 193.184 cv
289.516 193.98 289.832 194.743 290.395 195.305 cv
290.957 195.868 291.72 196.184 292.516 196.184 cv
cp
f
292.516 196.184 mo
293.312 196.184 294.075 195.868 294.637 195.305 cv
295.2 194.743 295.516 193.98 295.516 193.184 cv
295.516 192.388 295.2 191.625 294.637 191.063 cv
294.075 190.5 293.312 190.184 292.516 190.184 cv
291.72 190.184 290.957 190.5 290.395 191.063 cv
289.832 191.625 289.516 192.388 289.516 193.184 cv
289.516 193.98 289.832 194.743 290.395 195.305 cv
290.957 195.868 291.72 196.184 292.516 196.184 cv
cp
@
328.588 195.415 mo
329.384 195.415 330.147 195.099 330.709 194.536 cv
331.272 193.974 331.588 193.211 331.588 192.415 cv
331.588 191.619 331.272 190.856 330.709 190.294 cv
330.147 189.731 329.384 189.415 328.588 189.415 cv
327.792 189.415 327.029 189.731 326.467 190.294 cv
325.904 190.856 325.588 191.619 325.588 192.415 cv
325.588 193.211 325.904 193.974 326.467 194.536 cv
327.029 195.099 327.792 195.415 328.588 195.415 cv
cp
f
328.588 195.415 mo
329.384 195.415 330.147 195.099 330.709 194.536 cv
331.272 193.974 331.588 193.211 331.588 192.415 cv
331.588 191.619 331.272 190.856 330.709 190.294 cv
330.147 189.731 329.384 189.415 328.588 189.415 cv
327.792 189.415 327.029 189.731 326.467 190.294 cv
325.904 190.856 325.588 191.619 325.588 192.415 cv
325.588 193.211 325.904 193.974 326.467 194.536 cv
327.029 195.099 327.792 195.415 328.588 195.415 cv
cp
@
364.661 196.188 mo
365.457 196.188 366.22 195.872 366.782 195.309 cv
367.345 194.747 367.661 193.984 367.661 193.188 cv
367.661 192.392 367.345 191.629 366.782 191.067 cv
366.22 190.504 365.457 190.188 364.661 190.188 cv
363.865 190.188 363.102 190.504 362.54 191.067 cv
361.977 191.629 361.661 192.392 361.661 193.188 cv
361.661 193.984 361.977 194.747 362.54 195.309 cv
363.102 195.872 363.865 196.188 364.661 196.188 cv
cp
f
364.661 196.188 mo
365.457 196.188 366.22 195.872 366.782 195.309 cv
367.345 194.747 367.661 193.984 367.661 193.188 cv
367.661 192.392 367.345 191.629 366.782 191.067 cv
366.22 190.504 365.457 190.188 364.661 190.188 cv
363.865 190.188 363.102 190.504 362.54 191.067 cv
361.977 191.629 361.661 192.392 361.661 193.188 cv
361.661 193.984 361.977 194.747 362.54 195.309 cv
363.102 195.872 363.865 196.188 364.661 196.188 cv
cp
@
400.734 192.789 mo
401.53 192.789 402.293 192.473 402.855 191.91 cv
403.418 191.348 403.734 190.585 403.734 189.789 cv
403.734 188.993 403.418 188.23 402.855 187.668 cv
402.293 187.105 401.53 186.789 400.734 186.789 cv
399.938 186.789 399.175 187.105 398.613 187.668 cv
398.05 188.23 397.734 188.993 397.734 189.789 cv
397.734 190.585 398.05 191.348 398.613 191.91 cv
399.175 192.473 399.938 192.789 400.734 192.789 cv
cp
f
400.734 192.789 mo
401.53 192.789 402.293 192.473 402.855 191.91 cv
403.418 191.348 403.734 190.585 403.734 189.789 cv
403.734 188.993 403.418 188.23 402.855 187.668 cv
402.293 187.105 401.53 186.789 400.734 186.789 cv
399.938 186.789 399.175 187.105 398.613 187.668 cv
398.05 188.23 397.734 188.993 397.734 189.789 cv
397.734 190.585 398.05 191.348 398.613 191.91 cv
399.175 192.473 399.938 192.789 400.734 192.789 cv
cp
@
1.5 lw
2 lc
76.079 171.539 mo
112.152 161.19 li
148.224 165.577 li
184.297 168.397 li
220.37 176.282 li
256.443 162.73 li
292.515 165.759 li
328.588 180.221 li
364.661 168.397 li
400.734 165.577 li
0 .993988 1 0 cmyk
@
73.079 174.539 mo
79.079 174.539 li
79.079 168.539 li
73.079 168.539 li
cp
f
1 lw
0 lc
0 lj
73.079 174.539 mo
79.079 174.539 li
79.079 168.539 li
73.079 168.539 li
cp
@
109.152 164.19 mo
115.152 164.19 li
115.152 158.19 li
109.152 158.19 li
cp
f
109.152 164.19 mo
115.152 164.19 li
115.152 158.19 li
109.152 158.19 li
cp
@
145.225 168.577 mo
151.225 168.577 li
151.225 162.577 li
145.225 162.577 li
cp
f
145.225 168.577 mo
151.225 168.577 li
151.225 162.577 li
145.225 162.577 li
cp
@
181.297 171.397 mo
187.297 171.397 li
187.297 165.397 li
181.297 165.397 li
cp
f
181.297 171.397 mo
187.297 171.397 li
187.297 165.397 li
181.297 165.397 li
cp
@
217.37 179.281 mo
223.37 179.281 li
223.37 173.281 li
217.37 173.281 li
cp
f
217.37 179.281 mo
223.37 179.281 li
223.37 173.281 li
217.37 173.281 li
cp
@
253.443 165.729 mo
259.443 165.729 li
259.443 159.729 li
253.443 159.729 li
cp
f
253.443 165.729 mo
259.443 165.729 li
259.443 159.729 li
253.443 159.729 li
cp
@
289.516 168.758 mo
295.516 168.758 li
295.516 162.758 li
289.516 162.758 li
cp
f
289.516 168.758 mo
295.516 168.758 li
295.516 162.758 li
289.516 162.758 li
cp
@
325.588 183.221 mo
331.588 183.221 li
331.588 177.221 li
325.588 177.221 li
cp
f
325.588 183.221 mo
331.588 183.221 li
331.588 177.221 li
325.588 177.221 li
cp
@
361.661 171.397 mo
367.661 171.397 li
367.661 165.397 li
361.661 165.397 li
cp
f
361.661 171.397 mo
367.661 171.397 li
367.661 165.397 li
361.661 165.397 li
cp
@
397.734 168.577 mo
403.734 168.577 li
403.734 162.577 li
397.734 162.577 li
cp
f
397.734 168.577 mo
403.734 168.577 li
403.734 162.577 li
397.734 162.577 li
cp
@
1.5 lw
2 lc
1 lj
76.079 44.275 mo
112.152 74.178 li
148.224 77.317 li
184.297 81.099 li
220.37 82.472 li
256.443 70.02 li
292.515 62.528 li
328.588 76.723 li
364.661 67.958 li
400.734 65.5 li
@
76.079 47.275 mo
76.875 47.275 77.638 46.959 78.2 46.396 cv
78.763 45.834 79.079 45.071 79.079 44.275 cv
79.079 43.479 78.763 42.716 78.2 42.154 cv
77.638 41.591 76.875 41.275 76.079 41.275 cv
75.283 41.275 74.52 41.591 73.958 42.154 cv
73.395 42.716 73.079 43.479 73.079 44.275 cv
73.079 45.071 73.395 45.834 73.958 46.396 cv
74.52 46.959 75.283 47.275 76.079 47.275 cv
cp
f
1 lw
0 lc
76.079 47.275 mo
76.875 47.275 77.638 46.959 78.2 46.396 cv
78.763 45.834 79.079 45.071 79.079 44.275 cv
79.079 43.479 78.763 42.716 78.2 42.154 cv
77.638 41.591 76.875 41.275 76.079 41.275 cv
75.283 41.275 74.52 41.591 73.958 42.154 cv
73.395 42.716 73.079 43.479 73.079 44.275 cv
73.079 45.071 73.395 45.834 73.958 46.396 cv
74.52 46.959 75.283 47.275 76.079 47.275 cv
cp
@
112.152 77.178 mo
112.948 77.178 113.711 76.862 114.273 76.299 cv
114.836 75.737 115.152 74.974 115.152 74.178 cv
115.152 73.382 114.836 72.619 114.273 72.057 cv
113.711 71.494 112.948 71.178 112.152 71.178 cv
111.356 71.178 110.593 71.494 110.031 72.057 cv
109.468 72.619 109.152 73.382 109.152 74.178 cv
109.152 74.974 109.468 75.737 110.031 76.299 cv
110.593 76.862 111.356 77.178 112.152 77.178 cv
cp
f
112.152 77.178 mo
112.948 77.178 113.711 76.862 114.273 76.299 cv
114.836 75.737 115.152 74.974 115.152 74.178 cv
115.152 73.382 114.836 72.619 114.273 72.057 cv
113.711 71.494 112.948 71.178 112.152 71.178 cv
111.356 71.178 110.593 71.494 110.031 72.057 cv
109.468 72.619 109.152 73.382 109.152 74.178 cv
109.152 74.974 109.468 75.737 110.031 76.299 cv
110.593 76.862 111.356 77.178 112.152 77.178 cv
cp
@
148.225 80.317 mo
149.021 80.317 149.784 80.001 150.346 79.438 cv
150.909 78.876 151.225 78.113 151.225 77.317 cv
151.225 76.521 150.909 75.758 150.346 75.196 cv
149.784 74.633 149.021 74.317 148.225 74.317 cv
147.429 74.317 146.666 74.633 146.104 75.196 cv
145.541 75.758 145.225 76.521 145.225 77.317 cv
145.225 78.113 145.541 78.876 146.104 79.438 cv
146.666 80.001 147.429 80.317 148.225 80.317 cv
cp
f
148.225 80.317 mo
149.021 80.317 149.784 80.001 150.346 79.438 cv
150.909 78.876 151.225 78.113 151.225 77.317 cv
151.225 76.521 150.909 75.758 150.346 75.196 cv
149.784 74.633 149.021 74.317 148.225 74.317 cv
147.429 74.317 146.666 74.633 146.104 75.196 cv
145.541 75.758 145.225 76.521 145.225 77.317 cv
145.225 78.113 145.541 78.876 146.104 79.438 cv
146.666 80.001 147.429 80.317 148.225 80.317 cv
cp
@
184.297 84.099 mo
185.093 84.099 185.856 83.783 186.418 83.22 cv
186.981 82.658 187.297 81.895 187.297 81.099 cv
187.297 80.303 186.981 79.54 186.418 78.978 cv
185.856 78.415 185.093 78.099 184.297 78.099 cv
183.501 78.099 182.738 78.415 182.176 78.978 cv
181.613 79.54 181.297 80.303 181.297 81.099 cv
181.297 81.895 181.613 82.658 182.176 83.22 cv
182.738 83.783 183.501 84.099 184.297 84.099 cv
cp
f
184.297 84.099 mo
185.093 84.099 185.856 83.783 186.418 83.22 cv
186.981 82.658 187.297 81.895 187.297 81.099 cv
187.297 80.303 186.981 79.54 186.418 78.978 cv
185.856 78.415 185.093 78.099 184.297 78.099 cv
183.501 78.099 182.738 78.415 182.176 78.978 cv
181.613 79.54 181.297 80.303 181.297 81.099 cv
181.297 81.895 181.613 82.658 182.176 83.22 cv
182.738 83.783 183.501 84.099 184.297 84.099 cv
cp
@
220.37 85.472 mo
221.166 85.472 221.929 85.156 222.491 84.593 cv
223.054 84.031 223.37 83.268 223.37 82.472 cv
223.37 81.676 223.054 80.913 222.491 80.351 cv
221.929 79.788 221.166 79.472 220.37 79.472 cv
219.574 79.472 218.811 79.788 218.249 80.351 cv
217.686 80.913 217.37 81.676 217.37 82.472 cv
217.37 83.268 217.686 84.031 218.249 84.593 cv
218.811 85.156 219.574 85.472 220.37 85.472 cv
cp
f
220.37 85.472 mo
221.166 85.472 221.929 85.156 222.491 84.593 cv
223.054 84.031 223.37 83.268 223.37 82.472 cv
223.37 81.676 223.054 80.913 222.491 80.351 cv
221.929 79.788 221.166 79.472 220.37 79.472 cv
219.574 79.472 218.811 79.788 218.249 80.351 cv
217.686 80.913 217.37 81.676 217.37 82.472 cv
217.37 83.268 217.686 84.031 218.249 84.593 cv
218.811 85.156 219.574 85.472 220.37 85.472 cv
cp
@
256.443 73.02 mo
257.239 73.02 258.002 72.704 258.564 72.141 cv
259.127 71.579 259.443 70.816 259.443 70.02 cv
259.443 69.224 259.127 68.461 258.564 67.899 cv
258.002 67.336 257.239 67.02 256.443 67.02 cv
255.647 67.02 254.884 67.336 254.322 67.899 cv
253.759 68.461 253.443 69.224 253.443 70.02 cv
253.443 70.816 253.759 71.579 254.322 72.141 cv
254.884 72.704 255.647 73.02 256.443 73.02 cv
cp
f
256.443 73.02 mo
257.239 73.02 258.002 72.704 258.564 72.141 cv
259.127 71.579 259.443 70.816 259.443 70.02 cv
259.443 69.224 259.127 68.461 258.564 67.899 cv
258.002 67.336 257.239 67.02 256.443 67.02 cv
255.647 67.02 254.884 67.336 254.322 67.899 cv
253.759 68.461 253.443 69.224 253.443 70.02 cv
253.443 70.816 253.759 71.579 254.322 72.141 cv
254.884 72.704 255.647 73.02 256.443 73.02 cv
cp
@
292.516 65.529 mo
293.312 65.529 294.075 65.213 294.637 64.65 cv
295.2 64.088 295.516 63.325 295.516 62.529 cv
295.516 61.733 295.2 60.97 294.637 60.408 cv
294.075 59.845 293.312 59.529 292.516 59.529 cv
291.72 59.529 290.957 59.845 290.395 60.408 cv
289.832 60.97 289.516 61.733 289.516 62.529 cv
289.516 63.325 289.832 64.088 290.395 64.65 cv
290.957 65.213 291.72 65.529 292.516 65.529 cv
cp
f
292.516 65.529 mo
293.312 65.529 294.075 65.213 294.637 64.65 cv
295.2 64.088 295.516 63.325 295.516 62.529 cv
295.516 61.733 295.2 60.97 294.637 60.408 cv
294.075 59.845 293.312 59.529 292.516 59.529 cv
291.72 59.529 290.957 59.845 290.395 60.408 cv
289.832 60.97 289.516 61.733 289.516 62.529 cv
289.516 63.325 289.832 64.088 290.395 64.65 cv
290.957 65.213 291.72 65.529 292.516 65.529 cv
cp
@
328.588 79.724 mo
329.384 79.724 330.147 79.408 330.709 78.845 cv
331.272 78.283 331.588 77.52 331.588 76.724 cv
331.588 75.928 331.272 75.165 330.709 74.603 cv
330.147 74.04 329.384 73.724 328.588 73.724 cv
327.792 73.724 327.029 74.04 326.467 74.603 cv
325.904 75.165 325.588 75.928 325.588 76.724 cv
325.588 77.52 325.904 78.283 326.467 78.845 cv
327.029 79.408 327.792 79.724 328.588 79.724 cv
cp
f
328.588 79.724 mo
329.384 79.724 330.147 79.408 330.709 78.845 cv
331.272 78.283 331.588 77.52 331.588 76.724 cv
331.588 75.928 331.272 75.165 330.709 74.603 cv
330.147 74.04 329.384 73.724 328.588 73.724 cv
327.792 73.724 327.029 74.04 326.467 74.603 cv
325.904 75.165 325.588 75.928 325.588 76.724 cv
325.588 77.52 325.904 78.283 326.467 78.845 cv
327.029 79.408 327.792 79.724 328.588 79.724 cv
cp
@
364.661 70.959 mo
365.457 70.959 366.22 70.643 366.782 70.08 cv
367.345 69.518 367.661 68.755 367.661 67.959 cv
367.661 67.163 367.345 66.4 366.782 65.838 cv
366.22 65.275 365.457 64.959 364.661 64.959 cv
363.865 64.959 363.102 65.275 362.54 65.838 cv
361.977 66.4 361.661 67.163 361.661 67.959 cv
361.661 68.755 361.977 69.518 362.54 70.08 cv
363.102 70.643 363.865 70.959 364.661 70.959 cv
cp
f
364.661 70.959 mo
365.457 70.959 366.22 70.643 366.782 70.08 cv
367.345 69.518 367.661 68.755 367.661 67.959 cv
367.661 67.163 367.345 66.4 366.782 65.838 cv
366.22 65.275 365.457 64.959 364.661 64.959 cv
363.865 64.959 363.102 65.275 362.54 65.838 cv
361.977 66.4 361.661 67.163 361.661 67.959 cv
361.661 68.755 361.977 69.518 362.54 70.08 cv
363.102 70.643 363.865 70.959 364.661 70.959 cv
cp
@
400.734 68.501 mo
401.53 68.501 402.293 68.185 402.855 67.622 cv
403.418 67.06 403.734 66.297 403.734 65.501 cv
403.734 64.705 403.418 63.942 402.855 63.38 cv
402.293 62.817 401.53 62.501 400.734 62.501 cv
399.938 62.501 399.175 62.817 398.613 63.38 cv
398.05 63.942 397.734 64.705 397.734 65.501 cv
397.734 66.297 398.05 67.06 398.613 67.622 cv
399.175 68.185 399.938 68.501 400.734 68.501 cv
cp
f
400.734 68.501 mo
401.53 68.501 402.293 68.185 402.855 67.622 cv
403.418 67.06 403.734 66.297 403.734 65.501 cv
403.734 64.705 403.418 63.942 402.855 63.38 cv
402.293 62.817 401.53 62.501 400.734 62.501 cv
399.938 62.501 399.175 62.817 398.613 63.38 cv
398.05 63.942 397.734 64.705 397.734 65.501 cv
397.734 66.297 398.05 67.06 398.613 67.622 cv
399.175 68.185 399.938 68.501 400.734 68.501 cv
cp
@
.8 lw
2 lc
0 lj
59.846 279.122 mo
59.846 13.01 li
1 /0 /CSD get_res sepcs
1 sep
@
416.966 279.122 mo
416.966 13.01 li
@
59.846 279.122 mo
416.966 279.122 li
@
59.846 13.01 mo
416.966 13.01 li
@
265.285 39.142 mo
412.066 39.142 li
413 39.142 413.466 38.675 413.466 37.742 cv
413.466 17.911 li
413.466 16.977 413 16.511 412.066 16.511 cv
265.285 16.511 li
264.352 16.511 263.885 16.977 263.885 17.911 cv
263.885 37.742 li
263.885 38.675 264.352 39.142 265.285 39.142 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
265.285 39.142 mo
412.066 39.142 li
413 39.142 413.466 38.675 413.466 37.742 cv
413.466 17.911 li
413.466 16.977 413 16.511 412.066 16.511 cv
265.285 16.511 li
264.352 16.511 263.885 16.977 263.885 17.911 cv
263.885 37.742 li
263.885 38.675 264.352 39.142 265.285 39.142 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
266.685 22.173 mo
280.685 22.173 li
.883665 .769162 0 0 cmyk
@
270.685 25.173 mo
276.685 25.173 li
276.685 19.173 li
270.685 19.173 li
cp
f
1 lw
0 lc
0 lj
270.685 25.173 mo
276.685 25.173 li
276.685 19.173 li
270.685 19.173 li
cp
@
290.005 19.705 mo
290.005 20.377 li
289.739 20.251 289.494 20.16 289.263 20.097 cv
289.025 20.041 288.801 20.006 288.591 20.006 cv
288.213 20.006 287.919 20.083 287.716 20.223 cv
287.513 20.37 287.415 20.58 287.415 20.846 cv
287.415 21.07 287.478 21.245 287.618 21.357 cv
287.751 21.476 288.01 21.567 288.388 21.637 cv
288.808 21.721 li
289.319 21.819 289.697 21.994 289.942 22.239 cv
290.187 22.491 290.313 22.82 290.313 23.233 cv
290.313 23.73 290.145 24.101 289.816 24.353 cv
289.48 24.605 288.997 24.731 288.36 24.731 cv
288.115 24.731 287.856 24.703 287.583 24.654 cv
287.31 24.605 287.03 24.528 286.743 24.416 cv
286.743 23.702 li
287.023 23.863 287.296 23.982 287.562 24.059 cv
287.828 24.143 288.094 24.178 288.36 24.178 cv
288.752 24.178 289.053 24.101 289.27 23.947 cv
289.48 23.793 289.592 23.576 289.592 23.282 cv
289.592 23.03 289.515 22.834 289.361 22.694 cv
289.207 22.554 288.955 22.449 288.605 22.379 cv
288.185 22.295 li
287.667 22.197 287.296 22.036 287.065 21.812 cv
286.834 21.595 286.722 21.294 286.722 20.902 cv
286.722 20.454 286.876 20.097 287.198 19.838 cv
287.513 19.579 287.954 19.446 288.514 19.446 cv
288.752 19.446 288.99 19.467 289.242 19.509 cv
289.487 19.551 289.739 19.621 290.005 19.705 cv
1 /0 /CSD get_res sepcs
1 sep
ef
294.445 19.705 mo
294.445 20.377 li
294.179 20.251 293.934 20.16 293.703 20.097 cv
293.465 20.041 293.241 20.006 293.031 20.006 cv
292.653 20.006 292.359 20.083 292.156 20.223 cv
291.953 20.37 291.855 20.58 291.855 20.846 cv
291.855 21.07 291.918 21.245 292.058 21.357 cv
292.191 21.476 292.45 21.567 292.828 21.637 cv
293.248 21.721 li
293.759 21.819 294.137 21.994 294.382 22.239 cv
294.627 22.491 294.753 22.82 294.753 23.233 cv
294.753 23.73 294.585 24.101 294.256 24.353 cv
293.92 24.605 293.437 24.731 292.8 24.731 cv
292.555 24.731 292.296 24.703 292.023 24.654 cv
291.75 24.605 291.47 24.528 291.183 24.416 cv
291.183 23.702 li
291.463 23.863 291.736 23.982 292.002 24.059 cv
292.268 24.143 292.534 24.178 292.8 24.178 cv
293.192 24.178 293.493 24.101 293.71 23.947 cv
293.92 23.793 294.032 23.576 294.032 23.282 cv
294.032 23.03 293.955 22.834 293.801 22.694 cv
293.647 22.554 293.395 22.449 293.045 22.379 cv
292.625 22.295 li
292.107 22.197 291.736 22.036 291.505 21.812 cv
291.274 21.595 291.162 21.294 291.162 20.902 cv
291.162 20.454 291.316 20.097 291.638 19.838 cv
291.953 19.579 292.394 19.446 292.954 19.446 cv
293.192 19.446 293.43 19.467 293.682 19.509 cv
293.927 19.551 294.179 19.621 294.445 19.705 cv
ef
296.519 20.104 mo
296.519 24.073 li
297.352 24.073 li
298.052 24.073 298.57 23.919 298.899 23.597 cv
299.221 23.275 299.389 22.771 299.389 22.085 cv
299.389 21.399 299.221 20.902 298.899 20.58 cv
298.57 20.265 298.052 20.104 297.352 20.104 cv
296.519 20.104 li
295.826 19.537 mo
297.247 19.537 li
298.234 19.537 298.962 19.747 299.424 20.153 cv
299.886 20.566 300.117 21.21 300.117 22.085 cv
300.117 22.967 299.879 23.611 299.417 24.024 cv
298.955 24.437 298.227 24.64 297.247 24.64 cv
295.826 24.64 li
295.826 19.537 li
ef
300.883 23.002 mo
302.724 23.002 li
302.724 22.442 li
300.883 22.442 li
cp
f
305.37 21.812 mo
305.062 21.812 304.817 21.924 304.635 22.134 cv
304.453 22.344 304.362 22.638 304.362 23.002 cv
304.362 23.373 304.453 23.667 304.635 23.877 cv
304.817 24.087 305.062 24.192 305.37 24.192 cv
305.678 24.192 305.923 24.087 306.105 23.877 cv
306.287 23.667 306.378 23.373 306.378 23.002 cv
306.378 22.638 306.287 22.344 306.105 22.134 cv
305.923 21.924 305.678 21.812 305.37 21.812 cv
306.742 19.649 mo
306.742 20.279 li
306.567 20.195 306.392 20.132 306.217 20.09 cv
306.035 20.048 305.86 20.027 305.692 20.027 cv
305.23 20.027 304.88 20.181 304.642 20.489 cv
304.404 20.797 304.264 21.266 304.236 21.882 cv
304.369 21.686 304.537 21.532 304.74 21.427 cv
304.943 21.322 305.167 21.266 305.412 21.266 cv
305.923 21.266 306.329 21.427 306.623 21.735 cv
306.917 22.043 307.071 22.47 307.071 23.002 cv
307.071 23.527 306.91 23.947 306.602 24.262 cv
306.294 24.577 305.881 24.731 305.37 24.731 cv
304.782 24.731 304.327 24.507 304.019 24.059 cv
303.704 23.611 303.55 22.953 303.55 22.092 cv
303.55 21.287 303.739 20.643 304.124 20.167 cv
304.502 19.691 305.02 19.446 305.664 19.446 cv
305.832 19.446 306.007 19.467 306.189 19.495 cv
306.364 19.53 306.546 19.579 306.742 19.649 cv
ef
310.146 20.139 mo
308.403 22.862 li
310.146 22.862 li
310.146 20.139 li
309.964 19.537 mo
310.832 19.537 li
310.832 22.862 li
311.56 22.862 li
311.56 23.436 li
310.832 23.436 li
310.832 24.64 li
310.146 24.64 li
310.146 23.436 li
307.843 23.436 li
307.843 22.771 li
309.964 19.537 li
ef
312.626 19.537 mo
313.655 19.537 li
314.957 23.009 li
316.266 19.537 li
317.295 19.537 li
317.295 24.64 li
316.623 24.64 li
316.623 20.16 li
315.307 23.66 li
314.614 23.66 li
313.298 20.16 li
313.298 24.64 li
312.626 24.64 li
312.626 19.537 li
ef
319.439 22.204 mo
319.439 24.073 li
320.545 24.073 li
320.916 24.073 321.189 23.996 321.371 23.842 cv
321.546 23.688 321.637 23.457 321.637 23.135 cv
321.637 22.82 321.546 22.589 321.371 22.435 cv
321.189 22.281 320.916 22.204 320.545 22.204 cv
319.439 22.204 li
319.439 20.104 mo
319.439 21.644 li
320.461 21.644 li
320.797 21.644 321.042 21.581 321.21 21.455 cv
321.378 21.329 321.462 21.14 321.462 20.874 cv
321.462 20.622 321.378 20.426 321.21 20.3 cv
321.042 20.174 320.797 20.104 320.461 20.104 cv
319.439 20.104 li
318.746 19.537 mo
320.51 19.537 li
321.035 19.537 321.441 19.649 321.728 19.866 cv
322.008 20.09 322.155 20.398 322.155 20.797 cv
322.155 21.112 322.078 21.364 321.931 21.546 cv
321.784 21.728 321.574 21.847 321.294 21.889 cv
321.63 21.966 321.896 22.12 322.085 22.351 cv
322.267 22.582 322.365 22.869 322.365 23.212 cv
322.365 23.674 322.204 24.024 321.896 24.269 cv
321.588 24.521 321.147 24.64 320.58 24.64 cv
318.746 24.64 li
318.746 19.537 li
ef
1.5 lw
2 lc
1 lj
266.685 32.439 mo
280.685 32.439 li
.883665 .769162 0 0 cmyk
@
273.685 35.439 mo
274.481 35.439 275.244 35.123 275.806 34.56 cv
276.369 33.998 276.685 33.235 276.685 32.439 cv
276.685 31.643 276.369 30.88 275.806 30.318 cv
275.244 29.755 274.481 29.439 273.685 29.439 cv
272.889 29.439 272.126 29.755 271.564 30.318 cv
271.001 30.88 270.685 31.643 270.685 32.439 cv
270.685 33.235 271.001 33.998 271.564 34.56 cv
272.126 35.123 272.889 35.439 273.685 35.439 cv
cp
f
1 lw
0 lc
273.685 35.439 mo
274.481 35.439 275.244 35.123 275.806 34.56 cv
276.369 33.998 276.685 33.235 276.685 32.439 cv
276.685 31.643 276.369 30.88 275.806 30.318 cv
275.244 29.755 274.481 29.439 273.685 29.439 cv
272.889 29.439 272.126 29.755 271.564 30.318 cv
271.001 30.88 270.685 31.643 270.685 32.439 cv
270.685 33.235 271.001 33.998 271.564 34.56 cv
272.126 35.123 272.889 35.439 273.685 35.439 cv
cp
@
290.005 29.905 mo
290.005 30.577 li
289.739 30.451 289.494 30.36 289.263 30.297 cv
289.025 30.241 288.801 30.206 288.591 30.206 cv
288.213 30.206 287.919 30.283 287.716 30.423 cv
287.513 30.57 287.415 30.78 287.415 31.046 cv
287.415 31.27 287.478 31.445 287.618 31.557 cv
287.751 31.676 288.01 31.767 288.388 31.837 cv
288.808 31.921 li
289.319 32.019 289.697 32.194 289.942 32.439 cv
290.187 32.691 290.313 33.02 290.313 33.433 cv
290.313 33.93 290.145 34.301 289.816 34.553 cv
289.48 34.805 288.997 34.931 288.36 34.931 cv
288.115 34.931 287.856 34.903 287.583 34.854 cv
287.31 34.805 287.03 34.728 286.743 34.616 cv
286.743 33.902 li
287.023 34.063 287.296 34.182 287.562 34.259 cv
287.828 34.343 288.094 34.378 288.36 34.378 cv
288.752 34.378 289.053 34.301 289.27 34.147 cv
289.48 33.993 289.592 33.776 289.592 33.482 cv
289.592 33.23 289.515 33.034 289.361 32.894 cv
289.207 32.754 288.955 32.649 288.605 32.579 cv
288.185 32.495 li
287.667 32.397 287.296 32.236 287.065 32.012 cv
286.834 31.795 286.722 31.494 286.722 31.102 cv
286.722 30.654 286.876 30.297 287.198 30.038 cv
287.513 29.779 287.954 29.646 288.514 29.646 cv
288.752 29.646 288.99 29.667 289.242 29.709 cv
289.487 29.751 289.739 29.821 290.005 29.905 cv
1 /0 /CSD get_res sepcs
1 sep
ef
294.445 29.905 mo
294.445 30.577 li
294.179 30.451 293.934 30.36 293.703 30.297 cv
293.465 30.241 293.241 30.206 293.031 30.206 cv
292.653 30.206 292.359 30.283 292.156 30.423 cv
291.953 30.57 291.855 30.78 291.855 31.046 cv
291.855 31.27 291.918 31.445 292.058 31.557 cv
292.191 31.676 292.45 31.767 292.828 31.837 cv
293.248 31.921 li
293.759 32.019 294.137 32.194 294.382 32.439 cv
294.627 32.691 294.753 33.02 294.753 33.433 cv
294.753 33.93 294.585 34.301 294.256 34.553 cv
293.92 34.805 293.437 34.931 292.8 34.931 cv
292.555 34.931 292.296 34.903 292.023 34.854 cv
291.75 34.805 291.47 34.728 291.183 34.616 cv
291.183 33.902 li
291.463 34.063 291.736 34.182 292.002 34.259 cv
292.268 34.343 292.534 34.378 292.8 34.378 cv
293.192 34.378 293.493 34.301 293.71 34.147 cv
293.92 33.993 294.032 33.776 294.032 33.482 cv
294.032 33.23 293.955 33.034 293.801 32.894 cv
293.647 32.754 293.395 32.649 293.045 32.579 cv
292.625 32.495 li
292.107 32.397 291.736 32.236 291.505 32.012 cv
291.274 31.795 291.162 31.494 291.162 31.102 cv
291.162 30.654 291.316 30.297 291.638 30.038 cv
291.953 29.779 292.394 29.646 292.954 29.646 cv
293.192 29.646 293.43 29.667 293.682 29.709 cv
293.927 29.751 294.179 29.821 294.445 29.905 cv
ef
296.519 30.304 mo
296.519 34.273 li
297.352 34.273 li
298.052 34.273 298.57 34.119 298.899 33.797 cv
299.221 33.475 299.389 32.971 299.389 32.285 cv
299.389 31.599 299.221 31.102 298.899 30.78 cv
298.57 30.465 298.052 30.304 297.352 30.304 cv
296.519 30.304 li
295.826 29.737 mo
297.247 29.737 li
298.234 29.737 298.962 29.947 299.424 30.353 cv
299.886 30.766 300.117 31.41 300.117 32.285 cv
300.117 33.167 299.879 33.811 299.417 34.224 cv
298.955 34.637 298.227 34.84 297.247 34.84 cv
295.826 34.84 li
295.826 29.737 li
ef
300.883 33.202 mo
302.724 33.202 li
302.724 32.642 li
300.883 32.642 li
cp
f
305.37 32.012 mo
305.062 32.012 304.817 32.124 304.635 32.334 cv
304.453 32.544 304.362 32.838 304.362 33.202 cv
304.362 33.573 304.453 33.867 304.635 34.077 cv
304.817 34.287 305.062 34.392 305.37 34.392 cv
305.678 34.392 305.923 34.287 306.105 34.077 cv
306.287 33.867 306.378 33.573 306.378 33.202 cv
306.378 32.838 306.287 32.544 306.105 32.334 cv
305.923 32.124 305.678 32.012 305.37 32.012 cv
306.742 29.849 mo
306.742 30.479 li
306.567 30.395 306.392 30.332 306.217 30.29 cv
306.035 30.248 305.86 30.227 305.692 30.227 cv
305.23 30.227 304.88 30.381 304.642 30.689 cv
304.404 30.997 304.264 31.466 304.236 32.082 cv
304.369 31.886 304.537 31.732 304.74 31.627 cv
304.943 31.522 305.167 31.466 305.412 31.466 cv
305.923 31.466 306.329 31.627 306.623 31.935 cv
306.917 32.243 307.071 32.67 307.071 33.202 cv
307.071 33.727 306.91 34.147 306.602 34.462 cv
306.294 34.777 305.881 34.931 305.37 34.931 cv
304.782 34.931 304.327 34.707 304.019 34.259 cv
303.704 33.811 303.55 33.153 303.55 32.292 cv
303.55 31.487 303.739 30.843 304.124 30.367 cv
304.502 29.891 305.02 29.646 305.664 29.646 cv
305.832 29.646 306.007 29.667 306.189 29.695 cv
306.364 29.73 306.546 29.779 306.742 29.849 cv
ef
310.146 30.339 mo
308.403 33.062 li
310.146 33.062 li
310.146 30.339 li
309.964 29.737 mo
310.832 29.737 li
310.832 33.062 li
311.56 33.062 li
311.56 33.636 li
310.832 33.636 li
310.832 34.84 li
310.146 34.84 li
310.146 33.636 li
307.843 33.636 li
307.843 32.971 li
309.964 29.737 li
ef
312.626 29.737 mo
313.655 29.737 li
314.957 33.209 li
316.266 29.737 li
317.295 29.737 li
317.295 34.84 li
316.623 34.84 li
316.623 30.36 li
315.307 33.86 li
314.614 33.86 li
313.298 30.36 li
313.298 34.84 li
312.626 34.84 li
312.626 29.737 li
ef
319.439 32.404 mo
319.439 34.273 li
320.545 34.273 li
320.916 34.273 321.189 34.196 321.371 34.042 cv
321.546 33.888 321.637 33.657 321.637 33.335 cv
321.637 33.02 321.546 32.789 321.371 32.635 cv
321.189 32.481 320.916 32.404 320.545 32.404 cv
319.439 32.404 li
319.439 30.304 mo
319.439 31.844 li
320.461 31.844 li
320.797 31.844 321.042 31.781 321.21 31.655 cv
321.378 31.529 321.462 31.34 321.462 31.074 cv
321.462 30.822 321.378 30.626 321.21 30.5 cv
321.042 30.374 320.797 30.304 320.461 30.304 cv
319.439 30.304 li
318.746 29.737 mo
320.51 29.737 li
321.035 29.737 321.441 29.849 321.728 30.066 cv
322.008 30.29 322.155 30.598 322.155 30.997 cv
322.155 31.312 322.078 31.564 321.931 31.746 cv
321.784 31.928 321.574 32.047 321.294 32.089 cv
321.63 32.166 321.896 32.32 322.085 32.551 cv
322.267 32.782 322.365 33.069 322.365 33.412 cv
322.365 33.874 322.204 34.224 321.896 34.469 cv
321.588 34.721 321.147 34.84 320.58 34.84 cv
318.746 34.84 li
318.746 29.737 li
ef
326.15 30.577 mo
324.925 31.242 li
326.15 31.907 li
325.954 32.243 li
324.806 31.55 li
324.806 32.838 li
324.414 32.838 li
324.414 31.55 li
323.266 32.243 li
323.07 31.907 li
324.295 31.242 li
323.07 30.577 li
323.266 30.241 li
324.414 30.934 li
324.414 29.646 li
324.806 29.646 li
324.806 30.934 li
325.954 30.241 li
326.15 30.577 li
ef
327.684 34.259 mo
330.092 34.259 li
330.092 34.84 li
326.851 34.84 li
326.851 34.259 li
327.11 33.993 327.467 33.629 327.922 33.167 cv
328.37 32.712 328.657 32.418 328.776 32.285 cv
329 32.04 329.154 31.83 329.238 31.655 cv
329.322 31.487 329.371 31.312 329.371 31.144 cv
329.371 30.878 329.273 30.654 329.084 30.486 cv
328.895 30.318 328.65 30.227 328.342 30.227 cv
328.125 30.227 327.894 30.269 327.656 30.339 cv
327.418 30.416 327.159 30.528 326.886 30.682 cv
326.886 29.982 li
327.166 29.87 327.425 29.786 327.663 29.73 cv
327.901 29.674 328.125 29.646 328.328 29.646 cv
328.853 29.646 329.273 29.779 329.588 30.045 cv
329.903 30.311 330.064 30.661 330.064 31.102 cv
330.064 31.312 330.022 31.515 329.945 31.697 cv
329.868 31.886 329.728 32.11 329.518 32.362 cv
329.462 32.432 329.28 32.621 328.972 32.936 cv
328.664 33.251 328.237 33.692 327.684 34.259 cv
ef
1.5 lw
2 lc
344.785 22.173 mo
358.785 22.173 li
0 .993988 1 0 cmyk
@
348.785 25.173 mo
354.785 25.173 li
354.785 19.173 li
348.785 19.173 li
cp
f
1 lw
0 lc
0 lj
348.785 25.173 mo
354.785 25.173 li
354.785 19.173 li
348.785 19.173 li
cp
@
365.066 19.537 mo
365.759 19.537 li
365.759 21.63 li
368.265 21.63 li
368.265 19.537 li
368.958 19.537 li
368.958 24.64 li
368.265 24.64 li
368.265 22.211 li
365.759 22.211 li
365.759 24.64 li
365.066 24.64 li
365.066 19.537 li
1 /0 /CSD get_res sepcs
1 sep
ef
371.039 20.104 mo
371.039 24.073 li
371.872 24.073 li
372.572 24.073 373.09 23.919 373.419 23.597 cv
373.741 23.275 373.909 22.771 373.909 22.085 cv
373.909 21.399 373.741 20.902 373.419 20.58 cv
373.09 20.265 372.572 20.104 371.872 20.104 cv
371.039 20.104 li
370.346 19.537 mo
371.767 19.537 li
372.754 19.537 373.482 19.747 373.944 20.153 cv
374.406 20.566 374.637 21.21 374.637 22.085 cv
374.637 22.967 374.399 23.611 373.937 24.024 cv
373.475 24.437 372.747 24.64 371.767 24.64 cv
370.346 24.64 li
370.346 19.537 li
ef
376.439 20.104 mo
376.439 24.073 li
377.272 24.073 li
377.972 24.073 378.49 23.919 378.819 23.597 cv
379.141 23.275 379.309 22.771 379.309 22.085 cv
379.309 21.399 379.141 20.902 378.819 20.58 cv
378.49 20.265 377.972 20.104 377.272 20.104 cv
376.439 20.104 li
375.746 19.537 mo
377.167 19.537 li
378.154 19.537 378.882 19.747 379.344 20.153 cv
379.806 20.566 380.037 21.21 380.037 22.085 cv
380.037 22.967 379.799 23.611 379.337 24.024 cv
378.875 24.437 378.147 24.64 377.167 24.64 cv
375.746 24.64 li
375.746 19.537 li
ef
380.803 23.002 mo
382.644 23.002 li
382.644 22.442 li
380.803 22.442 li
cp
f
385.29 21.812 mo
384.982 21.812 384.737 21.924 384.555 22.134 cv
384.373 22.344 384.282 22.638 384.282 23.002 cv
384.282 23.373 384.373 23.667 384.555 23.877 cv
384.737 24.087 384.982 24.192 385.29 24.192 cv
385.598 24.192 385.843 24.087 386.025 23.877 cv
386.207 23.667 386.298 23.373 386.298 23.002 cv
386.298 22.638 386.207 22.344 386.025 22.134 cv
385.843 21.924 385.598 21.812 385.29 21.812 cv
386.662 19.649 mo
386.662 20.279 li
386.487 20.195 386.312 20.132 386.137 20.09 cv
385.955 20.048 385.78 20.027 385.612 20.027 cv
385.15 20.027 384.8 20.181 384.562 20.489 cv
384.324 20.797 384.184 21.266 384.156 21.882 cv
384.289 21.686 384.457 21.532 384.66 21.427 cv
384.863 21.322 385.087 21.266 385.332 21.266 cv
385.843 21.266 386.249 21.427 386.543 21.735 cv
386.837 22.043 386.991 22.47 386.991 23.002 cv
386.991 23.527 386.83 23.947 386.522 24.262 cv
386.214 24.577 385.801 24.731 385.29 24.731 cv
384.702 24.731 384.247 24.507 383.939 24.059 cv
383.624 23.611 383.47 22.953 383.47 22.092 cv
383.47 21.287 383.659 20.643 384.044 20.167 cv
384.422 19.691 384.94 19.446 385.584 19.446 cv
385.752 19.446 385.927 19.467 386.109 19.495 cv
386.284 19.53 386.466 19.579 386.662 19.649 cv
ef
390.066 20.139 mo
388.323 22.862 li
390.066 22.862 li
390.066 20.139 li
389.884 19.537 mo
390.752 19.537 li
390.752 22.862 li
391.48 22.862 li
391.48 23.436 li
390.752 23.436 li
390.752 24.64 li
390.066 24.64 li
390.066 23.436 li
387.763 23.436 li
387.763 22.771 li
389.884 19.537 li
ef
392.546 19.537 mo
393.575 19.537 li
394.877 23.009 li
396.186 19.537 li
397.215 19.537 li
397.215 24.64 li
396.543 24.64 li
396.543 20.16 li
395.227 23.66 li
394.534 23.66 li
393.218 20.16 li
393.218 24.64 li
392.546 24.64 li
392.546 19.537 li
ef
399.239 22.204 mo
399.239 24.073 li
400.345 24.073 li
400.716 24.073 400.989 23.996 401.171 23.842 cv
401.346 23.688 401.437 23.457 401.437 23.135 cv
401.437 22.82 401.346 22.589 401.171 22.435 cv
400.989 22.281 400.716 22.204 400.345 22.204 cv
399.239 22.204 li
399.239 20.104 mo
399.239 21.644 li
400.261 21.644 li
400.597 21.644 400.842 21.581 401.01 21.455 cv
401.178 21.329 401.262 21.14 401.262 20.874 cv
401.262 20.622 401.178 20.426 401.01 20.3 cv
400.842 20.174 400.597 20.104 400.261 20.104 cv
399.239 20.104 li
398.546 19.537 mo
400.31 19.537 li
400.835 19.537 401.241 19.649 401.528 19.866 cv
401.808 20.09 401.955 20.398 401.955 20.797 cv
401.955 21.112 401.878 21.364 401.731 21.546 cv
401.584 21.728 401.374 21.847 401.094 21.889 cv
401.43 21.966 401.696 22.12 401.885 22.351 cv
402.067 22.582 402.165 22.869 402.165 23.212 cv
402.165 23.674 402.004 24.024 401.696 24.269 cv
401.388 24.521 400.947 24.64 400.38 24.64 cv
398.546 24.64 li
398.546 19.537 li
ef
1.5 lw
2 lc
1 lj
344.785 32.439 mo
358.785 32.439 li
0 .993988 1 0 cmyk
@
351.785 35.439 mo
352.581 35.439 353.344 35.123 353.906 34.56 cv
354.469 33.998 354.785 33.235 354.785 32.439 cv
354.785 31.643 354.469 30.88 353.906 30.318 cv
353.344 29.755 352.581 29.439 351.785 29.439 cv
350.989 29.439 350.226 29.755 349.664 30.318 cv
349.101 30.88 348.785 31.643 348.785 32.439 cv
348.785 33.235 349.101 33.998 349.664 34.56 cv
350.226 35.123 350.989 35.439 351.785 35.439 cv
cp
f
1 lw
0 lc
351.785 35.439 mo
352.581 35.439 353.344 35.123 353.906 34.56 cv
354.469 33.998 354.785 33.235 354.785 32.439 cv
354.785 31.643 354.469 30.88 353.906 30.318 cv
353.344 29.755 352.581 29.439 351.785 29.439 cv
350.989 29.439 350.226 29.755 349.664 30.318 cv
349.101 30.88 348.785 31.643 348.785 32.439 cv
348.785 33.235 349.101 33.998 349.664 34.56 cv
350.226 35.123 350.989 35.439 351.785 35.439 cv
cp
@
365.066 29.737 mo
365.759 29.737 li
365.759 31.83 li
368.265 31.83 li
368.265 29.737 li
368.958 29.737 li
368.958 34.84 li
368.265 34.84 li
368.265 32.411 li
365.759 32.411 li
365.759 34.84 li
365.066 34.84 li
365.066 29.737 li
1 /0 /CSD get_res sepcs
1 sep
ef
371.039 30.304 mo
371.039 34.273 li
371.872 34.273 li
372.572 34.273 373.09 34.119 373.419 33.797 cv
373.741 33.475 373.909 32.971 373.909 32.285 cv
373.909 31.599 373.741 31.102 373.419 30.78 cv
373.09 30.465 372.572 30.304 371.872 30.304 cv
371.039 30.304 li
370.346 29.737 mo
371.767 29.737 li
372.754 29.737 373.482 29.947 373.944 30.353 cv
374.406 30.766 374.637 31.41 374.637 32.285 cv
374.637 33.167 374.399 33.811 373.937 34.224 cv
373.475 34.637 372.747 34.84 371.767 34.84 cv
370.346 34.84 li
370.346 29.737 li
ef
376.439 30.304 mo
376.439 34.273 li
377.272 34.273 li
377.972 34.273 378.49 34.119 378.819 33.797 cv
379.141 33.475 379.309 32.971 379.309 32.285 cv
379.309 31.599 379.141 31.102 378.819 30.78 cv
378.49 30.465 377.972 30.304 377.272 30.304 cv
376.439 30.304 li
375.746 29.737 mo
377.167 29.737 li
378.154 29.737 378.882 29.947 379.344 30.353 cv
379.806 30.766 380.037 31.41 380.037 32.285 cv
380.037 33.167 379.799 33.811 379.337 34.224 cv
378.875 34.637 378.147 34.84 377.167 34.84 cv
375.746 34.84 li
375.746 29.737 li
ef
380.803 33.202 mo
382.644 33.202 li
382.644 32.642 li
380.803 32.642 li
cp
f
385.29 32.012 mo
384.982 32.012 384.737 32.124 384.555 32.334 cv
384.373 32.544 384.282 32.838 384.282 33.202 cv
384.282 33.573 384.373 33.867 384.555 34.077 cv
384.737 34.287 384.982 34.392 385.29 34.392 cv
385.598 34.392 385.843 34.287 386.025 34.077 cv
386.207 33.867 386.298 33.573 386.298 33.202 cv
386.298 32.838 386.207 32.544 386.025 32.334 cv
385.843 32.124 385.598 32.012 385.29 32.012 cv
386.662 29.849 mo
386.662 30.479 li
386.487 30.395 386.312 30.332 386.137 30.29 cv
385.955 30.248 385.78 30.227 385.612 30.227 cv
385.15 30.227 384.8 30.381 384.562 30.689 cv
384.324 30.997 384.184 31.466 384.156 32.082 cv
384.289 31.886 384.457 31.732 384.66 31.627 cv
384.863 31.522 385.087 31.466 385.332 31.466 cv
385.843 31.466 386.249 31.627 386.543 31.935 cv
386.837 32.243 386.991 32.67 386.991 33.202 cv
386.991 33.727 386.83 34.147 386.522 34.462 cv
386.214 34.777 385.801 34.931 385.29 34.931 cv
384.702 34.931 384.247 34.707 383.939 34.259 cv
383.624 33.811 383.47 33.153 383.47 32.292 cv
383.47 31.487 383.659 30.843 384.044 30.367 cv
384.422 29.891 384.94 29.646 385.584 29.646 cv
385.752 29.646 385.927 29.667 386.109 29.695 cv
386.284 29.73 386.466 29.779 386.662 29.849 cv
ef
390.066 30.339 mo
388.323 33.062 li
390.066 33.062 li
390.066 30.339 li
389.884 29.737 mo
390.752 29.737 li
390.752 33.062 li
391.48 33.062 li
391.48 33.636 li
390.752 33.636 li
390.752 34.84 li
390.066 34.84 li
390.066 33.636 li
387.763 33.636 li
387.763 32.971 li
389.884 29.737 li
ef
392.546 29.737 mo
393.575 29.737 li
394.877 33.209 li
396.186 29.737 li
397.215 29.737 li
397.215 34.84 li
396.543 34.84 li
396.543 30.36 li
395.227 33.86 li
394.534 33.86 li
393.218 30.36 li
393.218 34.84 li
392.546 34.84 li
392.546 29.737 li
ef
399.239 32.404 mo
399.239 34.273 li
400.345 34.273 li
400.716 34.273 400.989 34.196 401.171 34.042 cv
401.346 33.888 401.437 33.657 401.437 33.335 cv
401.437 33.02 401.346 32.789 401.171 32.635 cv
400.989 32.481 400.716 32.404 400.345 32.404 cv
399.239 32.404 li
399.239 30.304 mo
399.239 31.844 li
400.261 31.844 li
400.597 31.844 400.842 31.781 401.01 31.655 cv
401.178 31.529 401.262 31.34 401.262 31.074 cv
401.262 30.822 401.178 30.626 401.01 30.5 cv
400.842 30.374 400.597 30.304 400.261 30.304 cv
399.239 30.304 li
398.546 29.737 mo
400.31 29.737 li
400.835 29.737 401.241 29.849 401.528 30.066 cv
401.808 30.29 401.955 30.598 401.955 30.997 cv
401.955 31.312 401.878 31.564 401.731 31.746 cv
401.584 31.928 401.374 32.047 401.094 32.089 cv
401.43 32.166 401.696 32.32 401.885 32.551 cv
402.067 32.782 402.165 33.069 402.165 33.412 cv
402.165 33.874 402.004 34.224 401.696 34.469 cv
401.388 34.721 400.947 34.84 400.38 34.84 cv
398.546 34.84 li
398.546 29.737 li
ef
405.95 30.577 mo
404.725 31.242 li
405.95 31.907 li
405.754 32.243 li
404.606 31.55 li
404.606 32.838 li
404.214 32.838 li
404.214 31.55 li
403.066 32.243 li
402.87 31.907 li
404.095 31.242 li
402.87 30.577 li
403.066 30.241 li
404.214 30.934 li
404.214 29.646 li
404.606 29.646 li
404.606 30.934 li
405.754 30.241 li
405.95 30.577 li
ef
407.604 34.259 mo
410.012 34.259 li
410.012 34.84 li
406.771 34.84 li
406.771 34.259 li
407.03 33.993 407.387 33.629 407.842 33.167 cv
408.29 32.712 408.577 32.418 408.696 32.285 cv
408.92 32.04 409.074 31.83 409.158 31.655 cv
409.242 31.487 409.291 31.312 409.291 31.144 cv
409.291 30.878 409.193 30.654 409.004 30.486 cv
408.815 30.318 408.57 30.227 408.262 30.227 cv
408.045 30.227 407.814 30.269 407.576 30.339 cv
407.338 30.416 407.079 30.528 406.806 30.682 cv
406.806 29.982 li
407.086 29.87 407.345 29.786 407.583 29.73 cv
407.821 29.674 408.045 29.646 408.248 29.646 cv
408.773 29.646 409.193 29.779 409.508 30.045 cv
409.823 30.311 409.984 30.661 409.984 31.102 cv
409.984 31.312 409.942 31.515 409.865 31.697 cv
409.788 31.886 409.648 32.11 409.438 32.362 cv
409.382 32.432 409.2 32.621 408.892 32.936 cv
408.584 33.251 408.157 33.692 407.604 34.259 cv
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
