%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPA75.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/20, 9:20:43
%%BoundingBox: 0 0 448 338
%%HiResBoundingBox: 0 0 448 338
%%CropBox: 0 0 448 338
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 958 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-09-20T09:19:02+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-20T09:19:02+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:f47c2cbf-57f2-4541-8dc0-6773c7154422"
   xmpMM:InstanceID="uuid:82ece9df-535d-4d99-a400-42d05ad65542">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">figcomplete2_9.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -338 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 338 li
448 338 li
448 0 li
cp
clp
.059998 337.942 mo
448.02 337.942 li
448.02 .0569763 li
.059998 .0569763 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
53.932 293.617 mo
440.881 293.617 li
440.881 7.25702 li
53.932 7.25702 li
cp
f
71.52 293.612 mo
121.773 293.612 li
121.773 81.661 li
71.52 81.661 li
cp
.140536 .672541 .992279 .0229801 cmyk
f
71.52 293.612 mo
121.773 293.612 li
121.773 81.661 li
71.52 81.661 li
cp
gsave
grestore
/608539220.0 
<<
/ID /608539220.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608539220.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
272.533 293.612 mo
322.786 293.612 li
322.786 20.893 li
272.533 20.893 li
cp
false sop
.140536 .672541 .992279 .0229801 cmyk
f
272.533 293.612 mo
322.786 293.612 li
322.786 20.893 li
272.533 20.893 li
cp
gsave
grestore
/608539416.0 
<<
/ID /608539416.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608539416.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
121.773 293.612 mo
172.026 293.612 li
172.026 147.775 li
121.773 147.775 li
cp
false sop
0 .654261 .37409 0 cmyk
f
121.773 293.612 mo
172.026 293.612 li
172.026 147.775 li
121.773 147.775 li
cp
gsave
grestore
/608539612.0 
<<
/ID /608539612.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608539612.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
322.786 293.612 mo
373.039 293.612 li
373.039 111.923 li
322.786 111.923 li
cp
false sop
0 .654261 .37409 0 cmyk
f
322.786 293.612 mo
373.039 293.612 li
373.039 111.923 li
322.786 111.923 li
cp
gsave
grestore
/608539808.0 
<<
/ID /608539808.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608539808.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
172.026 293.612 mo
222.279 293.612 li
222.279 185.451 li
172.026 185.451 li
cp
false sop
.621088 .109194 .980743 .0040589 cmyk
f
172.026 293.612 mo
222.279 293.612 li
222.279 185.451 li
172.026 185.451 li
cp
gsave
grestore
/608540004.0 
<<
/ID /608540004.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608540004.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
373.039 293.612 mo
423.292 293.612 li
423.292 157.984 li
373.039 157.984 li
cp
false sop
.621088 .109194 .980743 .0040589 cmyk
f
373.039 293.612 mo
423.292 293.612 li
423.292 157.984 li
373.039 157.984 li
cp
gsave
grestore
/608540200.0 
<<
/ID /608540200.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608540200.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
145.895 293.617 mo
145.895 297.117 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
145.895 293.617 mo
145.895 297.117 li
@
57.254 301.043 mo
58.541 301.043 li
58.541 309.441 li
63.156 309.441 li
63.156 310.52 li
57.254 310.52 li
57.254 301.043 li
ef
67.158 304.228 mo
66.534 304.228 66.04 304.475 65.676 304.969 cv
65.312 305.463 65.13 306.126 65.13 306.971 cv
65.13 307.829 65.299 308.492 65.663 308.986 cv
66.027 309.48 66.521 309.714 67.158 309.714 cv
67.782 309.714 68.276 309.48 68.64 308.986 cv
69.004 308.492 69.186 307.829 69.186 306.971 cv
69.186 306.139 69.004 305.463 68.64 304.969 cv
68.276 304.475 67.782 304.228 67.158 304.228 cv
67.158 303.24 mo
68.172 303.24 68.965 303.578 69.55 304.228 cv
70.122 304.891 70.421 305.801 70.421 306.971 cv
70.421 308.141 70.122 309.051 69.55 309.701 cv
68.965 310.364 68.172 310.689 67.158 310.689 cv
66.131 310.689 65.325 310.364 64.753 309.701 cv
64.181 309.051 63.895 308.141 63.895 306.971 cv
63.895 305.801 64.181 304.891 64.753 304.228 cv
65.325 303.578 66.131 303.24 67.158 303.24 cv
ef
71.646 303.409 mo
72.816 303.409 li
74.272 308.96 li
75.728 303.409 li
77.106 303.409 li
78.562 308.96 li
80.018 303.409 li
81.188 303.409 li
79.329 310.52 li
77.951 310.52 li
76.417 304.696 li
74.883 310.52 li
73.505 310.52 li
71.646 303.409 li
ef
87.134 301.043 mo
88.421 301.043 li
88.421 304.93 li
93.075 304.93 li
93.075 301.043 li
94.362 301.043 li
94.362 310.52 li
93.075 310.52 li
93.075 306.009 li
88.421 306.009 li
88.421 310.52 li
87.134 310.52 li
87.134 301.043 li
ef
103.006 306.672 mo
103.006 307.244 li
97.637 307.244 li
97.689 308.05 97.923 308.674 98.365 309.09 cv
98.794 309.506 99.392 309.714 100.172 309.714 cv
100.614 309.714 101.056 309.662 101.472 309.558 cv
101.888 309.454 102.317 309.285 102.733 309.051 cv
102.733 310.156 li
102.317 310.338 101.888 310.481 101.446 310.559 cv
101.004 310.637 100.549 310.689 100.107 310.689 cv
98.963 310.689 98.066 310.364 97.403 309.714 cv
96.74 309.064 96.415 308.167 96.415 307.036 cv
96.415 305.879 96.727 304.956 97.351 304.267 cv
97.975 303.591 98.833 303.24 99.899 303.24 cv
100.861 303.24 101.615 303.552 102.174 304.163 cv
102.72 304.787 103.006 305.619 103.006 306.672 cv
101.836 306.334 mo
101.823 305.697 101.641 305.19 101.303 304.8 cv
100.952 304.423 100.484 304.228 99.912 304.228 cv
99.262 304.228 98.742 304.423 98.352 304.787 cv
97.962 305.151 97.728 305.671 97.676 306.334 cv
101.836 306.334 li
ef
106.119 301.394 mo
106.119 303.409 li
108.524 303.409 li
108.524 304.319 li
106.119 304.319 li
106.119 308.18 li
106.119 308.765 106.197 309.142 106.353 309.298 cv
106.509 309.467 106.834 309.545 107.328 309.545 cv
108.524 309.545 li
108.524 310.52 li
107.328 310.52 li
106.418 310.52 105.794 310.351 105.456 310.013 cv
105.118 309.675 104.949 309.064 104.949 308.18 cv
104.949 304.319 li
104.091 304.319 li
104.091 303.409 li
104.949 303.409 li
104.949 301.394 li
106.119 301.394 li
ef
116.086 306.672 mo
116.086 307.244 li
110.717 307.244 li
110.769 308.05 111.003 308.674 111.445 309.09 cv
111.874 309.506 112.472 309.714 113.252 309.714 cv
113.694 309.714 114.136 309.662 114.552 309.558 cv
114.968 309.454 115.397 309.285 115.813 309.051 cv
115.813 310.156 li
115.397 310.338 114.968 310.481 114.526 310.559 cv
114.084 310.637 113.629 310.689 113.187 310.689 cv
112.043 310.689 111.146 310.364 110.483 309.714 cv
109.82 309.064 109.495 308.167 109.495 307.036 cv
109.495 305.879 109.807 304.956 110.431 304.267 cv
111.055 303.591 111.913 303.24 112.979 303.24 cv
113.941 303.24 114.695 303.552 115.254 304.163 cv
115.8 304.787 116.086 305.619 116.086 306.672 cv
114.916 306.334 mo
114.903 305.697 114.721 305.19 114.383 304.8 cv
114.032 304.423 113.564 304.228 112.992 304.228 cv
112.342 304.228 111.822 304.423 111.432 304.787 cv
111.042 305.151 110.808 305.671 110.756 306.334 cv
114.916 306.334 li
ef
122.163 304.501 mo
122.033 304.423 121.89 304.371 121.734 304.332 cv
121.578 304.306 121.409 304.28 121.227 304.28 cv
120.564 304.28 120.057 304.501 119.706 304.93 cv
119.342 305.359 119.173 305.97 119.173 306.776 cv
119.173 310.52 li
118.003 310.52 li
118.003 303.409 li
119.173 303.409 li
119.173 304.514 li
119.407 304.085 119.732 303.76 120.122 303.552 cv
120.512 303.344 120.993 303.24 121.565 303.24 cv
121.643 303.24 121.734 303.253 121.838 303.253 cv
121.929 303.266 122.033 303.279 122.163 303.305 cv
122.163 304.501 li
ef
126.078 304.228 mo
125.454 304.228 124.96 304.475 124.596 304.969 cv
124.232 305.463 124.05 306.126 124.05 306.971 cv
124.05 307.829 124.219 308.492 124.583 308.986 cv
124.947 309.48 125.441 309.714 126.078 309.714 cv
126.702 309.714 127.196 309.48 127.56 308.986 cv
127.924 308.492 128.106 307.829 128.106 306.971 cv
128.106 306.139 127.924 305.463 127.56 304.969 cv
127.196 304.475 126.702 304.228 126.078 304.228 cv
126.078 303.24 mo
127.092 303.24 127.885 303.578 128.47 304.228 cv
129.042 304.891 129.341 305.801 129.341 306.971 cv
129.341 308.141 129.042 309.051 128.47 309.701 cv
127.885 310.364 127.092 310.689 126.078 310.689 cv
125.051 310.689 124.245 310.364 123.673 309.701 cv
123.101 309.051 122.815 308.141 122.815 306.971 cv
122.815 305.801 123.101 304.891 123.673 304.228 cv
124.245 303.578 125.051 303.24 126.078 303.24 cv
ef
135.922 306.88 mo
135.922 306.048 135.74 305.385 135.402 304.917 cv
135.051 304.449 134.557 304.215 133.933 304.215 cv
133.309 304.215 132.815 304.449 132.464 304.917 cv
132.113 305.385 131.944 306.048 131.944 306.88 cv
131.944 307.725 132.113 308.375 132.464 308.843 cv
132.815 309.311 133.309 309.545 133.933 309.545 cv
134.557 309.545 135.051 309.311 135.402 308.843 cv
135.74 308.375 135.922 307.725 135.922 306.88 cv
137.092 309.636 mo
137.092 310.832 136.819 311.729 136.286 312.327 cv
135.74 312.912 134.921 313.211 133.816 313.211 cv
133.4 313.211 133.023 313.172 132.659 313.12 cv
132.295 313.055 131.931 312.964 131.593 312.834 cv
131.593 311.703 li
131.931 311.885 132.269 312.015 132.607 312.106 cv
132.945 312.197 133.283 312.249 133.634 312.249 cv
134.388 312.249 134.96 312.041 135.35 311.651 cv
135.727 311.248 135.922 310.65 135.922 309.844 cv
135.922 309.272 li
135.675 309.688 135.363 310 134.986 310.208 cv
134.609 310.416 134.167 310.52 133.647 310.52 cv
132.763 310.52 132.061 310.195 131.528 309.532 cv
130.995 308.869 130.735 307.985 130.735 306.88 cv
130.735 305.788 130.995 304.904 131.528 304.241 cv
132.061 303.578 132.763 303.24 133.647 303.24 cv
134.167 303.24 134.609 303.344 134.986 303.552 cv
135.363 303.76 135.675 304.072 135.922 304.488 cv
135.922 303.409 li
137.092 303.409 li
137.092 309.636 li
ef
145.606 306.672 mo
145.606 307.244 li
140.237 307.244 li
140.289 308.05 140.523 308.674 140.965 309.09 cv
141.394 309.506 141.992 309.714 142.772 309.714 cv
143.214 309.714 143.656 309.662 144.072 309.558 cv
144.488 309.454 144.917 309.285 145.333 309.051 cv
145.333 310.156 li
144.917 310.338 144.488 310.481 144.046 310.559 cv
143.604 310.637 143.149 310.689 142.707 310.689 cv
141.563 310.689 140.666 310.364 140.003 309.714 cv
139.34 309.064 139.015 308.167 139.015 307.036 cv
139.015 305.879 139.327 304.956 139.951 304.267 cv
140.575 303.591 141.433 303.24 142.499 303.24 cv
143.461 303.24 144.215 303.552 144.774 304.163 cv
145.32 304.787 145.606 305.619 145.606 306.672 cv
144.436 306.334 mo
144.423 305.697 144.241 305.19 143.903 304.8 cv
143.552 304.423 143.084 304.228 142.512 304.228 cv
141.862 304.228 141.342 304.423 140.952 304.787 cv
140.562 305.151 140.328 305.671 140.276 306.334 cv
144.436 306.334 li
ef
153.477 306.23 mo
153.477 310.52 li
152.307 310.52 li
152.307 306.269 li
152.307 305.593 152.164 305.099 151.904 304.761 cv
151.644 304.423 151.254 304.254 150.734 304.254 cv
150.097 304.254 149.603 304.462 149.239 304.865 cv
148.875 305.268 148.693 305.814 148.693 306.503 cv
148.693 310.52 li
147.523 310.52 li
147.523 303.409 li
148.693 303.409 li
148.693 304.514 li
148.966 304.098 149.291 303.773 149.681 303.565 cv
150.058 303.357 150.5 303.24 150.994 303.24 cv
151.8 303.24 152.424 303.5 152.84 304.007 cv
153.256 304.514 153.477 305.255 153.477 306.23 cv
ef
161.926 306.672 mo
161.926 307.244 li
156.557 307.244 li
156.609 308.05 156.843 308.674 157.285 309.09 cv
157.714 309.506 158.312 309.714 159.092 309.714 cv
159.534 309.714 159.976 309.662 160.392 309.558 cv
160.808 309.454 161.237 309.285 161.653 309.051 cv
161.653 310.156 li
161.237 310.338 160.808 310.481 160.366 310.559 cv
159.924 310.637 159.469 310.689 159.027 310.689 cv
157.883 310.689 156.986 310.364 156.323 309.714 cv
155.66 309.064 155.335 308.167 155.335 307.036 cv
155.335 305.879 155.647 304.956 156.271 304.267 cv
156.895 303.591 157.753 303.24 158.819 303.24 cv
159.781 303.24 160.535 303.552 161.094 304.163 cv
161.64 304.787 161.926 305.619 161.926 306.672 cv
160.756 306.334 mo
160.743 305.697 160.561 305.19 160.223 304.8 cv
159.872 304.423 159.404 304.228 158.832 304.228 cv
158.182 304.228 157.662 304.423 157.272 304.787 cv
156.882 305.151 156.648 305.671 156.596 306.334 cv
160.756 306.334 li
ef
166.518 304.228 mo
165.894 304.228 165.4 304.475 165.036 304.969 cv
164.672 305.463 164.49 306.126 164.49 306.971 cv
164.49 307.829 164.659 308.492 165.023 308.986 cv
165.387 309.48 165.881 309.714 166.518 309.714 cv
167.142 309.714 167.636 309.48 168 308.986 cv
168.364 308.492 168.546 307.829 168.546 306.971 cv
168.546 306.139 168.364 305.463 168 304.969 cv
167.636 304.475 167.142 304.228 166.518 304.228 cv
166.518 303.24 mo
167.532 303.24 168.325 303.578 168.91 304.228 cv
169.482 304.891 169.781 305.801 169.781 306.971 cv
169.781 308.141 169.482 309.051 168.91 309.701 cv
168.325 310.364 167.532 310.689 166.518 310.689 cv
165.491 310.689 164.685 310.364 164.113 309.701 cv
163.541 309.051 163.255 308.141 163.255 306.971 cv
163.255 305.801 163.541 304.891 164.113 304.228 cv
164.685 303.578 165.491 303.24 166.518 303.24 cv
ef
171.565 307.712 mo
171.565 303.409 li
172.735 303.409 li
172.735 307.673 li
172.735 308.349 172.865 308.843 173.125 309.181 cv
173.385 309.519 173.775 309.688 174.308 309.688 cv
174.932 309.688 175.439 309.493 175.803 309.09 cv
176.167 308.687 176.349 308.141 176.349 307.439 cv
176.349 303.409 li
177.519 303.409 li
177.519 310.52 li
176.349 310.52 li
176.349 309.428 li
176.063 309.87 175.725 310.182 175.361 310.39 cv
174.984 310.585 174.555 310.689 174.061 310.689 cv
173.242 310.689 172.618 310.442 172.202 309.935 cv
171.773 309.441 171.565 308.7 171.565 307.712 cv
174.503 303.24 mo
174.503 303.24 li
ef
184.499 303.617 mo
184.499 304.722 li
184.161 304.566 183.823 304.436 183.472 304.345 cv
183.108 304.267 182.744 304.215 182.367 304.215 cv
181.782 304.215 181.34 304.306 181.054 304.488 cv
180.768 304.67 180.625 304.93 180.625 305.281 cv
180.625 305.554 180.729 305.762 180.937 305.918 cv
181.145 306.074 181.561 306.23 182.185 306.36 cv
182.588 306.451 li
183.42 306.633 184.005 306.893 184.356 307.205 cv
184.694 307.53 184.876 307.985 184.876 308.557 cv
184.876 309.22 184.616 309.74 184.096 310.117 cv
183.576 310.507 182.848 310.689 181.938 310.689 cv
181.548 310.689 181.158 310.65 180.742 310.585 cv
180.326 310.52 179.897 310.416 179.442 310.26 cv
179.442 309.051 li
179.871 309.285 180.3 309.454 180.716 309.558 cv
181.132 309.675 181.548 309.727 181.964 309.727 cv
182.51 309.727 182.939 309.636 183.238 309.454 cv
183.524 309.272 183.68 308.999 183.68 308.648 cv
183.68 308.336 183.563 308.089 183.355 307.92 cv
183.147 307.751 182.679 307.582 181.951 307.426 cv
181.548 307.335 li
180.82 307.179 180.287 306.945 179.975 306.633 cv
179.65 306.321 179.494 305.892 179.494 305.333 cv
179.494 304.67 179.728 304.15 180.196 303.786 cv
180.664 303.422 181.34 303.24 182.224 303.24 cv
182.653 303.24 183.056 303.279 183.446 303.344 cv
183.823 303.409 184.174 303.5 184.499 303.617 cv
ef
198.032 301.771 mo
198.032 303.123 li
197.59 302.733 197.135 302.434 196.641 302.226 cv
196.147 302.031 195.64 301.927 195.094 301.927 cv
194.002 301.927 193.17 302.265 192.598 302.928 cv
192.026 303.591 191.74 304.54 191.74 305.788 cv
191.74 307.036 192.026 307.998 192.598 308.661 cv
193.17 309.324 194.002 309.649 195.094 309.649 cv
195.64 309.649 196.147 309.558 196.641 309.35 cv
197.135 309.155 197.59 308.856 198.032 308.453 cv
198.032 309.792 li
197.577 310.104 197.096 310.325 196.602 310.468 cv
196.108 310.611 195.575 310.689 195.016 310.689 cv
193.586 310.689 192.455 310.26 191.623 309.389 cv
190.791 308.518 190.388 307.322 190.388 305.788 cv
190.388 304.267 190.791 303.071 191.623 302.187 cv
192.455 301.316 193.586 300.874 195.016 300.874 cv
195.588 300.874 196.121 300.952 196.615 301.095 cv
197.109 301.251 197.59 301.472 198.032 301.771 cv
ef
200.002 310.52 mo
201.172 310.52 li
201.172 300.64 li
200.002 300.64 li
cp
f
203.485 307.712 mo
203.485 303.409 li
204.655 303.409 li
204.655 307.673 li
204.655 308.349 204.785 308.843 205.045 309.181 cv
205.305 309.519 205.695 309.688 206.228 309.688 cv
206.852 309.688 207.359 309.493 207.723 309.09 cv
208.087 308.687 208.269 308.141 208.269 307.439 cv
208.269 303.409 li
209.439 303.409 li
209.439 310.52 li
208.269 310.52 li
208.269 309.428 li
207.983 309.87 207.645 310.182 207.281 310.39 cv
206.904 310.585 206.475 310.689 205.981 310.689 cv
205.162 310.689 204.538 310.442 204.122 309.935 cv
203.693 309.441 203.485 308.7 203.485 307.712 cv
206.423 303.24 mo
206.423 303.24 li
ef
216.299 303.617 mo
216.299 304.722 li
215.961 304.566 215.623 304.436 215.272 304.345 cv
214.908 304.267 214.544 304.215 214.167 304.215 cv
213.582 304.215 213.14 304.306 212.854 304.488 cv
212.568 304.67 212.425 304.93 212.425 305.281 cv
212.425 305.554 212.529 305.762 212.737 305.918 cv
212.945 306.074 213.361 306.23 213.985 306.36 cv
214.388 306.451 li
215.22 306.633 215.805 306.893 216.156 307.205 cv
216.494 307.53 216.676 307.985 216.676 308.557 cv
216.676 309.22 216.416 309.74 215.896 310.117 cv
215.376 310.507 214.648 310.689 213.738 310.689 cv
213.348 310.689 212.958 310.65 212.542 310.585 cv
212.126 310.52 211.697 310.416 211.242 310.26 cv
211.242 309.051 li
211.671 309.285 212.1 309.454 212.516 309.558 cv
212.932 309.675 213.348 309.727 213.764 309.727 cv
214.31 309.727 214.739 309.636 215.038 309.454 cv
215.324 309.272 215.48 308.999 215.48 308.648 cv
215.48 308.336 215.363 308.089 215.155 307.92 cv
214.947 307.751 214.479 307.582 213.751 307.426 cv
213.348 307.335 li
212.62 307.179 212.087 306.945 211.775 306.633 cv
211.45 306.321 211.294 305.892 211.294 305.333 cv
211.294 304.67 211.528 304.15 211.996 303.786 cv
212.464 303.422 213.14 303.24 214.024 303.24 cv
214.453 303.24 214.856 303.279 215.246 303.344 cv
215.623 303.409 215.974 303.5 216.299 303.617 cv
ef
219.759 301.394 mo
219.759 303.409 li
222.164 303.409 li
222.164 304.319 li
219.759 304.319 li
219.759 308.18 li
219.759 308.765 219.837 309.142 219.993 309.298 cv
220.149 309.467 220.474 309.545 220.968 309.545 cv
222.164 309.545 li
222.164 310.52 li
220.968 310.52 li
220.058 310.52 219.434 310.351 219.096 310.013 cv
218.758 309.675 218.589 309.064 218.589 308.18 cv
218.589 304.319 li
217.731 304.319 li
217.731 303.409 li
218.589 303.409 li
218.589 301.394 li
219.759 301.394 li
ef
229.726 306.672 mo
229.726 307.244 li
224.357 307.244 li
224.409 308.05 224.643 308.674 225.085 309.09 cv
225.514 309.506 226.112 309.714 226.892 309.714 cv
227.334 309.714 227.776 309.662 228.192 309.558 cv
228.608 309.454 229.037 309.285 229.453 309.051 cv
229.453 310.156 li
229.037 310.338 228.608 310.481 228.166 310.559 cv
227.724 310.637 227.269 310.689 226.827 310.689 cv
225.683 310.689 224.786 310.364 224.123 309.714 cv
223.46 309.064 223.135 308.167 223.135 307.036 cv
223.135 305.879 223.447 304.956 224.071 304.267 cv
224.695 303.591 225.553 303.24 226.619 303.24 cv
227.581 303.24 228.335 303.552 228.894 304.163 cv
229.44 304.787 229.726 305.619 229.726 306.672 cv
228.556 306.334 mo
228.543 305.697 228.361 305.19 228.023 304.8 cv
227.672 304.423 227.204 304.228 226.632 304.228 cv
225.982 304.228 225.462 304.423 225.072 304.787 cv
224.682 305.151 224.448 305.671 224.396 306.334 cv
228.556 306.334 li
ef
235.803 304.501 mo
235.673 304.423 235.53 304.371 235.374 304.332 cv
235.218 304.306 235.049 304.28 234.867 304.28 cv
234.204 304.28 233.697 304.501 233.346 304.93 cv
232.982 305.359 232.813 305.97 232.813 306.776 cv
232.813 310.52 li
231.643 310.52 li
231.643 303.409 li
232.813 303.409 li
232.813 304.514 li
233.047 304.085 233.372 303.76 233.762 303.552 cv
234.152 303.344 234.633 303.24 235.205 303.24 cv
235.283 303.24 235.374 303.253 235.478 303.253 cv
235.569 303.266 235.673 303.279 235.803 303.305 cv
235.803 304.501 li
ef
346.907 293.617 mo
346.907 297.117 li
f
346.907 293.617 mo
346.907 297.117 li
@
256.214 301.043 mo
257.501 301.043 li
257.501 304.93 li
262.155 304.93 li
262.155 301.043 li
263.442 301.043 li
263.442 310.52 li
262.155 310.52 li
262.155 306.009 li
257.501 306.009 li
257.501 310.52 li
256.214 310.52 li
256.214 301.043 li
ef
266.002 303.409 mo
267.172 303.409 li
267.172 310.52 li
266.002 310.52 li
266.002 303.409 li
266.002 300.64 mo
266.002 300.64 mo
267.172 300.64 li
267.172 302.122 li
266.002 302.122 li
cp
ef
274.282 306.88 mo
274.282 306.048 274.1 305.385 273.762 304.917 cv
273.411 304.449 272.917 304.215 272.293 304.215 cv
271.669 304.215 271.175 304.449 270.824 304.917 cv
270.473 305.385 270.304 306.048 270.304 306.88 cv
270.304 307.725 270.473 308.375 270.824 308.843 cv
271.175 309.311 271.669 309.545 272.293 309.545 cv
272.917 309.545 273.411 309.311 273.762 308.843 cv
274.1 308.375 274.282 307.725 274.282 306.88 cv
275.452 309.636 mo
275.452 310.832 275.179 311.729 274.646 312.327 cv
274.1 312.912 273.281 313.211 272.176 313.211 cv
271.76 313.211 271.383 313.172 271.019 313.12 cv
270.655 313.055 270.291 312.964 269.953 312.834 cv
269.953 311.703 li
270.291 311.885 270.629 312.015 270.967 312.106 cv
271.305 312.197 271.643 312.249 271.994 312.249 cv
272.748 312.249 273.32 312.041 273.71 311.651 cv
274.087 311.248 274.282 310.65 274.282 309.844 cv
274.282 309.272 li
274.035 309.688 273.723 310 273.346 310.208 cv
272.969 310.416 272.527 310.52 272.007 310.52 cv
271.123 310.52 270.421 310.195 269.888 309.532 cv
269.355 308.869 269.095 307.985 269.095 306.88 cv
269.095 305.788 269.355 304.904 269.888 304.241 cv
270.421 303.578 271.123 303.24 272.007 303.24 cv
272.527 303.24 272.969 303.344 273.346 303.552 cv
273.723 303.76 274.035 304.072 274.282 304.488 cv
274.282 303.409 li
275.452 303.409 li
275.452 309.636 li
ef
283.677 306.23 mo
283.677 310.52 li
282.507 310.52 li
282.507 306.269 li
282.507 305.593 282.364 305.099 282.104 304.761 cv
281.844 304.423 281.454 304.254 280.934 304.254 cv
280.297 304.254 279.803 304.462 279.439 304.865 cv
279.075 305.268 278.893 305.814 278.893 306.503 cv
278.893 310.52 li
277.723 310.52 li
277.723 300.64 li
278.893 300.64 li
278.893 304.514 li
279.166 304.098 279.491 303.773 279.881 303.565 cv
280.258 303.357 280.7 303.24 281.194 303.24 cv
282 303.24 282.624 303.5 283.04 304.007 cv
283.456 304.514 283.677 305.255 283.677 306.23 cv
ef
290.174 301.043 mo
291.461 301.043 li
291.461 304.93 li
296.115 304.93 li
296.115 301.043 li
297.402 301.043 li
297.402 310.52 li
296.115 310.52 li
296.115 306.009 li
291.461 306.009 li
291.461 310.52 li
290.174 310.52 li
290.174 301.043 li
ef
306.046 306.672 mo
306.046 307.244 li
300.677 307.244 li
300.729 308.05 300.963 308.674 301.405 309.09 cv
301.834 309.506 302.432 309.714 303.212 309.714 cv
303.654 309.714 304.096 309.662 304.512 309.558 cv
304.928 309.454 305.357 309.285 305.773 309.051 cv
305.773 310.156 li
305.357 310.338 304.928 310.481 304.486 310.559 cv
304.044 310.637 303.589 310.689 303.147 310.689 cv
302.003 310.689 301.106 310.364 300.443 309.714 cv
299.78 309.064 299.455 308.167 299.455 307.036 cv
299.455 305.879 299.767 304.956 300.391 304.267 cv
301.015 303.591 301.873 303.24 302.939 303.24 cv
303.901 303.24 304.655 303.552 305.214 304.163 cv
305.76 304.787 306.046 305.619 306.046 306.672 cv
304.876 306.334 mo
304.863 305.697 304.681 305.19 304.343 304.8 cv
303.992 304.423 303.524 304.228 302.952 304.228 cv
302.302 304.228 301.782 304.423 301.392 304.787 cv
301.002 305.151 300.768 305.671 300.716 306.334 cv
304.876 306.334 li
ef
309.159 301.394 mo
309.159 303.409 li
311.564 303.409 li
311.564 304.319 li
309.159 304.319 li
309.159 308.18 li
309.159 308.765 309.237 309.142 309.393 309.298 cv
309.549 309.467 309.874 309.545 310.368 309.545 cv
311.564 309.545 li
311.564 310.52 li
310.368 310.52 li
309.458 310.52 308.834 310.351 308.496 310.013 cv
308.158 309.675 307.989 309.064 307.989 308.18 cv
307.989 304.319 li
307.131 304.319 li
307.131 303.409 li
307.989 303.409 li
307.989 301.394 li
309.159 301.394 li
ef
319.126 306.672 mo
319.126 307.244 li
313.757 307.244 li
313.809 308.05 314.043 308.674 314.485 309.09 cv
314.914 309.506 315.512 309.714 316.292 309.714 cv
316.734 309.714 317.176 309.662 317.592 309.558 cv
318.008 309.454 318.437 309.285 318.853 309.051 cv
318.853 310.156 li
318.437 310.338 318.008 310.481 317.566 310.559 cv
317.124 310.637 316.669 310.689 316.227 310.689 cv
315.083 310.689 314.186 310.364 313.523 309.714 cv
312.86 309.064 312.535 308.167 312.535 307.036 cv
312.535 305.879 312.847 304.956 313.471 304.267 cv
314.095 303.591 314.953 303.24 316.019 303.24 cv
316.981 303.24 317.735 303.552 318.294 304.163 cv
318.84 304.787 319.126 305.619 319.126 306.672 cv
317.956 306.334 mo
317.943 305.697 317.761 305.19 317.423 304.8 cv
317.072 304.423 316.604 304.228 316.032 304.228 cv
315.382 304.228 314.862 304.423 314.472 304.787 cv
314.082 305.151 313.848 305.671 313.796 306.334 cv
317.956 306.334 li
ef
325.203 304.501 mo
325.073 304.423 324.93 304.371 324.774 304.332 cv
324.618 304.306 324.449 304.28 324.267 304.28 cv
323.604 304.28 323.097 304.501 322.746 304.93 cv
322.382 305.359 322.213 305.97 322.213 306.776 cv
322.213 310.52 li
321.043 310.52 li
321.043 303.409 li
322.213 303.409 li
322.213 304.514 li
322.447 304.085 322.772 303.76 323.162 303.552 cv
323.552 303.344 324.033 303.24 324.605 303.24 cv
324.683 303.24 324.774 303.253 324.878 303.253 cv
324.969 303.266 325.073 303.279 325.203 303.305 cv
325.203 304.501 li
ef
329.118 304.228 mo
328.494 304.228 328 304.475 327.636 304.969 cv
327.272 305.463 327.09 306.126 327.09 306.971 cv
327.09 307.829 327.259 308.492 327.623 308.986 cv
327.987 309.48 328.481 309.714 329.118 309.714 cv
329.742 309.714 330.236 309.48 330.6 308.986 cv
330.964 308.492 331.146 307.829 331.146 306.971 cv
331.146 306.139 330.964 305.463 330.6 304.969 cv
330.236 304.475 329.742 304.228 329.118 304.228 cv
329.118 303.24 mo
330.132 303.24 330.925 303.578 331.51 304.228 cv
332.082 304.891 332.381 305.801 332.381 306.971 cv
332.381 308.141 332.082 309.051 331.51 309.701 cv
330.925 310.364 330.132 310.689 329.118 310.689 cv
328.091 310.689 327.285 310.364 326.713 309.701 cv
326.141 309.051 325.855 308.141 325.855 306.971 cv
325.855 305.801 326.141 304.891 326.713 304.228 cv
327.285 303.578 328.091 303.24 329.118 303.24 cv
ef
339.082 306.88 mo
339.082 306.048 338.9 305.385 338.562 304.917 cv
338.211 304.449 337.717 304.215 337.093 304.215 cv
336.469 304.215 335.975 304.449 335.624 304.917 cv
335.273 305.385 335.104 306.048 335.104 306.88 cv
335.104 307.725 335.273 308.375 335.624 308.843 cv
335.975 309.311 336.469 309.545 337.093 309.545 cv
337.717 309.545 338.211 309.311 338.562 308.843 cv
338.9 308.375 339.082 307.725 339.082 306.88 cv
340.252 309.636 mo
340.252 310.832 339.979 311.729 339.446 312.327 cv
338.9 312.912 338.081 313.211 336.976 313.211 cv
336.56 313.211 336.183 313.172 335.819 313.12 cv
335.455 313.055 335.091 312.964 334.753 312.834 cv
334.753 311.703 li
335.091 311.885 335.429 312.015 335.767 312.106 cv
336.105 312.197 336.443 312.249 336.794 312.249 cv
337.548 312.249 338.12 312.041 338.51 311.651 cv
338.887 311.248 339.082 310.65 339.082 309.844 cv
339.082 309.272 li
338.835 309.688 338.523 310 338.146 310.208 cv
337.769 310.416 337.327 310.52 336.807 310.52 cv
335.923 310.52 335.221 310.195 334.688 309.532 cv
334.155 308.869 333.895 307.985 333.895 306.88 cv
333.895 305.788 334.155 304.904 334.688 304.241 cv
335.221 303.578 335.923 303.24 336.807 303.24 cv
337.327 303.24 337.769 303.344 338.146 303.552 cv
338.523 303.76 338.835 304.072 339.082 304.488 cv
339.082 303.409 li
340.252 303.409 li
340.252 309.636 li
ef
348.646 306.672 mo
348.646 307.244 li
343.277 307.244 li
343.329 308.05 343.563 308.674 344.005 309.09 cv
344.434 309.506 345.032 309.714 345.812 309.714 cv
346.254 309.714 346.696 309.662 347.112 309.558 cv
347.528 309.454 347.957 309.285 348.373 309.051 cv
348.373 310.156 li
347.957 310.338 347.528 310.481 347.086 310.559 cv
346.644 310.637 346.189 310.689 345.747 310.689 cv
344.603 310.689 343.706 310.364 343.043 309.714 cv
342.38 309.064 342.055 308.167 342.055 307.036 cv
342.055 305.879 342.367 304.956 342.991 304.267 cv
343.615 303.591 344.473 303.24 345.539 303.24 cv
346.501 303.24 347.255 303.552 347.814 304.163 cv
348.36 304.787 348.646 305.619 348.646 306.672 cv
347.476 306.334 mo
347.463 305.697 347.281 305.19 346.943 304.8 cv
346.592 304.423 346.124 304.228 345.552 304.228 cv
344.902 304.228 344.382 304.423 343.992 304.787 cv
343.602 305.151 343.368 305.671 343.316 306.334 cv
347.476 306.334 li
ef
356.517 306.23 mo
356.517 310.52 li
355.347 310.52 li
355.347 306.269 li
355.347 305.593 355.204 305.099 354.944 304.761 cv
354.684 304.423 354.294 304.254 353.774 304.254 cv
353.137 304.254 352.643 304.462 352.279 304.865 cv
351.915 305.268 351.733 305.814 351.733 306.503 cv
351.733 310.52 li
350.563 310.52 li
350.563 303.409 li
351.733 303.409 li
351.733 304.514 li
352.006 304.098 352.331 303.773 352.721 303.565 cv
353.098 303.357 353.54 303.24 354.034 303.24 cv
354.84 303.24 355.464 303.5 355.88 304.007 cv
356.296 304.514 356.517 305.255 356.517 306.23 cv
ef
364.966 306.672 mo
364.966 307.244 li
359.597 307.244 li
359.649 308.05 359.883 308.674 360.325 309.09 cv
360.754 309.506 361.352 309.714 362.132 309.714 cv
362.574 309.714 363.016 309.662 363.432 309.558 cv
363.848 309.454 364.277 309.285 364.693 309.051 cv
364.693 310.156 li
364.277 310.338 363.848 310.481 363.406 310.559 cv
362.964 310.637 362.509 310.689 362.067 310.689 cv
360.923 310.689 360.026 310.364 359.363 309.714 cv
358.7 309.064 358.375 308.167 358.375 307.036 cv
358.375 305.879 358.687 304.956 359.311 304.267 cv
359.935 303.591 360.793 303.24 361.859 303.24 cv
362.821 303.24 363.575 303.552 364.134 304.163 cv
364.68 304.787 364.966 305.619 364.966 306.672 cv
363.796 306.334 mo
363.783 305.697 363.601 305.19 363.263 304.8 cv
362.912 304.423 362.444 304.228 361.872 304.228 cv
361.222 304.228 360.702 304.423 360.312 304.787 cv
359.922 305.151 359.688 305.671 359.636 306.334 cv
363.796 306.334 li
ef
369.558 304.228 mo
368.934 304.228 368.44 304.475 368.076 304.969 cv
367.712 305.463 367.53 306.126 367.53 306.971 cv
367.53 307.829 367.699 308.492 368.063 308.986 cv
368.427 309.48 368.921 309.714 369.558 309.714 cv
370.182 309.714 370.676 309.48 371.04 308.986 cv
371.404 308.492 371.586 307.829 371.586 306.971 cv
371.586 306.139 371.404 305.463 371.04 304.969 cv
370.676 304.475 370.182 304.228 369.558 304.228 cv
369.558 303.24 mo
370.572 303.24 371.365 303.578 371.95 304.228 cv
372.522 304.891 372.821 305.801 372.821 306.971 cv
372.821 308.141 372.522 309.051 371.95 309.701 cv
371.365 310.364 370.572 310.689 369.558 310.689 cv
368.531 310.689 367.725 310.364 367.153 309.701 cv
366.581 309.051 366.295 308.141 366.295 306.971 cv
366.295 305.801 366.581 304.891 367.153 304.228 cv
367.725 303.578 368.531 303.24 369.558 303.24 cv
ef
374.725 307.712 mo
374.725 303.409 li
375.895 303.409 li
375.895 307.673 li
375.895 308.349 376.025 308.843 376.285 309.181 cv
376.545 309.519 376.935 309.688 377.468 309.688 cv
378.092 309.688 378.599 309.493 378.963 309.09 cv
379.327 308.687 379.509 308.141 379.509 307.439 cv
379.509 303.409 li
380.679 303.409 li
380.679 310.52 li
379.509 310.52 li
379.509 309.428 li
379.223 309.87 378.885 310.182 378.521 310.39 cv
378.144 310.585 377.715 310.689 377.221 310.689 cv
376.402 310.689 375.778 310.442 375.362 309.935 cv
374.933 309.441 374.725 308.7 374.725 307.712 cv
377.663 303.24 mo
377.663 303.24 li
ef
387.539 303.617 mo
387.539 304.722 li
387.201 304.566 386.863 304.436 386.512 304.345 cv
386.148 304.267 385.784 304.215 385.407 304.215 cv
384.822 304.215 384.38 304.306 384.094 304.488 cv
383.808 304.67 383.665 304.93 383.665 305.281 cv
383.665 305.554 383.769 305.762 383.977 305.918 cv
384.185 306.074 384.601 306.23 385.225 306.36 cv
385.628 306.451 li
386.46 306.633 387.045 306.893 387.396 307.205 cv
387.734 307.53 387.916 307.985 387.916 308.557 cv
387.916 309.22 387.656 309.74 387.136 310.117 cv
386.616 310.507 385.888 310.689 384.978 310.689 cv
384.588 310.689 384.198 310.65 383.782 310.585 cv
383.366 310.52 382.937 310.416 382.482 310.26 cv
382.482 309.051 li
382.911 309.285 383.34 309.454 383.756 309.558 cv
384.172 309.675 384.588 309.727 385.004 309.727 cv
385.55 309.727 385.979 309.636 386.278 309.454 cv
386.564 309.272 386.72 308.999 386.72 308.648 cv
386.72 308.336 386.603 308.089 386.395 307.92 cv
386.187 307.751 385.719 307.582 384.991 307.426 cv
384.588 307.335 li
383.86 307.179 383.327 306.945 383.015 306.633 cv
382.69 306.321 382.534 305.892 382.534 305.333 cv
382.534 304.67 382.768 304.15 383.236 303.786 cv
383.704 303.422 384.38 303.24 385.264 303.24 cv
385.693 303.24 386.096 303.279 386.486 303.344 cv
386.863 303.409 387.214 303.5 387.539 303.617 cv
ef
401.072 301.771 mo
401.072 303.123 li
400.63 302.733 400.175 302.434 399.681 302.226 cv
399.187 302.031 398.68 301.927 398.134 301.927 cv
397.042 301.927 396.21 302.265 395.638 302.928 cv
395.066 303.591 394.78 304.54 394.78 305.788 cv
394.78 307.036 395.066 307.998 395.638 308.661 cv
396.21 309.324 397.042 309.649 398.134 309.649 cv
398.68 309.649 399.187 309.558 399.681 309.35 cv
400.175 309.155 400.63 308.856 401.072 308.453 cv
401.072 309.792 li
400.617 310.104 400.136 310.325 399.642 310.468 cv
399.148 310.611 398.615 310.689 398.056 310.689 cv
396.626 310.689 395.495 310.26 394.663 309.389 cv
393.831 308.518 393.428 307.322 393.428 305.788 cv
393.428 304.267 393.831 303.071 394.663 302.187 cv
395.495 301.316 396.626 300.874 398.056 300.874 cv
398.628 300.874 399.161 300.952 399.655 301.095 cv
400.149 301.251 400.63 301.472 401.072 301.771 cv
ef
403.042 310.52 mo
404.212 310.52 li
404.212 300.64 li
403.042 300.64 li
cp
f
406.525 307.712 mo
406.525 303.409 li
407.695 303.409 li
407.695 307.673 li
407.695 308.349 407.825 308.843 408.085 309.181 cv
408.345 309.519 408.735 309.688 409.268 309.688 cv
409.892 309.688 410.399 309.493 410.763 309.09 cv
411.127 308.687 411.309 308.141 411.309 307.439 cv
411.309 303.409 li
412.479 303.409 li
412.479 310.52 li
411.309 310.52 li
411.309 309.428 li
411.023 309.87 410.685 310.182 410.321 310.39 cv
409.944 310.585 409.515 310.689 409.021 310.689 cv
408.202 310.689 407.578 310.442 407.162 309.935 cv
406.733 309.441 406.525 308.7 406.525 307.712 cv
409.463 303.24 mo
409.463 303.24 li
ef
419.339 303.617 mo
419.339 304.722 li
419.001 304.566 418.663 304.436 418.312 304.345 cv
417.948 304.267 417.584 304.215 417.207 304.215 cv
416.622 304.215 416.18 304.306 415.894 304.488 cv
415.608 304.67 415.465 304.93 415.465 305.281 cv
415.465 305.554 415.569 305.762 415.777 305.918 cv
415.985 306.074 416.401 306.23 417.025 306.36 cv
417.428 306.451 li
418.26 306.633 418.845 306.893 419.196 307.205 cv
419.534 307.53 419.716 307.985 419.716 308.557 cv
419.716 309.22 419.456 309.74 418.936 310.117 cv
418.416 310.507 417.688 310.689 416.778 310.689 cv
416.388 310.689 415.998 310.65 415.582 310.585 cv
415.166 310.52 414.737 310.416 414.282 310.26 cv
414.282 309.051 li
414.711 309.285 415.14 309.454 415.556 309.558 cv
415.972 309.675 416.388 309.727 416.804 309.727 cv
417.35 309.727 417.779 309.636 418.078 309.454 cv
418.364 309.272 418.52 308.999 418.52 308.648 cv
418.52 308.336 418.403 308.089 418.195 307.92 cv
417.987 307.751 417.519 307.582 416.791 307.426 cv
416.388 307.335 li
415.66 307.179 415.127 306.945 414.815 306.633 cv
414.49 306.321 414.334 305.892 414.334 305.333 cv
414.334 304.67 414.568 304.15 415.036 303.786 cv
415.504 303.422 416.18 303.24 417.064 303.24 cv
417.493 303.24 417.896 303.279 418.286 303.344 cv
418.663 303.409 419.014 303.5 419.339 303.617 cv
ef
422.799 301.394 mo
422.799 303.409 li
425.204 303.409 li
425.204 304.319 li
422.799 304.319 li
422.799 308.18 li
422.799 308.765 422.877 309.142 423.033 309.298 cv
423.189 309.467 423.514 309.545 424.008 309.545 cv
425.204 309.545 li
425.204 310.52 li
424.008 310.52 li
423.098 310.52 422.474 310.351 422.136 310.013 cv
421.798 309.675 421.629 309.064 421.629 308.18 cv
421.629 304.319 li
420.771 304.319 li
420.771 303.409 li
421.629 303.409 li
421.629 301.394 li
422.799 301.394 li
ef
432.766 306.672 mo
432.766 307.244 li
427.397 307.244 li
427.449 308.05 427.683 308.674 428.125 309.09 cv
428.554 309.506 429.152 309.714 429.932 309.714 cv
430.374 309.714 430.816 309.662 431.232 309.558 cv
431.648 309.454 432.077 309.285 432.493 309.051 cv
432.493 310.156 li
432.077 310.338 431.648 310.481 431.206 310.559 cv
430.764 310.637 430.309 310.689 429.867 310.689 cv
428.723 310.689 427.826 310.364 427.163 309.714 cv
426.5 309.064 426.175 308.167 426.175 307.036 cv
426.175 305.879 426.487 304.956 427.111 304.267 cv
427.735 303.591 428.593 303.24 429.659 303.24 cv
430.621 303.24 431.375 303.552 431.934 304.163 cv
432.48 304.787 432.766 305.619 432.766 306.672 cv
431.596 306.334 mo
431.583 305.697 431.401 305.19 431.063 304.8 cv
430.712 304.423 430.244 304.228 429.672 304.228 cv
429.022 304.228 428.502 304.423 428.112 304.787 cv
427.722 305.151 427.488 305.671 427.436 306.334 cv
431.596 306.334 li
ef
438.843 304.501 mo
438.713 304.423 438.57 304.371 438.414 304.332 cv
438.258 304.306 438.089 304.28 437.907 304.28 cv
437.244 304.28 436.737 304.501 436.386 304.93 cv
436.022 305.359 435.853 305.97 435.853 306.776 cv
435.853 310.52 li
434.683 310.52 li
434.683 303.409 li
435.853 303.409 li
435.853 304.514 li
436.087 304.085 436.412 303.76 436.802 303.552 cv
437.192 303.344 437.673 303.24 438.245 303.24 cv
438.323 303.24 438.414 303.253 438.518 303.253 cv
438.609 303.266 438.713 303.279 438.843 303.305 cv
438.843 304.501 li
ef
198.712 317.594 mo
200.098 317.594 li
200.098 321.78 li
205.11 321.78 li
205.11 317.594 li
206.496 317.594 li
206.496 327.8 li
205.11 327.8 li
205.11 322.942 li
200.098 322.942 li
200.098 327.8 li
198.712 327.8 li
198.712 317.594 li
ef
215.648 323.656 mo
215.648 324.272 li
209.866 324.272 li
209.922 325.14 210.174 325.812 210.65 326.26 cv
211.112 326.708 211.756 326.932 212.596 326.932 cv
213.072 326.932 213.548 326.876 213.996 326.764 cv
214.444 326.652 214.906 326.47 215.354 326.218 cv
215.354 327.408 li
214.906 327.604 214.444 327.758 213.968 327.842 cv
213.492 327.926 213.002 327.982 212.526 327.982 cv
211.294 327.982 210.328 327.632 209.614 326.932 cv
208.9 326.232 208.55 325.266 208.55 324.048 cv
208.55 322.802 208.886 321.808 209.558 321.066 cv
210.23 320.338 211.154 319.96 212.302 319.96 cv
213.338 319.96 214.15 320.296 214.752 320.954 cv
215.34 321.626 215.648 322.522 215.648 323.656 cv
214.388 323.292 mo
214.374 322.606 214.178 322.06 213.814 321.64 cv
213.436 321.234 212.932 321.024 212.316 321.024 cv
211.616 321.024 211.056 321.234 210.636 321.626 cv
210.216 322.018 209.964 322.578 209.908 323.292 cv
214.388 323.292 li
ef
218.982 317.972 mo
218.982 320.142 li
221.572 320.142 li
221.572 321.122 li
218.982 321.122 li
218.982 325.28 li
218.982 325.91 219.066 326.316 219.234 326.484 cv
219.402 326.666 219.752 326.75 220.284 326.75 cv
221.572 326.75 li
221.572 327.8 li
220.284 327.8 li
219.304 327.8 218.632 327.618 218.268 327.254 cv
217.904 326.89 217.722 326.232 217.722 325.28 cv
217.722 321.122 li
216.798 321.122 li
216.798 320.142 li
217.722 320.142 li
217.722 317.972 li
218.982 317.972 li
ef
229.808 323.656 mo
229.808 324.272 li
224.026 324.272 li
224.082 325.14 224.334 325.812 224.81 326.26 cv
225.272 326.708 225.916 326.932 226.756 326.932 cv
227.232 326.932 227.708 326.876 228.156 326.764 cv
228.604 326.652 229.066 326.47 229.514 326.218 cv
229.514 327.408 li
229.066 327.604 228.604 327.758 228.128 327.842 cv
227.652 327.926 227.162 327.982 226.686 327.982 cv
225.454 327.982 224.488 327.632 223.774 326.932 cv
223.06 326.232 222.71 325.266 222.71 324.048 cv
222.71 322.802 223.046 321.808 223.718 321.066 cv
224.39 320.338 225.314 319.96 226.462 319.96 cv
227.498 319.96 228.31 320.296 228.912 320.954 cv
229.5 321.626 229.808 322.522 229.808 323.656 cv
228.548 323.292 mo
228.534 322.606 228.338 322.06 227.974 321.64 cv
227.596 321.234 227.092 321.024 226.476 321.024 cv
225.776 321.024 225.216 321.234 224.796 321.626 cv
224.376 322.018 224.124 322.578 224.068 323.292 cv
228.548 323.292 li
ef
236.334 321.318 mo
236.194 321.234 236.04 321.178 235.872 321.136 cv
235.704 321.108 235.522 321.08 235.326 321.08 cv
234.612 321.08 234.066 321.318 233.688 321.78 cv
233.296 322.242 233.114 322.9 233.114 323.768 cv
233.114 327.8 li
231.854 327.8 li
231.854 320.142 li
233.114 320.142 li
233.114 321.332 li
233.366 320.87 233.716 320.52 234.136 320.296 cv
234.556 320.072 235.074 319.96 235.69 319.96 cv
235.774 319.96 235.872 319.974 235.984 319.974 cv
236.082 319.988 236.194 320.002 236.334 320.03 cv
236.334 321.318 li
ef
240.624 321.024 mo
239.952 321.024 239.42 321.29 239.028 321.822 cv
238.636 322.354 238.44 323.068 238.44 323.978 cv
238.44 324.902 238.622 325.616 239.014 326.148 cv
239.406 326.68 239.938 326.932 240.624 326.932 cv
241.296 326.932 241.828 326.68 242.22 326.148 cv
242.612 325.616 242.808 324.902 242.808 323.978 cv
242.808 323.082 242.612 322.354 242.22 321.822 cv
241.828 321.29 241.296 321.024 240.624 321.024 cv
240.624 319.96 mo
241.716 319.96 242.57 320.324 243.2 321.024 cv
243.816 321.738 244.138 322.718 244.138 323.978 cv
244.138 325.238 243.816 326.218 243.2 326.918 cv
242.57 327.632 241.716 327.982 240.624 327.982 cv
239.518 327.982 238.65 327.632 238.034 326.918 cv
237.418 326.218 237.11 325.238 237.11 323.978 cv
237.11 322.718 237.418 321.738 238.034 321.024 cv
238.65 320.324 239.518 319.96 240.624 319.96 cv
ef
251.216 323.88 mo
251.216 322.984 251.02 322.27 250.656 321.766 cv
250.278 321.262 249.746 321.01 249.074 321.01 cv
248.402 321.01 247.87 321.262 247.492 321.766 cv
247.114 322.27 246.932 322.984 246.932 323.88 cv
246.932 324.79 247.114 325.49 247.492 325.994 cv
247.87 326.498 248.402 326.75 249.074 326.75 cv
249.746 326.75 250.278 326.498 250.656 325.994 cv
251.02 325.49 251.216 324.79 251.216 323.88 cv
252.476 326.848 mo
252.476 328.136 252.182 329.102 251.608 329.746 cv
251.02 330.376 250.138 330.698 248.948 330.698 cv
248.5 330.698 248.094 330.656 247.702 330.6 cv
247.31 330.53 246.918 330.432 246.554 330.292 cv
246.554 329.074 li
246.918 329.27 247.282 329.41 247.646 329.508 cv
248.01 329.606 248.374 329.662 248.752 329.662 cv
249.564 329.662 250.18 329.438 250.6 329.018 cv
251.006 328.584 251.216 327.94 251.216 327.072 cv
251.216 326.456 li
250.95 326.904 250.614 327.24 250.208 327.464 cv
249.802 327.688 249.326 327.8 248.766 327.8 cv
247.814 327.8 247.058 327.45 246.484 326.736 cv
245.91 326.022 245.63 325.07 245.63 323.88 cv
245.63 322.704 245.91 321.752 246.484 321.038 cv
247.058 320.324 247.814 319.96 248.766 319.96 cv
249.326 319.96 249.802 320.072 250.208 320.296 cv
250.614 320.52 250.95 320.856 251.216 321.304 cv
251.216 320.142 li
252.476 320.142 li
252.476 326.848 li
ef
261.608 323.656 mo
261.608 324.272 li
255.826 324.272 li
255.882 325.14 256.134 325.812 256.61 326.26 cv
257.072 326.708 257.716 326.932 258.556 326.932 cv
259.032 326.932 259.508 326.876 259.956 326.764 cv
260.404 326.652 260.866 326.47 261.314 326.218 cv
261.314 327.408 li
260.866 327.604 260.404 327.758 259.928 327.842 cv
259.452 327.926 258.962 327.982 258.486 327.982 cv
257.254 327.982 256.288 327.632 255.574 326.932 cv
254.86 326.232 254.51 325.266 254.51 324.048 cv
254.51 322.802 254.846 321.808 255.518 321.066 cv
256.19 320.338 257.114 319.96 258.262 319.96 cv
259.298 319.96 260.11 320.296 260.712 320.954 cv
261.3 321.626 261.608 322.522 261.608 323.656 cv
260.348 323.292 mo
260.334 322.606 260.138 322.06 259.774 321.64 cv
259.396 321.234 258.892 321.024 258.276 321.024 cv
257.576 321.024 257.016 321.234 256.596 321.626 cv
256.176 322.018 255.924 322.578 255.868 323.292 cv
260.348 323.292 li
ef
270.066 323.18 mo
270.066 327.8 li
268.806 327.8 li
268.806 323.222 li
268.806 322.494 268.652 321.962 268.372 321.598 cv
268.092 321.234 267.672 321.052 267.112 321.052 cv
266.426 321.052 265.894 321.276 265.502 321.71 cv
265.11 322.144 264.914 322.732 264.914 323.474 cv
264.914 327.8 li
263.654 327.8 li
263.654 320.142 li
264.914 320.142 li
264.914 321.332 li
265.208 320.884 265.558 320.534 265.978 320.31 cv
266.384 320.086 266.86 319.96 267.392 319.96 cv
268.26 319.96 268.932 320.24 269.38 320.786 cv
269.828 321.332 270.066 322.13 270.066 323.18 cv
ef
279.128 323.656 mo
279.128 324.272 li
273.346 324.272 li
273.402 325.14 273.654 325.812 274.13 326.26 cv
274.592 326.708 275.236 326.932 276.076 326.932 cv
276.552 326.932 277.028 326.876 277.476 326.764 cv
277.924 326.652 278.386 326.47 278.834 326.218 cv
278.834 327.408 li
278.386 327.604 277.924 327.758 277.448 327.842 cv
276.972 327.926 276.482 327.982 276.006 327.982 cv
274.774 327.982 273.808 327.632 273.094 326.932 cv
272.38 326.232 272.03 325.266 272.03 324.048 cv
272.03 322.802 272.366 321.808 273.038 321.066 cv
273.71 320.338 274.634 319.96 275.782 319.96 cv
276.818 319.96 277.63 320.296 278.232 320.954 cv
278.82 321.626 279.128 322.522 279.128 323.656 cv
277.868 323.292 mo
277.854 322.606 277.658 322.06 277.294 321.64 cv
276.916 321.234 276.412 321.024 275.796 321.024 cv
275.096 321.024 274.536 321.234 274.116 321.626 cv
273.696 322.018 273.444 322.578 273.388 323.292 cv
277.868 323.292 li
ef
281.216 320.142 mo
282.476 320.142 li
282.476 327.8 li
281.216 327.8 li
281.216 320.142 li
281.216 317.16 mo
281.216 317.16 mo
282.476 317.16 li
282.476 318.756 li
281.216 318.756 li
cp
ef
286.302 317.972 mo
286.302 320.142 li
288.892 320.142 li
288.892 321.122 li
286.302 321.122 li
286.302 325.28 li
286.302 325.91 286.386 326.316 286.554 326.484 cv
286.722 326.666 287.072 326.75 287.604 326.75 cv
288.892 326.75 li
288.892 327.8 li
287.604 327.8 li
286.624 327.8 285.952 327.618 285.588 327.254 cv
285.224 326.89 285.042 326.232 285.042 325.28 cv
285.042 321.122 li
284.118 321.122 li
284.118 320.142 li
285.042 320.142 li
285.042 317.972 li
286.302 317.972 li
ef
293.768 328.5 mo
293.404 329.396 293.054 329.998 292.718 330.278 cv
292.382 330.558 291.934 330.698 291.374 330.698 cv
290.366 330.698 li
290.366 329.648 li
291.108 329.648 li
291.444 329.648 291.71 329.564 291.906 329.396 cv
292.102 329.228 292.312 328.85 292.55 328.234 cv
292.774 327.674 li
289.68 320.142 li
291.01 320.142 li
293.404 326.134 li
295.798 320.142 li
297.128 320.142 li
293.768 328.5 li
ef
53.932 293.617 mo
50.432 293.617 li
f
53.932 293.617 mo
50.432 293.617 li
@
29.112 289.584 mo
28.398 289.584 27.866 289.934 27.502 290.634 cv
27.138 291.334 26.97 292.384 26.97 293.784 cv
26.97 295.184 27.138 296.234 27.502 296.934 cv
27.866 297.634 28.398 297.984 29.112 297.984 cv
29.826 297.984 30.358 297.634 30.722 296.934 cv
31.072 296.234 31.254 295.184 31.254 293.784 cv
31.254 292.384 31.072 291.334 30.722 290.634 cv
30.358 289.934 29.826 289.584 29.112 289.584 cv
29.112 288.492 mo
30.246 288.492 31.114 288.954 31.73 289.85 cv
32.332 290.76 32.64 292.076 32.64 293.784 cv
32.64 295.506 32.332 296.822 31.73 297.718 cv
31.114 298.614 30.246 299.062 29.112 299.062 cv
27.964 299.062 27.082 298.614 26.48 297.718 cv
25.878 296.822 25.584 295.506 25.584 293.784 cv
25.584 292.076 25.878 290.76 26.48 289.85 cv
27.082 288.954 27.964 288.492 29.112 288.492 cv
ef
35.038 298.88 mo
36.48 298.88 li
36.48 297.144 li
35.038 297.144 li
cp
f
42.432 289.584 mo
41.718 289.584 41.186 289.934 40.822 290.634 cv
40.458 291.334 40.29 292.384 40.29 293.784 cv
40.29 295.184 40.458 296.234 40.822 296.934 cv
41.186 297.634 41.718 297.984 42.432 297.984 cv
43.146 297.984 43.678 297.634 44.042 296.934 cv
44.392 296.234 44.574 295.184 44.574 293.784 cv
44.574 292.384 44.392 291.334 44.042 290.634 cv
43.678 289.934 43.146 289.584 42.432 289.584 cv
42.432 288.492 mo
43.566 288.492 44.434 288.954 45.05 289.85 cv
45.652 290.76 45.96 292.076 45.96 293.784 cv
45.96 295.506 45.652 296.822 45.05 297.718 cv
44.434 298.614 43.566 299.062 42.432 299.062 cv
41.284 299.062 40.402 298.614 39.8 297.718 cv
39.198 296.822 38.904 295.506 38.904 293.784 cv
38.904 292.076 39.198 290.76 39.8 289.85 cv
40.402 288.954 41.284 288.492 42.432 288.492 cv
ef
53.932 239.072 mo
50.432 239.072 li
f
53.932 239.072 mo
50.432 239.072 li
@
29.112 235.104 mo
28.398 235.104 27.866 235.454 27.502 236.154 cv
27.138 236.854 26.97 237.904 26.97 239.304 cv
26.97 240.704 27.138 241.754 27.502 242.454 cv
27.866 243.154 28.398 243.504 29.112 243.504 cv
29.826 243.504 30.358 243.154 30.722 242.454 cv
31.072 241.754 31.254 240.704 31.254 239.304 cv
31.254 237.904 31.072 236.854 30.722 236.154 cv
30.358 235.454 29.826 235.104 29.112 235.104 cv
29.112 234.012 mo
30.246 234.012 31.114 234.474 31.73 235.37 cv
32.332 236.28 32.64 237.596 32.64 239.304 cv
32.64 241.026 32.332 242.342 31.73 243.238 cv
31.114 244.134 30.246 244.582 29.112 244.582 cv
27.964 244.582 27.082 244.134 26.48 243.238 cv
25.878 242.342 25.584 241.026 25.584 239.304 cv
25.584 237.596 25.878 236.28 26.48 235.37 cv
27.082 234.474 27.964 234.012 29.112 234.012 cv
ef
35.038 244.4 mo
36.48 244.4 li
36.48 242.664 li
35.038 242.664 li
cp
f
40.668 243.238 mo
45.484 243.238 li
45.484 244.4 li
39.002 244.4 li
39.002 243.238 li
39.52 242.706 40.234 241.978 41.144 241.054 cv
42.04 240.144 42.614 239.556 42.852 239.29 cv
43.3 238.8 43.608 238.38 43.776 238.03 cv
43.944 237.694 44.042 237.344 44.042 237.008 cv
44.042 236.476 43.846 236.028 43.468 235.692 cv
43.09 235.356 42.6 235.174 41.984 235.174 cv
41.55 235.174 41.088 235.258 40.612 235.398 cv
40.136 235.552 39.618 235.776 39.072 236.084 cv
39.072 234.684 li
39.632 234.46 40.15 234.292 40.626 234.18 cv
41.102 234.068 41.55 234.012 41.956 234.012 cv
43.006 234.012 43.846 234.278 44.476 234.81 cv
45.106 235.342 45.428 236.042 45.428 236.924 cv
45.428 237.344 45.344 237.75 45.19 238.114 cv
45.036 238.492 44.756 238.94 44.336 239.444 cv
44.224 239.584 43.86 239.962 43.244 240.592 cv
42.628 241.222 41.774 242.104 40.668 243.238 cv
ef
53.932 184.527 mo
50.432 184.527 li
f
53.932 184.527 mo
50.432 184.527 li
@
29.112 180.504 mo
28.398 180.504 27.866 180.854 27.502 181.554 cv
27.138 182.254 26.97 183.304 26.97 184.704 cv
26.97 186.104 27.138 187.154 27.502 187.854 cv
27.866 188.554 28.398 188.904 29.112 188.904 cv
29.826 188.904 30.358 188.554 30.722 187.854 cv
31.072 187.154 31.254 186.104 31.254 184.704 cv
31.254 183.304 31.072 182.254 30.722 181.554 cv
30.358 180.854 29.826 180.504 29.112 180.504 cv
29.112 179.412 mo
30.246 179.412 31.114 179.874 31.73 180.77 cv
32.332 181.68 32.64 182.996 32.64 184.704 cv
32.64 186.426 32.332 187.742 31.73 188.638 cv
31.114 189.534 30.246 189.982 29.112 189.982 cv
27.964 189.982 27.082 189.534 26.48 188.638 cv
25.878 187.742 25.584 186.426 25.584 184.704 cv
25.584 182.996 25.878 181.68 26.48 180.77 cv
27.082 179.874 27.964 179.412 29.112 179.412 cv
ef
35.038 189.8 mo
36.48 189.8 li
36.48 188.064 li
35.038 188.064 li
cp
f
43.272 180.798 mo
39.786 186.244 li
43.272 186.244 li
43.272 180.798 li
42.908 179.594 mo
44.644 179.594 li
44.644 186.244 li
46.1 186.244 li
46.1 187.392 li
44.644 187.392 li
44.644 189.8 li
43.272 189.8 li
43.272 187.392 li
38.666 187.392 li
38.666 186.062 li
42.908 179.594 li
ef
53.932 129.983 mo
50.432 129.983 li
f
53.932 129.983 mo
50.432 129.983 li
@
29.112 126.024 mo
28.398 126.024 27.866 126.374 27.502 127.074 cv
27.138 127.774 26.97 128.824 26.97 130.224 cv
26.97 131.624 27.138 132.674 27.502 133.374 cv
27.866 134.074 28.398 134.424 29.112 134.424 cv
29.826 134.424 30.358 134.074 30.722 133.374 cv
31.072 132.674 31.254 131.624 31.254 130.224 cv
31.254 128.824 31.072 127.774 30.722 127.074 cv
30.358 126.374 29.826 126.024 29.112 126.024 cv
29.112 124.932 mo
30.246 124.932 31.114 125.394 31.73 126.29 cv
32.332 127.2 32.64 128.516 32.64 130.224 cv
32.64 131.946 32.332 133.262 31.73 134.158 cv
31.114 135.054 30.246 135.502 29.112 135.502 cv
27.964 135.502 27.082 135.054 26.48 134.158 cv
25.878 133.262 25.584 131.946 25.584 130.224 cv
25.584 128.516 25.878 127.2 26.48 126.29 cv
27.082 125.394 27.964 124.932 29.112 124.932 cv
ef
35.038 135.32 mo
36.48 135.32 li
36.48 133.584 li
35.038 133.584 li
cp
f
42.6 129.664 mo
41.984 129.664 41.494 129.888 41.13 130.308 cv
40.766 130.728 40.584 131.316 40.584 132.044 cv
40.584 132.786 40.766 133.374 41.13 133.794 cv
41.494 134.214 41.984 134.424 42.6 134.424 cv
43.216 134.424 43.706 134.214 44.07 133.794 cv
44.434 133.374 44.616 132.786 44.616 132.044 cv
44.616 131.316 44.434 130.728 44.07 130.308 cv
43.706 129.888 43.216 129.664 42.6 129.664 cv
45.344 125.338 mo
45.344 126.598 li
44.994 126.43 44.644 126.304 44.294 126.22 cv
43.93 126.136 43.58 126.094 43.244 126.094 cv
42.32 126.094 41.62 126.402 41.144 127.018 cv
40.668 127.634 40.388 128.572 40.332 129.804 cv
40.598 129.412 40.934 129.104 41.34 128.894 cv
41.746 128.684 42.194 128.572 42.684 128.572 cv
43.706 128.572 44.518 128.894 45.106 129.51 cv
45.694 130.126 46.002 130.98 46.002 132.044 cv
46.002 133.094 45.68 133.934 45.064 134.564 cv
44.448 135.194 43.622 135.502 42.6 135.502 cv
41.424 135.502 40.514 135.054 39.898 134.158 cv
39.268 133.262 38.96 131.946 38.96 130.224 cv
38.96 128.614 39.338 127.326 40.108 126.374 cv
40.864 125.422 41.9 124.932 43.188 124.932 cv
43.524 124.932 43.874 124.974 44.238 125.03 cv
44.588 125.1 44.952 125.198 45.344 125.338 cv
ef
53.932 75.438 mo
50.432 75.438 li
f
53.932 75.438 mo
50.432 75.438 li
@
29.112 71.424 mo
28.398 71.424 27.866 71.774 27.502 72.474 cv
27.138 73.174 26.97 74.224 26.97 75.624 cv
26.97 77.024 27.138 78.074 27.502 78.774 cv
27.866 79.474 28.398 79.824 29.112 79.824 cv
29.826 79.824 30.358 79.474 30.722 78.774 cv
31.072 78.074 31.254 77.024 31.254 75.624 cv
31.254 74.224 31.072 73.174 30.722 72.474 cv
30.358 71.774 29.826 71.424 29.112 71.424 cv
29.112 70.332 mo
30.246 70.332 31.114 70.794 31.73 71.69 cv
32.332 72.6 32.64 73.916 32.64 75.624 cv
32.64 77.346 32.332 78.662 31.73 79.558 cv
31.114 80.454 30.246 80.902 29.112 80.902 cv
27.964 80.902 27.082 80.454 26.48 79.558 cv
25.878 78.662 25.584 77.346 25.584 75.624 cv
25.584 73.916 25.878 72.6 26.48 71.69 cv
27.082 70.794 27.964 70.332 29.112 70.332 cv
ef
35.038 80.72 mo
36.48 80.72 li
36.48 78.984 li
35.038 78.984 li
cp
f
42.432 75.876 mo
41.774 75.876 41.256 76.058 40.878 76.408 cv
40.5 76.758 40.318 77.234 40.318 77.85 cv
40.318 78.466 40.5 78.956 40.878 79.306 cv
41.256 79.656 41.774 79.824 42.432 79.824 cv
43.076 79.824 43.594 79.656 43.972 79.292 cv
44.35 78.942 44.546 78.466 44.546 77.85 cv
44.546 77.234 44.35 76.758 43.986 76.408 cv
43.608 76.058 43.09 75.876 42.432 75.876 cv
41.046 75.288 mo
40.458 75.148 39.996 74.868 39.66 74.462 cv
39.324 74.056 39.17 73.566 39.17 72.978 cv
39.17 72.166 39.45 71.522 40.038 71.046 cv
40.612 70.57 41.41 70.332 42.432 70.332 cv
43.44 70.332 44.238 70.57 44.826 71.046 cv
45.4 71.522 45.694 72.166 45.694 72.978 cv
45.694 73.566 45.526 74.056 45.19 74.462 cv
44.854 74.868 44.406 75.148 43.818 75.288 cv
44.476 75.442 44.994 75.75 45.372 76.198 cv
45.736 76.646 45.932 77.206 45.932 77.85 cv
45.932 78.844 45.624 79.6 45.022 80.118 cv
44.406 80.65 43.552 80.902 42.432 80.902 cv
41.298 80.902 40.43 80.65 39.828 80.118 cv
39.226 79.6 38.932 78.844 38.932 77.85 cv
38.932 77.206 39.114 76.646 39.492 76.198 cv
39.856 75.75 40.374 75.442 41.046 75.288 cv
40.542 73.104 mo
40.542 73.636 40.696 74.056 41.032 74.35 cv
41.368 74.644 41.83 74.784 42.432 74.784 cv
43.02 74.784 43.482 74.644 43.818 74.35 cv
44.154 74.056 44.322 73.636 44.322 73.104 cv
44.322 72.572 44.154 72.166 43.818 71.872 cv
43.482 71.578 43.02 71.424 42.432 71.424 cv
41.83 71.424 41.368 71.578 41.032 71.872 cv
40.696 72.166 40.542 72.572 40.542 73.104 cv
ef
53.932 20.893 mo
50.432 20.893 li
f
53.932 20.893 mo
50.432 20.893 li
@
26.396 25.078 mo
28.65 25.078 li
28.65 17.294 li
26.2 17.784 li
26.2 16.524 li
28.636 16.034 li
30.022 16.034 li
30.022 25.078 li
32.276 25.078 li
32.276 26.24 li
26.396 26.24 li
26.396 25.078 li
ef
35.038 26.24 mo
36.48 26.24 li
36.48 24.504 li
35.038 24.504 li
cp
f
42.432 16.944 mo
41.718 16.944 41.186 17.294 40.822 17.994 cv
40.458 18.694 40.29 19.744 40.29 21.144 cv
40.29 22.544 40.458 23.594 40.822 24.294 cv
41.186 24.994 41.718 25.344 42.432 25.344 cv
43.146 25.344 43.678 24.994 44.042 24.294 cv
44.392 23.594 44.574 22.544 44.574 21.144 cv
44.574 19.744 44.392 18.694 44.042 17.994 cv
43.678 17.294 43.146 16.944 42.432 16.944 cv
42.432 15.852 mo
43.566 15.852 44.434 16.314 45.05 17.21 cv
45.652 18.12 45.96 19.436 45.96 21.144 cv
45.96 22.866 45.652 24.182 45.05 25.078 cv
44.434 25.974 43.566 26.422 42.432 26.422 cv
41.284 26.422 40.402 25.974 39.8 25.078 cv
39.198 24.182 38.904 22.866 38.904 21.144 cv
38.904 19.436 39.198 18.12 39.8 17.21 cv
40.402 16.314 41.284 15.852 42.432 15.852 cv
ef
7.494 255.748 mo
7.494 253.886 li
16.034 249.364 li
7.494 249.364 li
7.494 248.02 li
17.7 248.02 li
17.7 249.882 li
9.16 254.404 li
17.7 254.404 li
17.7 255.748 li
7.494 255.748 li
ef
10.924 242.396 mo
10.924 243.068 11.19 243.6 11.722 243.992 cv
12.254 244.384 12.968 244.58 13.878 244.58 cv
14.802 244.58 15.516 244.398 16.048 244.006 cv
16.58 243.614 16.832 243.082 16.832 242.396 cv
16.832 241.724 16.58 241.192 16.048 240.8 cv
15.516 240.408 14.802 240.212 13.878 240.212 cv
12.982 240.212 12.254 240.408 11.722 240.8 cv
11.19 241.192 10.924 241.724 10.924 242.396 cv
9.86 242.396 mo
9.86 241.304 10.224 240.45 10.924 239.82 cv
11.638 239.204 12.618 238.882 13.878 238.882 cv
15.138 238.882 16.118 239.204 16.818 239.82 cv
17.532 240.45 17.882 241.304 17.882 242.396 cv
17.882 243.502 17.532 244.37 16.818 244.986 cv
16.118 245.602 15.138 245.91 13.878 245.91 cv
12.618 245.91 11.638 245.602 10.924 244.986 cv
10.224 244.37 9.86 243.502 9.86 242.396 cv
ef
11.218 232.406 mo
11.134 232.546 11.078 232.7 11.036 232.868 cv
11.008 233.036 10.98 233.218 10.98 233.414 cv
10.98 234.128 11.218 234.674 11.68 235.052 cv
12.142 235.444 12.8 235.626 13.668 235.626 cv
17.7 235.626 li
17.7 236.886 li
10.042 236.886 li
10.042 235.626 li
11.232 235.626 li
10.77 235.374 10.42 235.024 10.196 234.604 cv
9.972 234.184 9.86 233.666 9.86 233.05 cv
9.86 232.966 9.874 232.868 9.874 232.756 cv
9.888 232.658 9.902 232.546 9.93 232.406 cv
11.218 232.406 li
ef
11.512 225.12 mo
10.952 224.812 10.546 224.434 10.266 224 cv
10 223.566 9.86 223.048 9.86 222.446 cv
9.86 221.662 10.14 221.046 10.7 220.612 cv
11.26 220.178 12.058 219.954 13.08 219.954 cv
17.7 219.954 li
17.7 221.214 li
13.122 221.214 li
12.394 221.214 11.848 221.354 11.484 221.606 cv
11.134 221.872 10.952 222.264 10.952 222.796 cv
10.952 223.454 11.176 223.972 11.61 224.35 cv
12.044 224.728 12.632 224.91 13.374 224.91 cv
17.7 224.91 li
17.7 226.17 li
13.122 226.17 li
12.394 226.17 11.848 226.31 11.484 226.562 cv
11.134 226.828 10.952 227.234 10.952 227.766 cv
10.952 228.41 11.176 228.928 11.61 229.306 cv
12.044 229.684 12.632 229.866 13.374 229.866 cv
17.7 229.866 li
17.7 231.126 li
10.042 231.126 li
10.042 229.866 li
11.232 229.866 li
10.77 229.586 10.42 229.236 10.196 228.83 cv
9.972 228.438 9.86 227.962 9.86 227.402 cv
9.86 226.842 10 226.38 10.28 225.988 cv
10.56 225.596 10.98 225.316 11.512 225.12 cv
ef
13.85 213.918 mo
13.85 214.94 13.976 215.64 14.2 216.032 cv
14.438 216.424 14.83 216.62 15.39 216.62 cv
15.838 216.62 16.202 216.48 16.454 216.186 cv
16.72 215.892 16.846 215.486 16.846 214.982 cv
16.846 214.282 16.608 213.722 16.104 213.302 cv
15.614 212.882 14.956 212.672 14.13 212.672 cv
13.85 212.672 li
13.85 213.918 li
13.332 211.412 mo
17.7 211.412 li
17.7 212.672 li
16.538 212.672 li
17.014 212.966 17.35 213.33 17.56 213.75 cv
17.77 214.17 17.882 214.702 17.882 215.318 cv
17.882 216.102 17.672 216.732 17.238 217.194 cv
16.804 217.656 16.216 217.88 15.474 217.88 cv
14.62 217.88 13.976 217.6 13.528 217.012 cv
13.094 216.438 12.87 215.584 12.87 214.436 cv
12.87 212.672 li
12.744 212.672 li
12.17 212.672 11.722 212.868 11.4 213.246 cv
11.092 213.624 10.924 214.156 10.924 214.842 cv
10.924 215.29 10.98 215.71 11.092 216.13 cv
11.204 216.55 11.358 216.942 11.554 217.32 cv
10.392 217.32 li
10.224 216.872 10.084 216.424 10 215.99 cv
9.916 215.556 9.86 215.136 9.86 214.716 cv
9.86 213.61 10.154 212.784 10.728 212.238 cv
11.302 211.692 12.17 211.412 13.332 211.412 cv
ef
7.06 208.764 mo
17.7 208.764 li
17.7 207.504 li
7.06 207.504 li
cp
f
10.042 204.924 mo
10.042 203.664 li
17.7 203.664 li
17.7 204.924 li
10.042 204.924 li
7.06 204.924 mo
8.656 204.924 mo
7.06 204.924 li
7.06 203.664 li
8.656 203.664 li
cp
ef
10.042 201.63 mo
10.042 195.652 li
11.19 195.652 li
16.692 200.384 li
16.692 195.652 li
17.7 195.652 li
17.7 201.798 li
16.552 201.798 li
11.05 197.066 li
11.05 201.63 li
10.042 201.63 li
ef
13.556 187.092 mo
14.172 187.092 li
14.172 192.874 li
15.04 192.818 15.712 192.566 16.16 192.09 cv
16.608 191.628 16.832 190.984 16.832 190.144 cv
16.832 189.668 16.776 189.192 16.664 188.744 cv
16.552 188.296 16.37 187.834 16.118 187.386 cv
17.308 187.386 li
17.504 187.834 17.658 188.296 17.742 188.772 cv
17.826 189.248 17.882 189.738 17.882 190.214 cv
17.882 191.446 17.532 192.412 16.832 193.126 cv
16.132 193.84 15.166 194.19 13.948 194.19 cv
12.702 194.19 11.708 193.854 10.966 193.182 cv
10.238 192.51 9.86 191.586 9.86 190.438 cv
9.86 189.402 10.196 188.59 10.854 187.988 cv
11.526 187.4 12.422 187.092 13.556 187.092 cv
13.192 188.352 mo
12.506 188.366 11.96 188.562 11.54 188.926 cv
11.134 189.304 10.924 189.808 10.924 190.424 cv
10.924 191.124 11.134 191.684 11.526 192.104 cv
11.918 192.524 12.478 192.776 13.192 192.832 cv
13.192 188.352 li
ef
11.204 180.084 mo
7.06 180.084 li
7.06 178.824 li
17.7 178.824 li
17.7 180.084 li
16.552 180.084 li
17.014 180.35 17.35 180.686 17.56 181.092 cv
17.77 181.498 17.882 181.974 17.882 182.534 cv
17.882 183.458 17.518 184.214 16.79 184.802 cv
16.062 185.39 15.082 185.67 13.878 185.67 cv
12.674 185.67 11.708 185.39 10.966 184.802 cv
10.238 184.214 9.86 183.458 9.86 182.534 cv
9.86 181.974 9.972 181.498 10.196 181.092 cv
10.42 180.686 10.756 180.35 11.204 180.084 cv
13.878 184.368 mo
14.802 184.368 15.53 184.186 16.062 183.808 cv
16.594 183.43 16.846 182.898 16.846 182.226 cv
16.846 181.568 16.594 181.05 16.062 180.658 cv
15.53 180.28 14.802 180.084 13.878 180.084 cv
12.954 180.084 12.24 180.28 11.708 180.658 cv
11.176 181.05 10.91 181.568 10.91 182.226 cv
10.91 182.898 11.176 183.43 11.708 183.808 cv
12.24 184.186 12.954 184.368 13.878 184.368 cv
ef
11.204 166.644 mo
7.06 166.644 li
7.06 165.384 li
17.7 165.384 li
17.7 166.644 li
16.552 166.644 li
17.014 166.91 17.35 167.246 17.56 167.652 cv
17.77 168.058 17.882 168.534 17.882 169.094 cv
17.882 170.018 17.518 170.774 16.79 171.362 cv
16.062 171.95 15.082 172.23 13.878 172.23 cv
12.674 172.23 11.708 171.95 10.966 171.362 cv
10.238 170.774 9.86 170.018 9.86 169.094 cv
9.86 168.534 9.972 168.058 10.196 167.652 cv
10.42 167.246 10.756 166.91 11.204 166.644 cv
13.878 170.928 mo
14.802 170.928 15.53 170.746 16.062 170.368 cv
16.594 169.99 16.846 169.458 16.846 168.786 cv
16.846 168.128 16.594 167.61 16.062 167.218 cv
15.53 166.84 14.802 166.644 13.878 166.644 cv
12.954 166.644 12.24 166.84 11.708 167.218 cv
11.176 167.61 10.91 168.128 10.91 168.786 cv
10.91 169.458 11.176 169.99 11.708 170.368 cv
12.24 170.746 12.954 170.928 13.878 170.928 cv
ef
13.85 159.318 mo
13.85 160.34 13.976 161.04 14.2 161.432 cv
14.438 161.824 14.83 162.02 15.39 162.02 cv
15.838 162.02 16.202 161.88 16.454 161.586 cv
16.72 161.292 16.846 160.886 16.846 160.382 cv
16.846 159.682 16.608 159.122 16.104 158.702 cv
15.614 158.282 14.956 158.072 14.13 158.072 cv
13.85 158.072 li
13.85 159.318 li
13.332 156.812 mo
17.7 156.812 li
17.7 158.072 li
16.538 158.072 li
17.014 158.366 17.35 158.73 17.56 159.15 cv
17.77 159.57 17.882 160.102 17.882 160.718 cv
17.882 161.502 17.672 162.132 17.238 162.594 cv
16.804 163.056 16.216 163.28 15.474 163.28 cv
14.62 163.28 13.976 163 13.528 162.412 cv
13.094 161.838 12.87 160.984 12.87 159.836 cv
12.87 158.072 li
12.744 158.072 li
12.17 158.072 11.722 158.268 11.4 158.646 cv
11.092 159.024 10.924 159.556 10.924 160.242 cv
10.924 160.69 10.98 161.11 11.092 161.53 cv
11.204 161.95 11.358 162.342 11.554 162.72 cv
10.392 162.72 li
10.224 162.272 10.084 161.824 10 161.39 cv
9.916 160.956 9.86 160.536 9.86 160.116 cv
9.86 159.01 10.154 158.184 10.728 157.638 cv
11.302 157.092 12.17 156.812 13.332 156.812 cv
ef
7.872 153.038 mo
10.042 153.038 li
10.042 150.448 li
11.022 150.448 li
11.022 153.038 li
15.18 153.038 li
15.81 153.038 16.216 152.954 16.384 152.786 cv
16.566 152.618 16.65 152.268 16.65 151.736 cv
16.65 150.448 li
17.7 150.448 li
17.7 151.736 li
17.7 152.716 17.518 153.388 17.154 153.752 cv
16.79 154.116 16.132 154.298 15.18 154.298 cv
11.022 154.298 li
11.022 155.222 li
10.042 155.222 li
10.042 154.298 li
7.872 154.298 li
7.872 153.038 li
ef
13.85 145.278 mo
13.85 146.3 13.976 147 14.2 147.392 cv
14.438 147.784 14.83 147.98 15.39 147.98 cv
15.838 147.98 16.202 147.84 16.454 147.546 cv
16.72 147.252 16.846 146.846 16.846 146.342 cv
16.846 145.642 16.608 145.082 16.104 144.662 cv
15.614 144.242 14.956 144.032 14.13 144.032 cv
13.85 144.032 li
13.85 145.278 li
13.332 142.772 mo
17.7 142.772 li
17.7 144.032 li
16.538 144.032 li
17.014 144.326 17.35 144.69 17.56 145.11 cv
17.77 145.53 17.882 146.062 17.882 146.678 cv
17.882 147.462 17.672 148.092 17.238 148.554 cv
16.804 149.016 16.216 149.24 15.474 149.24 cv
14.62 149.24 13.976 148.96 13.528 148.372 cv
13.094 147.798 12.87 146.944 12.87 145.796 cv
12.87 144.032 li
12.744 144.032 li
12.17 144.032 11.722 144.228 11.4 144.606 cv
11.092 144.984 10.924 145.516 10.924 146.202 cv
10.924 146.65 10.98 147.07 11.092 147.49 cv
11.204 147.91 11.358 148.302 11.554 148.68 cv
10.392 148.68 li
10.224 148.232 10.084 147.784 10 147.35 cv
9.916 146.916 9.86 146.496 9.86 146.076 cv
9.86 144.97 10.154 144.144 10.728 143.598 cv
11.302 143.052 12.17 142.772 13.332 142.772 cv
ef
7.06 131.926 mo
8.11 131.926 li
8.11 133.13 li
8.11 133.578 8.208 133.9 8.39 134.068 cv
8.572 134.25 8.894 134.334 9.37 134.334 cv
10.042 134.334 li
10.042 132.262 li
11.022 132.262 li
11.022 134.334 li
17.7 134.334 li
17.7 135.594 li
11.022 135.594 li
11.022 136.798 li
10.042 136.798 li
10.042 135.594 li
9.51 135.594 li
8.67 135.594 8.04 135.398 7.648 135.006 cv
7.256 134.614 7.06 133.984 7.06 133.116 cv
7.06 131.926 li
ef
13.556 124.212 mo
14.172 124.212 li
14.172 129.994 li
15.04 129.938 15.712 129.686 16.16 129.21 cv
16.608 128.748 16.832 128.104 16.832 127.264 cv
16.832 126.788 16.776 126.312 16.664 125.864 cv
16.552 125.416 16.37 124.954 16.118 124.506 cv
17.308 124.506 li
17.504 124.954 17.658 125.416 17.742 125.892 cv
17.826 126.368 17.882 126.858 17.882 127.334 cv
17.882 128.566 17.532 129.532 16.832 130.246 cv
16.132 130.96 15.166 131.31 13.948 131.31 cv
12.702 131.31 11.708 130.974 10.966 130.302 cv
10.238 129.63 9.86 128.706 9.86 127.558 cv
9.86 126.522 10.196 125.71 10.854 125.108 cv
11.526 124.52 12.422 124.212 13.556 124.212 cv
13.192 125.472 mo
12.506 125.486 11.96 125.682 11.54 126.046 cv
11.134 126.424 10.924 126.928 10.924 127.544 cv
10.924 128.244 11.134 128.804 11.526 129.224 cv
11.918 129.644 12.478 129.896 13.192 129.952 cv
13.192 125.472 li
ef
7.872 120.998 mo
10.042 120.998 li
10.042 118.408 li
11.022 118.408 li
11.022 120.998 li
15.18 120.998 li
15.81 120.998 16.216 120.914 16.384 120.746 cv
16.566 120.578 16.65 120.228 16.65 119.696 cv
16.65 118.408 li
17.7 118.408 li
17.7 119.696 li
17.7 120.676 17.518 121.348 17.154 121.712 cv
16.79 122.076 16.132 122.258 15.18 122.258 cv
11.022 122.258 li
11.022 123.182 li
10.042 123.182 li
10.042 122.258 li
7.872 122.258 li
7.872 120.998 li
ef
10.336 111.208 mo
11.512 111.208 li
11.316 111.572 11.176 111.922 11.078 112.286 cv
10.98 112.65 10.924 113 10.924 113.364 cv
10.924 114.176 11.19 114.82 11.708 115.268 cv
12.226 115.716 12.954 115.94 13.878 115.94 cv
14.816 115.94 15.544 115.716 16.062 115.268 cv
16.58 114.82 16.832 114.176 16.832 113.364 cv
16.832 113 16.79 112.65 16.692 112.286 cv
16.594 111.922 16.44 111.572 16.244 111.208 cv
17.406 111.208 li
17.574 111.572 17.7 111.936 17.77 112.3 cv
17.84 112.678 17.882 113.084 17.882 113.504 cv
17.882 114.652 17.532 115.576 16.804 116.248 cv
16.09 116.934 15.11 117.27 13.878 117.27 cv
12.632 117.27 11.652 116.934 10.938 116.248 cv
10.224 115.562 9.86 114.624 9.86 113.42 cv
9.86 113.028 9.902 112.65 9.986 112.286 cv
10.07 111.922 10.182 111.558 10.336 111.208 cv
ef
13.08 102.674 mo
17.7 102.674 li
17.7 103.934 li
13.122 103.934 li
12.394 103.934 11.862 104.088 11.498 104.368 cv
11.134 104.648 10.952 105.068 10.952 105.628 cv
10.952 106.314 11.176 106.846 11.61 107.238 cv
12.044 107.63 12.632 107.826 13.374 107.826 cv
17.7 107.826 li
17.7 109.086 li
7.06 109.086 li
7.06 107.826 li
11.232 107.826 li
10.784 107.532 10.434 107.182 10.21 106.762 cv
9.986 106.356 9.86 105.88 9.86 105.348 cv
9.86 104.48 10.14 103.808 10.686 103.36 cv
11.232 102.912 12.03 102.674 13.08 102.674 cv
ef
10.042 100.164 mo
10.042 98.904 li
17.7 98.904 li
17.7 100.164 li
10.042 100.164 li
7.06 100.164 mo
8.656 100.164 mo
7.06 100.164 li
7.06 98.904 li
8.656 98.904 li
cp
ef
13.08 89.834 mo
17.7 89.834 li
17.7 91.094 li
13.122 91.094 li
12.394 91.094 11.862 91.248 11.498 91.528 cv
11.134 91.808 10.952 92.228 10.952 92.788 cv
10.952 93.474 11.176 94.006 11.61 94.398 cv
12.044 94.79 12.632 94.986 13.374 94.986 cv
17.7 94.986 li
17.7 96.246 li
10.042 96.246 li
10.042 94.986 li
11.232 94.986 li
10.784 94.692 10.434 94.342 10.21 93.922 cv
9.986 93.516 9.86 93.04 9.86 92.508 cv
9.86 91.64 10.14 90.968 10.686 90.52 cv
11.232 90.072 12.03 89.834 13.08 89.834 cv
ef
13.78 82.404 mo
12.884 82.404 12.17 82.6 11.666 82.964 cv
11.162 83.342 10.91 83.874 10.91 84.546 cv
10.91 85.218 11.162 85.75 11.666 86.128 cv
12.17 86.506 12.884 86.688 13.78 86.688 cv
14.69 86.688 15.39 86.506 15.894 86.128 cv
16.398 85.75 16.65 85.218 16.65 84.546 cv
16.65 83.874 16.398 83.342 15.894 82.964 cv
15.39 82.6 14.69 82.404 13.78 82.404 cv
16.748 81.144 mo
18.036 81.144 19.002 81.438 19.646 82.012 cv
20.276 82.6 20.598 83.482 20.598 84.672 cv
20.598 85.12 20.556 85.526 20.5 85.918 cv
20.43 86.31 20.332 86.702 20.192 87.066 cv
18.974 87.066 li
19.17 86.702 19.31 86.338 19.408 85.974 cv
19.506 85.61 19.562 85.246 19.562 84.868 cv
19.562 84.056 19.338 83.44 18.918 83.02 cv
18.484 82.614 17.84 82.404 16.972 82.404 cv
16.356 82.404 li
16.804 82.67 17.14 83.006 17.364 83.412 cv
17.588 83.818 17.7 84.294 17.7 84.854 cv
17.7 85.806 17.35 86.562 16.636 87.136 cv
15.922 87.71 14.97 87.99 13.78 87.99 cv
12.604 87.99 11.652 87.71 10.938 87.136 cv
10.224 86.562 9.86 85.806 9.86 84.854 cv
9.86 84.294 9.972 83.818 10.196 83.412 cv
10.42 83.006 10.756 82.67 11.204 82.404 cv
10.042 82.404 li
10.042 81.144 li
16.748 81.144 li
ef
7.872 72.758 mo
10.042 72.758 li
10.042 70.168 li
11.022 70.168 li
11.022 72.758 li
15.18 72.758 li
15.81 72.758 16.216 72.674 16.384 72.506 cv
16.566 72.338 16.65 71.988 16.65 71.456 cv
16.65 70.168 li
17.7 70.168 li
17.7 71.456 li
17.7 72.436 17.518 73.108 17.154 73.472 cv
16.79 73.836 16.132 74.018 15.18 74.018 cv
11.022 74.018 li
11.022 74.942 li
10.042 74.942 li
10.042 74.018 li
7.872 74.018 li
7.872 72.758 li
ef
10.042 68.604 mo
10.042 67.344 li
17.7 67.344 li
17.7 68.604 li
10.042 68.604 li
7.06 68.604 mo
8.656 68.604 mo
7.06 68.604 li
7.06 67.344 li
8.656 67.344 li
cp
ef
11.512 58.68 mo
10.952 58.372 10.546 57.994 10.266 57.56 cv
10 57.126 9.86 56.608 9.86 56.006 cv
9.86 55.222 10.14 54.606 10.7 54.172 cv
11.26 53.738 12.058 53.514 13.08 53.514 cv
17.7 53.514 li
17.7 54.774 li
13.122 54.774 li
12.394 54.774 11.848 54.914 11.484 55.166 cv
11.134 55.432 10.952 55.824 10.952 56.356 cv
10.952 57.014 11.176 57.532 11.61 57.91 cv
12.044 58.288 12.632 58.47 13.374 58.47 cv
17.7 58.47 li
17.7 59.73 li
13.122 59.73 li
12.394 59.73 11.848 59.87 11.484 60.122 cv
11.134 60.388 10.952 60.794 10.952 61.326 cv
10.952 61.97 11.176 62.488 11.61 62.866 cv
12.044 63.244 12.632 63.426 13.374 63.426 cv
17.7 63.426 li
17.7 64.686 li
10.042 64.686 li
10.042 63.426 li
11.232 63.426 li
10.77 63.146 10.42 62.796 10.196 62.39 cv
9.972 61.998 9.86 61.522 9.86 60.962 cv
9.86 60.402 10 59.94 10.28 59.548 cv
10.56 59.156 10.98 58.876 11.512 58.68 cv
ef
13.556 44.532 mo
14.172 44.532 li
14.172 50.314 li
15.04 50.258 15.712 50.006 16.16 49.53 cv
16.608 49.068 16.832 48.424 16.832 47.584 cv
16.832 47.108 16.776 46.632 16.664 46.184 cv
16.552 45.736 16.37 45.274 16.118 44.826 cv
17.308 44.826 li
17.504 45.274 17.658 45.736 17.742 46.212 cv
17.826 46.688 17.882 47.178 17.882 47.654 cv
17.882 48.886 17.532 49.852 16.832 50.566 cv
16.132 51.28 15.166 51.63 13.948 51.63 cv
12.702 51.63 11.708 51.294 10.966 50.622 cv
10.238 49.95 9.86 49.026 9.86 47.878 cv
9.86 46.842 10.196 46.03 10.854 45.428 cv
11.526 44.84 12.422 44.532 13.556 44.532 cv
13.192 45.792 mo
12.506 45.806 11.96 46.002 11.54 46.366 cv
11.134 46.744 10.924 47.248 10.924 47.864 cv
10.924 48.564 11.134 49.124 11.526 49.544 cv
11.918 49.964 12.478 50.216 13.192 50.272 cv
13.192 45.792 li
ef
2 lc
0 lj
53.932 293.617 mo
53.932 7.25702 li
@
440.881 293.617 mo
440.881 7.25702 li
@
53.932 293.617 mo
440.881 293.617 li
@
53.932 7.25702 mo
440.881 7.25702 li
@
60.932 59.273 mo
170.307 59.273 li
171.64 59.273 172.307 58.606 172.307 57.273 cv
172.307 14.257 li
172.307 12.924 171.64 12.257 170.307 12.257 cv
60.932 12.257 li
59.599 12.257 58.932 12.924 58.932 14.257 cv
58.932 57.273 li
58.932 58.606 59.599 59.273 60.932 59.273 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
60.932 59.273 mo
170.307 59.273 li
171.64 59.273 172.307 58.606 172.307 57.273 cv
172.307 14.257 li
172.307 12.924 171.64 12.257 170.307 12.257 cv
60.932 12.257 li
59.599 12.257 58.932 12.924 58.932 14.257 cv
58.932 57.273 li
58.932 58.606 59.599 59.273 60.932 59.273 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
62.932 23.851 mo
82.932 23.851 li
82.932 16.851 li
62.932 16.851 li
cp
.140536 .672541 .992279 .0229801 cmyk
f
62.932 23.851 mo
82.932 23.851 li
82.932 16.851 li
62.932 16.851 li
cp
gsave
grestore
/608540396.0 
<<
/ID /608540396.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608540396.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
91.88 16.55 mo
92.87 16.55 li
92.87 19.54 li
96.45 19.54 li
96.45 16.55 li
97.44 16.55 li
97.44 23.84 li
96.45 23.84 li
96.45 20.37 li
92.87 20.37 li
92.87 23.84 li
91.88 23.84 li
91.88 16.55 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
101.89 21.09 mo
101.16 21.09 100.66 21.18 100.38 21.34 cv
100.1 21.51 99.96 21.79 99.96 22.19 cv
99.96 22.51 100.06 22.77 100.27 22.95 cv
100.48 23.14 100.77 23.23 101.13 23.23 cv
101.63 23.23 102.03 23.06 102.33 22.7 cv
102.63 22.35 102.78 21.88 102.78 21.29 cv
102.78 21.09 li
101.89 21.09 li
103.68 20.72 mo
103.68 23.84 li
102.78 23.84 li
102.78 23.01 li
102.57 23.35 102.31 23.59 102.01 23.74 cv
101.71 23.89 101.33 23.97 100.89 23.97 cv
100.33 23.97 99.88 23.82 99.55 23.51 cv
99.22 23.2 99.06 22.78 99.06 22.25 cv
99.06 21.64 99.26 21.18 99.68 20.86 cv
100.09 20.55 100.7 20.39 101.52 20.39 cv
102.78 20.39 li
102.78 20.3 li
102.78 19.89 102.64 19.57 102.37 19.34 cv
102.1 19.12 101.72 19 101.23 19 cv
100.91 19 100.61 19.04 100.31 19.12 cv
100.01 19.2 99.73 19.31 99.46 19.45 cv
99.46 18.62 li
99.78 18.5 100.1 18.4 100.41 18.34 cv
100.72 18.28 101.02 18.24 101.32 18.24 cv
102.11 18.24 102.7 18.45 103.09 18.86 cv
103.48 19.27 103.68 19.89 103.68 20.72 cv
ef
109.12 19.2 mo
109.12 16.24 li
110.02 16.24 li
110.02 23.84 li
109.12 23.84 li
109.12 23.02 li
108.93 23.35 108.69 23.59 108.4 23.74 cv
108.11 23.89 107.77 23.97 107.37 23.97 cv
106.71 23.97 106.17 23.71 105.75 23.19 cv
105.33 22.67 105.13 21.97 105.13 21.11 cv
105.13 20.25 105.33 19.56 105.75 19.03 cv
106.17 18.51 106.71 18.24 107.37 18.24 cv
107.77 18.24 108.11 18.32 108.4 18.48 cv
108.69 18.64 108.93 18.88 109.12 19.2 cv
106.06 21.11 mo
106.06 21.77 106.19 22.29 106.46 22.67 cv
106.73 23.05 107.11 23.23 107.59 23.23 cv
108.06 23.23 108.43 23.05 108.71 22.67 cv
108.98 22.29 109.12 21.77 109.12 21.11 cv
109.12 20.45 108.98 19.94 108.71 19.56 cv
108.43 19.18 108.06 18.99 107.59 18.99 cv
107.11 18.99 106.73 19.18 106.46 19.56 cv
106.19 19.94 106.06 20.45 106.06 21.11 cv
ef
114 19 mo
113.52 19 113.14 19.19 112.86 19.57 cv
112.58 19.95 112.44 20.46 112.44 21.11 cv
112.44 21.77 112.57 22.28 112.85 22.66 cv
113.13 23.04 113.51 23.22 114 23.22 cv
114.48 23.22 114.86 23.04 115.14 22.66 cv
115.42 22.28 115.56 21.77 115.56 21.11 cv
115.56 20.47 115.42 19.95 115.14 19.57 cv
114.86 19.19 114.48 19 114 19 cv
114 18.24 mo
114.78 18.24 115.39 18.5 115.84 19 cv
116.28 19.51 116.51 20.21 116.51 21.11 cv
116.51 22.01 116.28 22.71 115.84 23.21 cv
115.39 23.72 114.78 23.97 114 23.97 cv
113.21 23.97 112.59 23.72 112.15 23.21 cv
111.71 22.71 111.49 22.01 111.49 21.11 cv
111.49 20.21 111.71 19.51 112.15 19 cv
112.59 18.5 113.21 18.24 114 18.24 cv
ef
120.12 19 mo
119.64 19 119.26 19.19 118.98 19.57 cv
118.7 19.95 118.56 20.46 118.56 21.11 cv
118.56 21.77 118.69 22.28 118.97 22.66 cv
119.25 23.04 119.63 23.22 120.12 23.22 cv
120.6 23.22 120.98 23.04 121.26 22.66 cv
121.54 22.28 121.68 21.77 121.68 21.11 cv
121.68 20.47 121.54 19.95 121.26 19.57 cv
120.98 19.19 120.6 19 120.12 19 cv
120.12 18.24 mo
120.9 18.24 121.51 18.5 121.96 19 cv
122.4 19.51 122.63 20.21 122.63 21.11 cv
122.63 22.01 122.4 22.71 121.96 23.21 cv
121.51 23.72 120.9 23.97 120.12 23.97 cv
119.33 23.97 118.71 23.72 118.27 23.21 cv
117.83 22.71 117.61 22.01 117.61 21.11 cv
117.61 20.21 117.83 19.51 118.27 19 cv
118.71 18.5 119.33 18.24 120.12 18.24 cv
ef
124.99 23.02 mo
124.99 25.91 li
124.09 25.91 li
124.09 18.37 li
124.99 18.37 li
124.99 19.2 li
125.17 18.88 125.41 18.64 125.7 18.48 cv
125.99 18.32 126.34 18.24 126.74 18.24 cv
127.4 18.24 127.94 18.51 128.36 19.03 cv
128.77 19.56 128.98 20.25 128.98 21.11 cv
128.98 21.97 128.77 22.67 128.36 23.19 cv
127.94 23.71 127.4 23.97 126.74 23.97 cv
126.34 23.97 125.99 23.89 125.7 23.74 cv
125.41 23.59 125.17 23.35 124.99 23.02 cv
128.05 21.11 mo
128.05 20.45 127.91 19.94 127.64 19.56 cv
127.36 19.18 126.99 18.99 126.52 18.99 cv
126.04 18.99 125.67 19.18 125.4 19.56 cv
125.12 19.94 124.99 20.45 124.99 21.11 cv
124.99 21.77 125.12 22.29 125.4 22.67 cv
125.67 23.05 126.04 23.23 126.52 23.23 cv
126.99 23.23 127.36 23.05 127.64 22.67 cv
127.91 22.29 128.05 21.77 128.05 21.11 cv
ef
130.03 21.5 mo
132.66 21.5 li
132.66 20.7 li
130.03 20.7 li
cp
f
137.68 19.2 mo
137.68 16.24 li
138.58 16.24 li
138.58 23.84 li
137.68 23.84 li
137.68 23.02 li
137.49 23.35 137.25 23.59 136.96 23.74 cv
136.67 23.89 136.33 23.97 135.93 23.97 cv
135.27 23.97 134.73 23.71 134.31 23.19 cv
133.89 22.67 133.69 21.97 133.69 21.11 cv
133.69 20.25 133.89 19.56 134.31 19.03 cv
134.73 18.51 135.27 18.24 135.93 18.24 cv
136.33 18.24 136.67 18.32 136.96 18.48 cv
137.25 18.64 137.49 18.88 137.68 19.2 cv
134.62 21.11 mo
134.62 21.77 134.75 22.29 135.02 22.67 cv
135.29 23.05 135.67 23.23 136.15 23.23 cv
136.62 23.23 136.99 23.05 137.27 22.67 cv
137.54 22.29 137.68 21.77 137.68 21.11 cv
137.68 20.45 137.54 19.94 137.27 19.56 cv
136.99 19.18 136.62 18.99 136.15 18.99 cv
135.67 18.99 135.29 19.18 135.02 19.56 cv
134.75 19.94 134.62 20.45 134.62 21.11 cv
ef
145.12 20.88 mo
145.12 21.32 li
140.99 21.32 li
141.03 21.94 141.21 22.42 141.55 22.74 cv
141.88 23.06 142.34 23.22 142.94 23.22 cv
143.28 23.22 143.62 23.18 143.94 23.1 cv
144.26 23.02 144.59 22.89 144.91 22.71 cv
144.91 23.56 li
144.59 23.7 144.26 23.81 143.92 23.87 cv
143.58 23.93 143.23 23.97 142.89 23.97 cv
142.01 23.97 141.32 23.72 140.81 23.22 cv
140.3 22.72 140.05 22.03 140.05 21.16 cv
140.05 20.27 140.29 19.56 140.77 19.03 cv
141.25 18.51 141.91 18.24 142.73 18.24 cv
143.47 18.24 144.05 18.48 144.48 18.95 cv
144.9 19.43 145.12 20.07 145.12 20.88 cv
144.22 20.62 mo
144.21 20.13 144.07 19.74 143.81 19.44 cv
143.54 19.15 143.18 19 142.74 19 cv
142.24 19 141.84 19.15 141.54 19.43 cv
141.24 19.71 141.06 20.11 141.02 20.62 cv
144.22 20.62 li
ef
149.33 16.24 mo
149.33 16.99 li
148.47 16.99 li
148.15 16.99 147.92 17.06 147.8 17.19 cv
147.67 17.32 147.61 17.55 147.61 17.89 cv
147.61 18.37 li
149.09 18.37 li
149.09 19.07 li
147.61 19.07 li
147.61 23.84 li
146.71 23.84 li
146.71 19.07 li
145.85 19.07 li
145.85 18.37 li
146.71 18.37 li
146.71 17.99 li
146.71 17.39 146.85 16.94 147.13 16.66 cv
147.41 16.38 147.86 16.24 148.48 16.24 cv
149.33 16.24 li
ef
152.53 21.09 mo
151.8 21.09 151.3 21.18 151.02 21.34 cv
150.74 21.51 150.6 21.79 150.6 22.19 cv
150.6 22.51 150.7 22.77 150.91 22.95 cv
151.12 23.14 151.41 23.23 151.77 23.23 cv
152.27 23.23 152.67 23.06 152.97 22.7 cv
153.27 22.35 153.42 21.88 153.42 21.29 cv
153.42 21.09 li
152.53 21.09 li
154.32 20.72 mo
154.32 23.84 li
153.42 23.84 li
153.42 23.01 li
153.21 23.35 152.95 23.59 152.65 23.74 cv
152.35 23.89 151.97 23.97 151.53 23.97 cv
150.97 23.97 150.52 23.82 150.19 23.51 cv
149.86 23.2 149.7 22.78 149.7 22.25 cv
149.7 21.64 149.9 21.18 150.32 20.86 cv
150.73 20.55 151.34 20.39 152.16 20.39 cv
153.42 20.39 li
153.42 20.3 li
153.42 19.89 153.28 19.57 153.01 19.34 cv
152.74 19.12 152.36 19 151.87 19 cv
151.55 19 151.25 19.04 150.95 19.12 cv
150.65 19.2 150.37 19.31 150.1 19.45 cv
150.1 18.62 li
150.42 18.5 150.74 18.4 151.05 18.34 cv
151.36 18.28 151.66 18.24 151.96 18.24 cv
152.75 18.24 153.34 18.45 153.73 18.86 cv
154.12 19.27 154.32 19.89 154.32 20.72 cv
ef
156.07 21.68 mo
156.07 18.37 li
156.97 18.37 li
156.97 21.65 li
156.97 22.17 157.07 22.55 157.27 22.81 cv
157.47 23.07 157.77 23.2 158.18 23.2 cv
158.66 23.2 159.05 23.05 159.33 22.74 cv
159.61 22.43 159.75 22.01 159.75 21.47 cv
159.75 18.37 li
160.65 18.37 li
160.65 23.84 li
159.75 23.84 li
159.75 23 li
159.53 23.34 159.27 23.58 158.99 23.74 cv
158.7 23.89 158.37 23.97 157.99 23.97 cv
157.36 23.97 156.88 23.78 156.56 23.39 cv
156.23 23.01 156.07 22.44 156.07 21.68 cv
158.33 18.24 mo
158.33 18.24 li
ef
162.52 23.84 mo
163.42 23.84 li
163.42 16.24 li
162.52 16.24 li
cp
f
166.17 16.82 mo
166.17 18.37 li
168.02 18.37 li
168.02 19.07 li
166.17 19.07 li
166.17 22.04 li
166.17 22.49 166.23 22.78 166.35 22.9 cv
166.47 23.03 166.72 23.09 167.1 23.09 cv
168.02 23.09 li
168.02 23.84 li
167.1 23.84 li
166.4 23.84 165.92 23.71 165.66 23.45 cv
165.4 23.19 165.27 22.72 165.27 22.04 cv
165.27 19.07 li
164.61 19.07 li
164.61 18.37 li
165.27 18.37 li
165.27 16.82 li
166.17 16.82 li
ef
62.932 38.523 mo
82.932 38.523 li
82.932 31.523 li
62.932 31.523 li
cp
0 .654261 .37409 0 cmyk
f
62.932 38.523 mo
82.932 38.523 li
82.932 31.523 li
62.932 31.523 li
cp
gsave
grestore
/608540592.0 
<<
/ID /608540592.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608540592.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
91.23 31.19 mo
92.23 31.19 li
93.76 37.35 li
95.29 31.19 li
96.4 31.19 li
97.93 37.35 li
99.46 31.19 li
100.46 31.19 li
98.63 38.48 li
97.39 38.48 li
95.85 32.15 li
94.3 38.48 li
93.06 38.48 li
91.23 31.19 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
104.28 32.16 mo
102.94 35.79 li
105.62 35.79 li
104.28 32.16 li
103.72 31.19 mo
104.84 31.19 li
107.62 38.48 li
106.59 38.48 li
105.93 36.61 li
102.64 36.61 li
101.98 38.48 li
100.94 38.48 li
103.72 31.19 li
ef
113.05 31.43 mo
113.05 32.39 li
112.67 32.21 112.32 32.08 111.99 31.99 cv
111.65 31.91 111.33 31.86 111.03 31.86 cv
110.49 31.86 110.07 31.97 109.78 32.17 cv
109.49 32.38 109.35 32.68 109.35 33.06 cv
109.35 33.38 109.44 33.63 109.64 33.79 cv
109.83 33.96 110.2 34.09 110.74 34.19 cv
111.34 34.31 li
112.07 34.45 112.61 34.7 112.96 35.05 cv
113.31 35.41 113.49 35.88 113.49 36.47 cv
113.49 37.18 113.25 37.71 112.78 38.07 cv
112.3 38.43 111.61 38.61 110.7 38.61 cv
110.35 38.61 109.98 38.57 109.59 38.5 cv
109.2 38.43 108.8 38.32 108.39 38.16 cv
108.39 37.14 li
108.79 37.37 109.18 37.54 109.56 37.65 cv
109.94 37.77 110.32 37.82 110.7 37.82 cv
111.26 37.82 111.69 37.71 112 37.49 cv
112.3 37.27 112.46 36.96 112.46 36.54 cv
112.46 36.18 112.35 35.9 112.13 35.7 cv
111.91 35.5 111.55 35.35 111.05 35.25 cv
110.45 35.13 li
109.71 34.99 109.18 34.76 108.85 34.44 cv
108.52 34.13 108.36 33.7 108.36 33.14 cv
108.36 32.5 108.58 31.99 109.04 31.62 cv
109.49 31.25 110.12 31.06 110.92 31.06 cv
111.26 31.06 111.6 31.09 111.96 31.15 cv
112.31 31.21 112.67 31.31 113.05 31.43 cv
ef
115.04 31.19 mo
116.03 31.19 li
116.03 34.18 li
119.61 34.18 li
119.61 31.19 li
120.6 31.19 li
120.6 38.48 li
119.61 38.48 li
119.61 35.01 li
116.03 35.01 li
116.03 38.48 li
115.04 38.48 li
115.04 31.19 li
ef
121.99 36.14 mo
124.62 36.14 li
124.62 35.34 li
121.99 35.34 li
cp
f
129.64 35.68 mo
129.64 35.04 129.5 34.53 129.24 34.17 cv
128.97 33.81 128.59 33.63 128.11 33.63 cv
127.63 33.63 127.25 33.81 126.98 34.17 cv
126.71 34.53 126.58 35.04 126.58 35.68 cv
126.58 36.33 126.71 36.83 126.98 37.19 cv
127.25 37.55 127.63 37.73 128.11 37.73 cv
128.59 37.73 128.97 37.55 129.24 37.19 cv
129.5 36.83 129.64 36.33 129.64 35.68 cv
130.54 37.8 mo
130.54 38.72 130.33 39.41 129.92 39.87 cv
129.5 40.32 128.87 40.55 128.02 40.55 cv
127.7 40.55 127.41 40.52 127.13 40.48 cv
126.85 40.43 126.57 40.36 126.31 40.26 cv
126.31 39.39 li
126.57 39.53 126.83 39.63 127.09 39.7 cv
127.35 39.77 127.61 39.81 127.88 39.81 cv
128.46 39.81 128.9 39.65 129.2 39.35 cv
129.49 39.04 129.64 38.58 129.64 37.96 cv
129.64 37.52 li
129.45 37.84 129.21 38.08 128.92 38.24 cv
128.63 38.4 128.29 38.48 127.89 38.48 cv
127.21 38.48 126.67 38.23 126.26 37.72 cv
125.85 37.21 125.65 36.53 125.65 35.68 cv
125.65 34.84 125.85 34.16 126.26 33.65 cv
126.67 33.14 127.21 32.88 127.89 32.88 cv
128.29 32.88 128.63 32.96 128.92 33.12 cv
129.21 33.28 129.45 33.52 129.64 33.84 cv
129.64 33.01 li
130.54 33.01 li
130.54 37.8 li
ef
135.57 33.85 mo
135.47 33.79 135.36 33.75 135.24 33.72 cv
135.12 33.7 134.99 33.68 134.85 33.68 cv
134.34 33.68 133.95 33.85 133.68 34.18 cv
133.4 34.51 133.27 34.98 133.27 35.6 cv
133.27 38.48 li
132.37 38.48 li
132.37 33.01 li
133.27 33.01 li
133.27 33.86 li
133.45 33.53 133.7 33.28 134 33.12 cv
134.3 32.96 134.67 32.88 135.11 32.88 cv
135.17 32.88 135.24 32.89 135.32 32.89 cv
135.39 32.9 135.47 32.91 135.57 32.93 cv
135.57 33.85 li
ef
141.16 35.52 mo
141.16 35.96 li
137.03 35.96 li
137.07 36.58 137.25 37.06 137.59 37.38 cv
137.92 37.7 138.38 37.86 138.98 37.86 cv
139.32 37.86 139.66 37.82 139.98 37.74 cv
140.3 37.66 140.63 37.53 140.95 37.35 cv
140.95 38.2 li
140.63 38.34 140.3 38.45 139.96 38.51 cv
139.62 38.57 139.27 38.61 138.93 38.61 cv
138.05 38.61 137.36 38.36 136.85 37.86 cv
136.34 37.36 136.09 36.67 136.09 35.8 cv
136.09 34.91 136.33 34.2 136.81 33.67 cv
137.29 33.15 137.95 32.88 138.77 32.88 cv
139.51 32.88 140.09 33.12 140.52 33.59 cv
140.94 34.07 141.16 34.71 141.16 35.52 cv
140.26 35.26 mo
140.25 34.77 140.11 34.38 139.85 34.08 cv
139.58 33.79 139.22 33.64 138.78 33.64 cv
138.28 33.64 137.88 33.79 137.58 34.07 cv
137.28 34.35 137.1 34.75 137.06 35.26 cv
140.26 35.26 li
ef
147.4 35.52 mo
147.4 35.96 li
143.27 35.96 li
143.31 36.58 143.49 37.06 143.83 37.38 cv
144.16 37.7 144.62 37.86 145.22 37.86 cv
145.56 37.86 145.9 37.82 146.22 37.74 cv
146.54 37.66 146.87 37.53 147.19 37.35 cv
147.19 38.2 li
146.87 38.34 146.54 38.45 146.2 38.51 cv
145.86 38.57 145.51 38.61 145.17 38.61 cv
144.29 38.61 143.6 38.36 143.09 37.86 cv
142.58 37.36 142.33 36.67 142.33 35.8 cv
142.33 34.91 142.57 34.2 143.05 33.67 cv
143.53 33.15 144.19 32.88 145.01 32.88 cv
145.75 32.88 146.33 33.12 146.76 33.59 cv
147.18 34.07 147.4 34.71 147.4 35.52 cv
146.5 35.26 mo
146.49 34.77 146.35 34.38 146.09 34.08 cv
145.82 33.79 145.46 33.64 145.02 33.64 cv
144.52 33.64 144.12 33.79 143.82 34.07 cv
143.52 34.35 143.34 34.75 143.3 35.26 cv
146.5 35.26 li
ef
152.44 33.84 mo
152.44 30.88 li
153.34 30.88 li
153.34 38.48 li
152.44 38.48 li
152.44 37.66 li
152.25 37.99 152.01 38.23 151.72 38.38 cv
151.43 38.53 151.09 38.61 150.69 38.61 cv
150.03 38.61 149.49 38.35 149.07 37.83 cv
148.65 37.31 148.45 36.61 148.45 35.75 cv
148.45 34.89 148.65 34.2 149.07 33.67 cv
149.49 33.15 150.03 32.88 150.69 32.88 cv
151.09 32.88 151.43 32.96 151.72 33.12 cv
152.01 33.28 152.25 33.52 152.44 33.84 cv
149.38 35.75 mo
149.38 36.41 149.51 36.93 149.78 37.31 cv
150.05 37.69 150.43 37.87 150.91 37.87 cv
151.38 37.87 151.75 37.69 152.03 37.31 cv
152.3 36.93 152.44 36.41 152.44 35.75 cv
152.44 35.09 152.3 34.58 152.03 34.2 cv
151.75 33.82 151.38 33.63 150.91 33.63 cv
150.43 33.63 150.05 33.82 149.78 34.2 cv
149.51 34.58 149.38 35.09 149.38 35.75 cv
ef
157.48 38.98 mo
157.22 39.62 156.97 40.05 156.73 40.25 cv
156.49 40.45 156.17 40.55 155.77 40.55 cv
155.05 40.55 li
155.05 39.8 li
155.58 39.8 li
155.82 39.8 156.01 39.74 156.15 39.62 cv
156.29 39.5 156.44 39.23 156.61 38.79 cv
156.77 38.39 li
154.56 33.01 li
155.51 33.01 li
157.22 37.29 li
158.93 33.01 li
159.88 33.01 li
157.48 38.98 li
ef
62.932 53.194 mo
82.932 53.194 li
82.932 46.194 li
62.932 46.194 li
cp
.621088 .109194 .980743 .0040589 cmyk
f
62.932 53.194 mo
82.932 53.194 li
82.932 46.194 li
62.932 46.194 li
cp
gsave
grestore
/608540788.0 
<<
/ID /608540788.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/608540788.0 /Pattern get_res
[1 0 0 -1 -.080994 .0570068 ]make_pattern set_pattern
f
2 vmreclaim
95.36 48 mo
95.26 47.96 95.16 47.92 95.04 47.89 cv
94.92 47.87 94.8 47.85 94.67 47.85 cv
94.19 47.85 93.77 48.04 93.41 48.4 cv
93.05 48.76 92.82 49.25 92.7 49.85 cv
92.15 52.64 li
91.25 52.64 li
92.32 47.17 li
93.22 47.17 li
93.05 48.02 li
93.28 47.71 93.56 47.47 93.9 47.3 cv
94.23 47.13 94.58 47.04 94.96 47.04 cv
95.05 47.04 95.14 47.05 95.24 47.06 cv
95.34 47.07 95.43 47.09 95.53 47.11 cv
95.36 48 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
95.43 45.35 mo
96.43 45.35 li
97.96 51.51 li
99.49 45.35 li
100.6 45.35 li
102.13 51.51 li
103.66 45.35 li
104.66 45.35 li
102.83 52.64 li
101.59 52.64 li
100.05 46.31 li
98.5 52.64 li
97.26 52.64 li
95.43 45.35 li
ef
108.36 46.32 mo
107.02 49.95 li
109.7 49.95 li
108.36 46.32 li
107.8 45.35 mo
108.92 45.35 li
111.7 52.64 li
110.67 52.64 li
110.01 50.77 li
106.72 50.77 li
106.06 52.64 li
105.02 52.64 li
107.8 45.35 li
ef
117.13 45.59 mo
117.13 46.55 li
116.75 46.37 116.4 46.24 116.07 46.15 cv
115.73 46.07 115.41 46.02 115.11 46.02 cv
114.57 46.02 114.15 46.13 113.86 46.33 cv
113.57 46.54 113.43 46.84 113.43 47.22 cv
113.43 47.54 113.52 47.79 113.72 47.95 cv
113.91 48.12 114.28 48.25 114.82 48.35 cv
115.42 48.47 li
116.15 48.61 116.69 48.86 117.04 49.21 cv
117.39 49.57 117.57 50.04 117.57 50.63 cv
117.57 51.34 117.33 51.87 116.86 52.23 cv
116.38 52.59 115.69 52.77 114.78 52.77 cv
114.43 52.77 114.06 52.73 113.67 52.66 cv
113.28 52.59 112.88 52.48 112.47 52.32 cv
112.47 51.3 li
112.87 51.53 113.26 51.7 113.64 51.81 cv
114.02 51.93 114.4 51.98 114.78 51.98 cv
115.34 51.98 115.77 51.87 116.08 51.65 cv
116.38 51.43 116.54 51.12 116.54 50.7 cv
116.54 50.34 116.43 50.06 116.21 49.86 cv
115.99 49.66 115.63 49.51 115.13 49.41 cv
114.53 49.29 li
113.79 49.15 113.26 48.92 112.93 48.6 cv
112.6 48.29 112.44 47.86 112.44 47.3 cv
112.44 46.66 112.66 46.15 113.12 45.78 cv
113.57 45.41 114.2 45.22 115 45.22 cv
115.34 45.22 115.68 45.25 116.04 45.31 cv
116.39 45.37 116.75 45.47 117.13 45.59 cv
ef
119.12 45.35 mo
120.11 45.35 li
120.11 48.34 li
123.69 48.34 li
123.69 45.35 li
124.68 45.35 li
124.68 52.64 li
123.69 52.64 li
123.69 49.17 li
120.11 49.17 li
120.11 52.64 li
119.12 52.64 li
119.12 45.35 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/608539220.0 /608539416.0 /608539612.0 /608539808.0 /608540004.0 
/608540200.0 /608540396.0 /608540592.0 /608540788.0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
