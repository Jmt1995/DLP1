%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPB423.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/22, 9:01:51
%%BoundingBox: 0 0 338 178
%%HiResBoundingBox: 0 0 338 178
%%CropBox: 0 0 338 178
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 959 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-09-22T09:01:33+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-22T09:01:33+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:da875e92-fb97-481c-8a8c-cfaae0b10fe7"
   xmpMM:InstanceID="uuid:3063acba-5163-4346-84c9-c221fbaf9e39">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivation7.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -178 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 178 li
338 178 li
338 0 li
cp
clp
.34702 177.55 mo
337.653 177.55 li
337.653 .449997 li
.34702 .449997 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
51.453 135.163 mo
330.453 135.163 li
330.453 7.651 li
51.453 7.651 li
cp
f
64.135 135.163 mo
64.135 138.663 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
64.135 135.163 mo
64.135 138.663 li
@
61.436 151.638 mo
63.69 151.638 li
63.69 143.854 li
61.24 144.344 li
61.24 143.084 li
63.676 142.594 li
65.062 142.594 li
65.062 151.638 li
67.316 151.638 li
67.316 152.8 li
61.436 152.8 li
61.436 151.638 li
ef
92.317 135.163 mo
92.317 138.663 li
f
92.317 135.163 mo
92.317 138.663 li
@
90.588 151.638 mo
95.404 151.638 li
95.404 152.8 li
88.922 152.8 li
88.922 151.638 li
89.44 151.106 90.154 150.378 91.064 149.454 cv
91.96 148.544 92.534 147.956 92.772 147.69 cv
93.22 147.2 93.528 146.78 93.696 146.43 cv
93.864 146.094 93.962 145.744 93.962 145.408 cv
93.962 144.876 93.766 144.428 93.388 144.092 cv
93.01 143.756 92.52 143.574 91.904 143.574 cv
91.47 143.574 91.008 143.658 90.532 143.798 cv
90.056 143.952 89.538 144.176 88.992 144.484 cv
88.992 143.084 li
89.552 142.86 90.07 142.692 90.546 142.58 cv
91.022 142.468 91.47 142.412 91.876 142.412 cv
92.926 142.412 93.766 142.678 94.396 143.21 cv
95.026 143.742 95.348 144.442 95.348 145.324 cv
95.348 145.744 95.264 146.15 95.11 146.514 cv
94.956 146.892 94.676 147.34 94.256 147.844 cv
94.144 147.984 93.78 148.362 93.164 148.992 cv
92.548 149.622 91.694 150.504 90.588 151.638 cv
ef
120.499 135.163 mo
120.499 138.663 li
f
120.499 135.163 mo
120.499 138.663 li
@
121.784 147.298 mo
122.442 147.438 122.96 147.732 123.324 148.18 cv
123.688 148.628 123.884 149.188 123.884 149.832 cv
123.884 150.84 123.534 151.624 122.848 152.17 cv
122.148 152.716 121.168 152.982 119.894 152.982 cv
119.46 152.982 119.012 152.94 118.564 152.856 cv
118.116 152.786 117.64 152.66 117.164 152.492 cv
117.164 151.162 li
117.542 151.386 117.962 151.554 118.424 151.666 cv
118.872 151.778 119.348 151.834 119.852 151.834 cv
120.72 151.834 121.378 151.666 121.826 151.33 cv
122.274 150.994 122.512 150.49 122.512 149.832 cv
122.512 149.244 122.302 148.768 121.882 148.432 cv
121.462 148.096 120.874 147.914 120.118 147.914 cv
118.928 147.914 li
118.928 146.78 li
120.174 146.78 li
120.846 146.78 121.364 146.654 121.728 146.374 cv
122.092 146.108 122.274 145.716 122.274 145.198 cv
122.274 144.68 122.078 144.274 121.714 143.994 cv
121.336 143.714 120.804 143.574 120.118 143.574 cv
119.74 143.574 119.334 143.616 118.9 143.7 cv
118.466 143.784 117.99 143.91 117.472 144.078 cv
117.472 142.846 li
117.99 142.706 118.48 142.594 118.942 142.524 cv
119.39 142.454 119.824 142.412 120.244 142.412 cv
121.28 142.412 122.106 142.65 122.722 143.126 cv
123.338 143.602 123.646 144.246 123.646 145.058 cv
123.646 145.618 123.478 146.094 123.156 146.486 cv
122.834 146.878 122.372 147.158 121.784 147.298 cv
ef
148.681 135.163 mo
148.681 138.663 li
f
148.681 135.163 mo
148.681 138.663 li
@
149.472 143.798 mo
145.986 149.244 li
149.472 149.244 li
149.472 143.798 li
149.108 142.594 mo
150.844 142.594 li
150.844 149.244 li
152.3 149.244 li
152.3 150.392 li
150.844 150.392 li
150.844 152.8 li
149.472 152.8 li
149.472 150.392 li
144.866 150.392 li
144.866 149.062 li
149.108 142.594 li
ef
176.862 135.163 mo
176.862 138.663 li
f
176.862 135.163 mo
176.862 138.663 li
@
173.892 142.594 mo
179.31 142.594 li
179.31 143.756 li
175.152 143.756 li
175.152 146.262 li
175.348 146.192 175.558 146.136 175.754 146.108 cv
175.95 146.08 176.16 146.052 176.356 146.052 cv
177.49 146.052 178.386 146.374 179.058 146.99 cv
179.73 147.62 180.066 148.46 180.066 149.524 cv
180.066 150.63 179.716 151.484 179.03 152.086 cv
178.344 152.688 177.378 152.982 176.146 152.982 cv
175.712 152.982 175.278 152.94 174.83 152.884 cv
174.382 152.814 173.934 152.716 173.458 152.562 cv
173.458 151.176 li
173.864 151.4 174.284 151.568 174.732 151.68 cv
175.166 151.792 175.628 151.834 176.118 151.834 cv
176.902 151.834 177.532 151.638 177.994 151.218 cv
178.442 150.798 178.68 150.238 178.68 149.524 cv
178.68 148.824 178.442 148.264 177.994 147.844 cv
177.532 147.424 176.902 147.214 176.118 147.214 cv
175.754 147.214 175.376 147.256 175.012 147.34 cv
174.648 147.424 174.27 147.55 173.892 147.718 cv
173.892 142.594 li
ef
205.044 135.163 mo
205.044 138.663 li
f
205.044 135.163 mo
205.044 138.663 li
@
205.2 147.144 mo
204.584 147.144 204.094 147.368 203.73 147.788 cv
203.366 148.208 203.184 148.796 203.184 149.524 cv
203.184 150.266 203.366 150.854 203.73 151.274 cv
204.094 151.694 204.584 151.904 205.2 151.904 cv
205.816 151.904 206.306 151.694 206.67 151.274 cv
207.034 150.854 207.216 150.266 207.216 149.524 cv
207.216 148.796 207.034 148.208 206.67 147.788 cv
206.306 147.368 205.816 147.144 205.2 147.144 cv
207.944 142.818 mo
207.944 144.078 li
207.594 143.91 207.244 143.784 206.894 143.7 cv
206.53 143.616 206.18 143.574 205.844 143.574 cv
204.92 143.574 204.22 143.882 203.744 144.498 cv
203.268 145.114 202.988 146.052 202.932 147.284 cv
203.198 146.892 203.534 146.584 203.94 146.374 cv
204.346 146.164 204.794 146.052 205.284 146.052 cv
206.306 146.052 207.118 146.374 207.706 146.99 cv
208.294 147.606 208.602 148.46 208.602 149.524 cv
208.602 150.574 208.28 151.414 207.664 152.044 cv
207.048 152.674 206.222 152.982 205.2 152.982 cv
204.024 152.982 203.114 152.534 202.498 151.638 cv
201.868 150.742 201.56 149.426 201.56 147.704 cv
201.56 146.094 201.938 144.806 202.708 143.854 cv
203.464 142.902 204.5 142.412 205.788 142.412 cv
206.124 142.412 206.474 142.454 206.838 142.51 cv
207.188 142.58 207.552 142.678 207.944 142.818 cv
ef
233.226 135.163 mo
233.226 138.663 li
f
233.226 135.163 mo
233.226 138.663 li
@
229.928 142.594 mo
236.494 142.594 li
236.494 143.182 li
232.784 152.8 li
231.342 152.8 li
234.828 143.756 li
229.928 143.756 li
229.928 142.594 li
ef
261.408 135.163 mo
261.408 138.663 li
f
261.408 135.163 mo
261.408 138.663 li
@
261.432 147.956 mo
260.774 147.956 260.256 148.138 259.878 148.488 cv
259.5 148.838 259.318 149.314 259.318 149.93 cv
259.318 150.546 259.5 151.036 259.878 151.386 cv
260.256 151.736 260.774 151.904 261.432 151.904 cv
262.076 151.904 262.594 151.736 262.972 151.372 cv
263.35 151.022 263.546 150.546 263.546 149.93 cv
263.546 149.314 263.35 148.838 262.986 148.488 cv
262.608 148.138 262.09 147.956 261.432 147.956 cv
260.046 147.368 mo
259.458 147.228 258.996 146.948 258.66 146.542 cv
258.324 146.136 258.17 145.646 258.17 145.058 cv
258.17 144.246 258.45 143.602 259.038 143.126 cv
259.612 142.65 260.41 142.412 261.432 142.412 cv
262.44 142.412 263.238 142.65 263.826 143.126 cv
264.4 143.602 264.694 144.246 264.694 145.058 cv
264.694 145.646 264.526 146.136 264.19 146.542 cv
263.854 146.948 263.406 147.228 262.818 147.368 cv
263.476 147.522 263.994 147.83 264.372 148.278 cv
264.736 148.726 264.932 149.286 264.932 149.93 cv
264.932 150.924 264.624 151.68 264.022 152.198 cv
263.406 152.73 262.552 152.982 261.432 152.982 cv
260.298 152.982 259.43 152.73 258.828 152.198 cv
258.226 151.68 257.932 150.924 257.932 149.93 cv
257.932 149.286 258.114 148.726 258.492 148.278 cv
258.856 147.83 259.374 147.522 260.046 147.368 cv
259.542 145.184 mo
259.542 145.716 259.696 146.136 260.032 146.43 cv
260.368 146.724 260.83 146.864 261.432 146.864 cv
262.02 146.864 262.482 146.724 262.818 146.43 cv
263.154 146.136 263.322 145.716 263.322 145.184 cv
263.322 144.652 263.154 144.246 262.818 143.952 cv
262.482 143.658 262.02 143.504 261.432 143.504 cv
260.83 143.504 260.368 143.658 260.032 143.952 cv
259.696 144.246 259.542 144.652 259.542 145.184 cv
ef
289.59 135.163 mo
289.59 138.663 li
f
289.59 135.163 mo
289.59 138.663 li
@
286.72 152.59 mo
286.72 151.33 li
287.056 151.498 287.406 151.624 287.77 151.708 cv
288.12 151.792 288.47 151.834 288.82 151.834 cv
289.716 151.834 290.416 151.54 290.892 150.924 cv
291.368 150.308 291.648 149.384 291.732 148.124 cv
291.452 148.516 291.116 148.824 290.724 149.034 cv
290.318 149.244 289.87 149.342 289.38 149.342 cv
288.344 149.342 287.532 149.034 286.944 148.418 cv
286.356 147.802 286.062 146.962 286.062 145.884 cv
286.062 144.848 286.37 144.008 286.986 143.364 cv
287.602 142.734 288.428 142.412 289.464 142.412 cv
290.64 142.412 291.55 142.874 292.166 143.77 cv
292.782 144.68 293.104 145.996 293.104 147.704 cv
293.104 149.328 292.712 150.602 291.956 151.554 cv
291.186 152.506 290.164 152.982 288.876 152.982 cv
288.526 152.982 288.176 152.94 287.826 152.884 cv
287.462 152.828 287.098 152.73 286.72 152.59 cv
289.464 148.264 mo
290.08 148.264 290.57 148.054 290.934 147.634 cv
291.298 147.214 291.48 146.626 291.48 145.884 cv
291.48 145.156 291.298 144.568 290.934 144.148 cv
290.57 143.728 290.08 143.504 289.464 143.504 cv
288.848 143.504 288.358 143.728 287.994 144.148 cv
287.63 144.568 287.448 145.156 287.448 145.884 cv
287.448 146.626 287.63 147.214 287.994 147.634 cv
288.358 148.054 288.848 148.264 289.464 148.264 cv
ef
317.771 135.163 mo
317.771 138.663 li
f
317.771 135.163 mo
317.771 138.663 li
@
310.556 151.638 mo
312.81 151.638 li
312.81 143.854 li
310.36 144.344 li
310.36 143.084 li
312.796 142.594 li
314.182 142.594 li
314.182 151.638 li
316.436 151.638 li
316.436 152.8 li
310.556 152.8 li
310.556 151.638 li
ef
322.272 143.504 mo
321.558 143.504 321.026 143.854 320.662 144.554 cv
320.298 145.254 320.13 146.304 320.13 147.704 cv
320.13 149.104 320.298 150.154 320.662 150.854 cv
321.026 151.554 321.558 151.904 322.272 151.904 cv
322.986 151.904 323.518 151.554 323.882 150.854 cv
324.232 150.154 324.414 149.104 324.414 147.704 cv
324.414 146.304 324.232 145.254 323.882 144.554 cv
323.518 143.854 322.986 143.504 322.272 143.504 cv
322.272 142.412 mo
323.406 142.412 324.274 142.874 324.89 143.77 cv
325.492 144.68 325.8 145.996 325.8 147.704 cv
325.8 149.426 325.492 150.742 324.89 151.638 cv
324.274 152.534 323.406 152.982 322.272 152.982 cv
321.124 152.982 320.242 152.534 319.64 151.638 cv
319.038 150.742 318.744 149.426 318.744 147.704 cv
318.744 145.996 319.038 144.68 319.64 143.77 cv
320.242 142.874 321.124 142.412 322.272 142.412 cv
ef
175.958 160.021 mo
182.734 160.021 li
182.734 160.934 li
179.885 160.934 li
179.885 168.04 li
178.796 168.04 li
178.796 160.934 li
175.958 160.934 li
175.958 160.021 li
ef
187.221 162.947 mo
187.111 162.881 186.99 162.837 186.858 162.804 cv
186.726 162.782 186.583 162.76 186.429 162.76 cv
185.868 162.76 185.439 162.947 185.142 163.31 cv
184.834 163.673 184.691 164.19 184.691 164.872 cv
184.691 168.04 li
183.701 168.04 li
183.701 162.023 li
184.691 162.023 li
184.691 162.958 li
184.889 162.595 185.164 162.32 185.494 162.144 cv
185.824 161.968 186.231 161.88 186.715 161.88 cv
186.781 161.88 186.858 161.891 186.946 161.891 cv
187.023 161.902 187.111 161.913 187.221 161.935 cv
187.221 162.947 li
ef
188.294 162.023 mo
189.284 162.023 li
189.284 168.04 li
188.294 168.04 li
188.294 162.023 li
188.294 159.68 mo
188.294 159.68 mo
189.284 159.68 li
189.284 160.934 li
188.294 160.934 li
cp
ef
194.153 165.015 mo
193.35 165.015 192.8 165.114 192.492 165.29 cv
192.184 165.477 192.03 165.785 192.03 166.225 cv
192.03 166.577 192.14 166.863 192.371 167.061 cv
192.602 167.27 192.921 167.369 193.317 167.369 cv
193.867 167.369 194.307 167.182 194.637 166.786 cv
194.967 166.401 195.132 165.884 195.132 165.235 cv
195.132 165.015 li
194.153 165.015 li
196.122 164.608 mo
196.122 168.04 li
195.132 168.04 li
195.132 167.127 li
194.901 167.501 194.615 167.765 194.285 167.93 cv
193.955 168.095 193.537 168.183 193.053 168.183 cv
192.437 168.183 191.942 168.018 191.579 167.677 cv
191.216 167.336 191.04 166.874 191.04 166.291 cv
191.04 165.62 191.26 165.114 191.722 164.762 cv
192.173 164.421 192.844 164.245 193.746 164.245 cv
195.132 164.245 li
195.132 164.146 li
195.132 163.695 194.978 163.343 194.681 163.09 cv
194.384 162.848 193.966 162.716 193.427 162.716 cv
193.075 162.716 192.745 162.76 192.415 162.848 cv
192.085 162.936 191.777 163.057 191.48 163.211 cv
191.48 162.298 li
191.832 162.166 192.184 162.056 192.525 161.99 cv
192.866 161.924 193.196 161.88 193.526 161.88 cv
194.395 161.88 195.044 162.111 195.473 162.562 cv
195.902 163.013 196.122 163.695 196.122 164.608 cv
ef
198.134 168.04 mo
199.124 168.04 li
199.124 159.68 li
198.134 159.68 li
cp
f
204.973 162.199 mo
204.973 163.134 li
204.687 163.002 204.401 162.892 204.104 162.815 cv
203.796 162.749 203.488 162.705 203.169 162.705 cv
202.674 162.705 202.3 162.782 202.058 162.936 cv
201.816 163.09 201.695 163.31 201.695 163.607 cv
201.695 163.838 201.783 164.014 201.959 164.146 cv
202.135 164.278 202.487 164.41 203.015 164.52 cv
203.356 164.597 li
204.06 164.751 204.555 164.971 204.852 165.235 cv
205.138 165.51 205.292 165.895 205.292 166.379 cv
205.292 166.94 205.072 167.38 204.632 167.699 cv
204.192 168.029 203.576 168.183 202.806 168.183 cv
202.476 168.183 202.146 168.15 201.794 168.095 cv
201.442 168.04 201.079 167.952 200.694 167.82 cv
200.694 166.797 li
201.057 166.995 201.42 167.138 201.772 167.226 cv
202.124 167.325 202.476 167.369 202.828 167.369 cv
203.29 167.369 203.653 167.292 203.906 167.138 cv
204.148 166.984 204.28 166.753 204.28 166.456 cv
204.28 166.192 204.181 165.983 204.005 165.84 cv
203.829 165.697 203.433 165.554 202.817 165.422 cv
202.476 165.345 li
201.86 165.213 201.409 165.015 201.145 164.751 cv
200.87 164.487 200.738 164.124 200.738 163.651 cv
200.738 163.09 200.936 162.65 201.332 162.342 cv
201.728 162.034 202.3 161.88 203.048 161.88 cv
203.411 161.88 203.752 161.913 204.082 161.968 cv
204.401 162.023 204.698 162.1 204.973 162.199 cv
ef
51.453 135.163 mo
47.953 135.163 li
f
51.453 135.163 mo
47.953 135.163 li
@
26.592 131.144 mo
25.878 131.144 25.346 131.494 24.982 132.194 cv
24.618 132.894 24.45 133.944 24.45 135.344 cv
24.45 136.744 24.618 137.794 24.982 138.494 cv
25.346 139.194 25.878 139.544 26.592 139.544 cv
27.306 139.544 27.838 139.194 28.202 138.494 cv
28.552 137.794 28.734 136.744 28.734 135.344 cv
28.734 133.944 28.552 132.894 28.202 132.194 cv
27.838 131.494 27.306 131.144 26.592 131.144 cv
26.592 130.052 mo
27.726 130.052 28.594 130.514 29.21 131.41 cv
29.812 132.32 30.12 133.636 30.12 135.344 cv
30.12 137.066 29.812 138.382 29.21 139.278 cv
28.594 140.174 27.726 140.622 26.592 140.622 cv
25.444 140.622 24.562 140.174 23.96 139.278 cv
23.358 138.382 23.064 137.066 23.064 135.344 cv
23.064 133.636 23.358 132.32 23.96 131.41 cv
24.562 130.514 25.444 130.052 26.592 130.052 cv
ef
32.638 140.44 mo
34.08 140.44 li
34.08 138.704 li
32.638 138.704 li
cp
f
40.032 131.144 mo
39.318 131.144 38.786 131.494 38.422 132.194 cv
38.058 132.894 37.89 133.944 37.89 135.344 cv
37.89 136.744 38.058 137.794 38.422 138.494 cv
38.786 139.194 39.318 139.544 40.032 139.544 cv
40.746 139.544 41.278 139.194 41.642 138.494 cv
41.992 137.794 42.174 136.744 42.174 135.344 cv
42.174 133.944 41.992 132.894 41.642 132.194 cv
41.278 131.494 40.746 131.144 40.032 131.144 cv
40.032 130.052 mo
41.166 130.052 42.034 130.514 42.65 131.41 cv
43.252 132.32 43.56 133.636 43.56 135.344 cv
43.56 137.066 43.252 138.382 42.65 139.278 cv
42.034 140.174 41.166 140.622 40.032 140.622 cv
38.884 140.622 38.002 140.174 37.4 139.278 cv
36.798 138.382 36.504 137.066 36.504 135.344 cv
36.504 133.636 36.798 132.32 37.4 131.41 cv
38.002 130.514 38.884 130.052 40.032 130.052 cv
ef
51.453 107.443 mo
47.953 107.443 li
f
51.453 107.443 mo
47.953 107.443 li
@
26.592 103.424 mo
25.878 103.424 25.346 103.774 24.982 104.474 cv
24.618 105.174 24.45 106.224 24.45 107.624 cv
24.45 109.024 24.618 110.074 24.982 110.774 cv
25.346 111.474 25.878 111.824 26.592 111.824 cv
27.306 111.824 27.838 111.474 28.202 110.774 cv
28.552 110.074 28.734 109.024 28.734 107.624 cv
28.734 106.224 28.552 105.174 28.202 104.474 cv
27.838 103.774 27.306 103.424 26.592 103.424 cv
26.592 102.332 mo
27.726 102.332 28.594 102.794 29.21 103.69 cv
29.812 104.6 30.12 105.916 30.12 107.624 cv
30.12 109.346 29.812 110.662 29.21 111.558 cv
28.594 112.454 27.726 112.902 26.592 112.902 cv
25.444 112.902 24.562 112.454 23.96 111.558 cv
23.358 110.662 23.064 109.346 23.064 107.624 cv
23.064 105.916 23.358 104.6 23.96 103.69 cv
24.562 102.794 25.444 102.332 26.592 102.332 cv
ef
32.638 112.72 mo
34.08 112.72 li
34.08 110.984 li
32.638 110.984 li
cp
f
37.092 102.514 mo
42.51 102.514 li
42.51 103.676 li
38.352 103.676 li
38.352 106.182 li
38.548 106.112 38.758 106.056 38.954 106.028 cv
39.15 106 39.36 105.972 39.556 105.972 cv
40.69 105.972 41.586 106.294 42.258 106.91 cv
42.93 107.54 43.266 108.38 43.266 109.444 cv
43.266 110.55 42.916 111.404 42.23 112.006 cv
41.544 112.608 40.578 112.902 39.346 112.902 cv
38.912 112.902 38.478 112.86 38.03 112.804 cv
37.582 112.734 37.134 112.636 36.658 112.482 cv
36.658 111.096 li
37.064 111.32 37.484 111.488 37.932 111.6 cv
38.366 111.712 38.828 111.754 39.318 111.754 cv
40.102 111.754 40.732 111.558 41.194 111.138 cv
41.642 110.718 41.88 110.158 41.88 109.444 cv
41.88 108.744 41.642 108.184 41.194 107.764 cv
40.732 107.344 40.102 107.134 39.318 107.134 cv
38.954 107.134 38.576 107.176 38.212 107.26 cv
37.848 107.344 37.47 107.47 37.092 107.638 cv
37.092 102.514 li
ef
51.453 79.723 mo
47.953 79.723 li
f
51.453 79.723 mo
47.953 79.723 li
@
23.876 83.838 mo
26.13 83.838 li
26.13 76.054 li
23.68 76.544 li
23.68 75.284 li
26.116 74.794 li
27.502 74.794 li
27.502 83.838 li
29.756 83.838 li
29.756 85 li
23.876 85 li
23.876 83.838 li
ef
32.638 85 mo
34.08 85 li
34.08 83.264 li
32.638 83.264 li
cp
f
40.032 75.704 mo
39.318 75.704 38.786 76.054 38.422 76.754 cv
38.058 77.454 37.89 78.504 37.89 79.904 cv
37.89 81.304 38.058 82.354 38.422 83.054 cv
38.786 83.754 39.318 84.104 40.032 84.104 cv
40.746 84.104 41.278 83.754 41.642 83.054 cv
41.992 82.354 42.174 81.304 42.174 79.904 cv
42.174 78.504 41.992 77.454 41.642 76.754 cv
41.278 76.054 40.746 75.704 40.032 75.704 cv
40.032 74.612 mo
41.166 74.612 42.034 75.074 42.65 75.97 cv
43.252 76.88 43.56 78.196 43.56 79.904 cv
43.56 81.626 43.252 82.942 42.65 83.838 cv
42.034 84.734 41.166 85.182 40.032 85.182 cv
38.884 85.182 38.002 84.734 37.4 83.838 cv
36.798 82.942 36.504 81.626 36.504 79.904 cv
36.504 78.196 36.798 76.88 37.4 75.97 cv
38.002 75.074 38.884 74.612 40.032 74.612 cv
ef
51.453 52.002 mo
47.953 52.002 li
f
51.453 52.002 mo
47.953 52.002 li
@
23.876 56.118 mo
26.13 56.118 li
26.13 48.334 li
23.68 48.824 li
23.68 47.564 li
26.116 47.074 li
27.502 47.074 li
27.502 56.118 li
29.756 56.118 li
29.756 57.28 li
23.876 57.28 li
23.876 56.118 li
ef
32.638 57.28 mo
34.08 57.28 li
34.08 55.544 li
32.638 55.544 li
cp
f
37.092 47.074 mo
42.51 47.074 li
42.51 48.236 li
38.352 48.236 li
38.352 50.742 li
38.548 50.672 38.758 50.616 38.954 50.588 cv
39.15 50.56 39.36 50.532 39.556 50.532 cv
40.69 50.532 41.586 50.854 42.258 51.47 cv
42.93 52.1 43.266 52.94 43.266 54.004 cv
43.266 55.11 42.916 55.964 42.23 56.566 cv
41.544 57.168 40.578 57.462 39.346 57.462 cv
38.912 57.462 38.478 57.42 38.03 57.364 cv
37.582 57.294 37.134 57.196 36.658 57.042 cv
36.658 55.656 li
37.064 55.88 37.484 56.048 37.932 56.16 cv
38.366 56.272 38.828 56.314 39.318 56.314 cv
40.102 56.314 40.732 56.118 41.194 55.698 cv
41.642 55.278 41.88 54.718 41.88 54.004 cv
41.88 53.304 41.642 52.744 41.194 52.324 cv
40.732 51.904 40.102 51.694 39.318 51.694 cv
38.954 51.694 38.576 51.736 38.212 51.82 cv
37.848 51.904 37.47 52.03 37.092 52.198 cv
37.092 47.074 li
ef
51.453 24.282 mo
47.953 24.282 li
f
51.453 24.282 mo
47.953 24.282 li
@
24.828 28.398 mo
29.644 28.398 li
29.644 29.56 li
23.162 29.56 li
23.162 28.398 li
23.68 27.866 24.394 27.138 25.304 26.214 cv
26.2 25.304 26.774 24.716 27.012 24.45 cv
27.46 23.96 27.768 23.54 27.936 23.19 cv
28.104 22.854 28.202 22.504 28.202 22.168 cv
28.202 21.636 28.006 21.188 27.628 20.852 cv
27.25 20.516 26.76 20.334 26.144 20.334 cv
25.71 20.334 25.248 20.418 24.772 20.558 cv
24.296 20.712 23.778 20.936 23.232 21.244 cv
23.232 19.844 li
23.792 19.62 24.31 19.452 24.786 19.34 cv
25.262 19.228 25.71 19.172 26.116 19.172 cv
27.166 19.172 28.006 19.438 28.636 19.97 cv
29.266 20.502 29.588 21.202 29.588 22.084 cv
29.588 22.504 29.504 22.91 29.35 23.274 cv
29.196 23.652 28.916 24.1 28.496 24.604 cv
28.384 24.744 28.02 25.122 27.404 25.752 cv
26.788 26.382 25.934 27.264 24.828 28.398 cv
ef
32.638 29.56 mo
34.08 29.56 li
34.08 27.824 li
32.638 27.824 li
cp
f
40.032 20.264 mo
39.318 20.264 38.786 20.614 38.422 21.314 cv
38.058 22.014 37.89 23.064 37.89 24.464 cv
37.89 25.864 38.058 26.914 38.422 27.614 cv
38.786 28.314 39.318 28.664 40.032 28.664 cv
40.746 28.664 41.278 28.314 41.642 27.614 cv
41.992 26.914 42.174 25.864 42.174 24.464 cv
42.174 23.064 41.992 22.014 41.642 21.314 cv
41.278 20.614 40.746 20.264 40.032 20.264 cv
40.032 19.172 mo
41.166 19.172 42.034 19.634 42.65 20.53 cv
43.252 21.44 43.56 22.756 43.56 24.464 cv
43.56 26.186 43.252 27.502 42.65 28.398 cv
42.034 29.294 41.166 29.742 40.032 29.742 cv
38.884 29.742 38.002 29.294 37.4 28.398 cv
36.798 27.502 36.504 26.186 36.504 24.464 cv
36.504 22.756 36.798 21.44 37.4 20.53 cv
38.002 19.634 38.884 19.172 40.032 19.172 cv
ef
8.772 129.753 mo
15.009 129.753 li
15.009 128.444 li
15.009 127.344 14.767 126.53 14.261 126.013 cv
13.755 125.507 12.963 125.243 11.885 125.243 cv
10.807 125.243 10.026 125.507 9.52 126.013 cv
9.025 126.53 8.772 127.344 8.772 128.444 cv
8.772 129.753 li
7.881 130.842 mo
7.881 128.609 li
7.881 127.058 8.211 125.914 8.849 125.188 cv
9.498 124.462 10.51 124.099 11.885 124.099 cv
13.271 124.099 14.283 124.473 14.932 125.199 cv
15.581 125.925 15.9 127.069 15.9 128.609 cv
15.9 130.842 li
7.881 130.842 li
ef
12.875 119.627 mo
12.875 120.43 12.974 120.98 13.15 121.288 cv
13.337 121.596 13.645 121.75 14.085 121.75 cv
14.437 121.75 14.723 121.64 14.921 121.409 cv
15.13 121.178 15.229 120.859 15.229 120.463 cv
15.229 119.913 15.042 119.473 14.646 119.143 cv
14.261 118.813 13.744 118.648 13.095 118.648 cv
12.875 118.648 li
12.875 119.627 li
12.468 117.658 mo
15.9 117.658 li
15.9 118.648 li
14.987 118.648 li
15.361 118.879 15.625 119.165 15.79 119.495 cv
15.955 119.825 16.043 120.243 16.043 120.727 cv
16.043 121.343 15.878 121.838 15.537 122.201 cv
15.196 122.564 14.734 122.74 14.151 122.74 cv
13.48 122.74 12.974 122.52 12.622 122.058 cv
12.281 121.607 12.105 120.936 12.105 120.034 cv
12.105 118.648 li
12.006 118.648 li
11.555 118.648 11.203 118.802 10.95 119.099 cv
10.708 119.396 10.576 119.814 10.576 120.353 cv
10.576 120.705 10.62 121.035 10.708 121.365 cv
10.796 121.695 10.917 122.003 11.071 122.3 cv
10.158 122.3 li
10.026 121.948 9.916 121.596 9.85 121.255 cv
9.784 120.914 9.74 120.584 9.74 120.254 cv
9.74 119.385 9.971 118.736 10.422 118.307 cv
10.873 117.878 11.555 117.658 12.468 117.658 cv
ef
8.178 114.667 mo
9.883 114.667 li
9.883 112.632 li
10.653 112.632 li
10.653 114.667 li
13.92 114.667 li
14.415 114.667 14.734 114.601 14.866 114.469 cv
15.009 114.337 15.075 114.062 15.075 113.644 cv
15.075 112.632 li
15.9 112.632 li
15.9 113.644 li
15.9 114.414 15.757 114.942 15.471 115.228 cv
15.185 115.514 14.668 115.657 13.92 115.657 cv
10.653 115.657 li
10.653 116.383 li
9.883 116.383 li
9.883 115.657 li
8.178 115.657 li
8.178 114.667 li
ef
12.875 108.587 mo
12.875 109.39 12.974 109.94 13.15 110.248 cv
13.337 110.556 13.645 110.71 14.085 110.71 cv
14.437 110.71 14.723 110.6 14.921 110.369 cv
15.13 110.138 15.229 109.819 15.229 109.423 cv
15.229 108.873 15.042 108.433 14.646 108.103 cv
14.261 107.773 13.744 107.608 13.095 107.608 cv
12.875 107.608 li
12.875 108.587 li
12.468 106.618 mo
15.9 106.618 li
15.9 107.608 li
14.987 107.608 li
15.361 107.839 15.625 108.125 15.79 108.455 cv
15.955 108.785 16.043 109.203 16.043 109.687 cv
16.043 110.303 15.878 110.798 15.537 111.161 cv
15.196 111.524 14.734 111.7 14.151 111.7 cv
13.48 111.7 12.974 111.48 12.622 111.018 cv
12.281 110.567 12.105 109.896 12.105 108.994 cv
12.105 107.608 li
12.006 107.608 li
11.555 107.608 11.203 107.762 10.95 108.059 cv
10.708 108.356 10.576 108.774 10.576 109.313 cv
10.576 109.665 10.62 109.995 10.708 110.325 cv
10.796 110.655 10.917 110.963 11.071 111.26 cv
10.158 111.26 li
10.026 110.908 9.916 110.556 9.85 110.215 cv
9.784 109.874 9.74 109.544 9.74 109.214 cv
9.74 108.345 9.971 107.696 10.422 107.267 cv
10.873 106.838 11.555 106.618 12.468 106.618 cv
ef
7.54 98.079 mo
8.365 98.079 li
8.365 99.025 li
8.365 99.377 8.442 99.63 8.585 99.762 cv
8.728 99.905 8.981 99.971 9.355 99.971 cv
9.883 99.971 li
9.883 98.343 li
10.653 98.343 li
10.653 99.971 li
15.9 99.971 li
15.9 100.961 li
10.653 100.961 li
10.653 101.907 li
9.883 101.907 li
9.883 100.961 li
9.465 100.961 li
8.805 100.961 8.31 100.807 8.002 100.499 cv
7.694 100.191 7.54 99.696 7.54 99.014 cv
7.54 98.079 li
ef
12.644 92.018 mo
13.128 92.018 li
13.128 96.561 li
13.81 96.517 14.338 96.319 14.69 95.945 cv
15.042 95.582 15.218 95.076 15.218 94.416 cv
15.218 94.042 15.174 93.668 15.086 93.316 cv
14.998 92.964 14.855 92.601 14.657 92.249 cv
15.592 92.249 li
15.746 92.601 15.867 92.964 15.933 93.338 cv
15.999 93.712 16.043 94.097 16.043 94.471 cv
16.043 95.439 15.768 96.198 15.218 96.759 cv
14.668 97.32 13.909 97.595 12.952 97.595 cv
11.973 97.595 11.192 97.331 10.609 96.803 cv
10.037 96.275 9.74 95.549 9.74 94.647 cv
9.74 93.833 10.004 93.195 10.521 92.722 cv
11.049 92.26 11.753 92.018 12.644 92.018 cv
12.358 93.008 mo
11.819 93.019 11.39 93.173 11.06 93.459 cv
10.741 93.756 10.576 94.152 10.576 94.636 cv
10.576 95.186 10.741 95.626 11.049 95.956 cv
11.357 96.286 11.797 96.484 12.358 96.528 cv
12.358 93.008 li
ef
8.178 89.467 mo
9.883 89.467 li
9.883 87.432 li
10.653 87.432 li
10.653 89.467 li
13.92 89.467 li
14.415 89.467 14.734 89.401 14.866 89.269 cv
15.009 89.137 15.075 88.862 15.075 88.444 cv
15.075 87.432 li
15.9 87.432 li
15.9 88.444 li
15.9 89.214 15.757 89.742 15.471 90.028 cv
15.185 90.314 14.668 90.457 13.92 90.457 cv
10.653 90.457 li
10.653 91.183 li
9.883 91.183 li
9.883 90.457 li
8.178 90.457 li
8.178 89.467 li
ef
10.114 81.792 mo
11.038 81.792 li
10.884 82.078 10.774 82.353 10.697 82.639 cv
10.62 82.925 10.576 83.2 10.576 83.486 cv
10.576 84.124 10.785 84.63 11.192 84.982 cv
11.599 85.334 12.171 85.51 12.897 85.51 cv
13.634 85.51 14.206 85.334 14.613 84.982 cv
15.02 84.63 15.218 84.124 15.218 83.486 cv
15.218 83.2 15.185 82.925 15.108 82.639 cv
15.031 82.353 14.91 82.078 14.756 81.792 cv
15.669 81.792 li
15.801 82.078 15.9 82.364 15.955 82.65 cv
16.01 82.947 16.043 83.266 16.043 83.596 cv
16.043 84.498 15.768 85.224 15.196 85.752 cv
14.635 86.291 13.865 86.555 12.897 86.555 cv
11.918 86.555 11.148 86.291 10.587 85.752 cv
10.026 85.213 9.74 84.476 9.74 83.53 cv
9.74 83.222 9.773 82.925 9.839 82.639 cv
9.905 82.353 9.993 82.067 10.114 81.792 cv
ef
12.27 75.121 mo
15.9 75.121 li
15.9 76.111 li
12.303 76.111 li
11.731 76.111 11.313 76.232 11.027 76.452 cv
10.741 76.672 10.598 77.002 10.598 77.442 cv
10.598 77.981 10.774 78.399 11.115 78.707 cv
11.456 79.015 11.918 79.169 12.501 79.169 cv
15.9 79.169 li
15.9 80.159 li
7.54 80.159 li
7.54 79.169 li
10.818 79.169 li
10.466 78.938 10.191 78.663 10.015 78.333 cv
9.839 78.014 9.74 77.64 9.74 77.222 cv
9.74 76.54 9.96 76.012 10.389 75.66 cv
10.818 75.308 11.445 75.121 12.27 75.121 cv
ef
9.883 73.046 mo
9.883 72.056 li
15.9 72.056 li
15.9 73.046 li
9.883 73.046 li
7.54 73.046 mo
8.794 73.046 mo
7.54 73.046 li
7.54 72.056 li
8.794 72.056 li
cp
ef
12.27 65.041 mo
15.9 65.041 li
15.9 66.031 li
12.303 66.031 li
11.731 66.031 11.313 66.152 11.027 66.372 cv
10.741 66.592 10.598 66.922 10.598 67.362 cv
10.598 67.901 10.774 68.319 11.115 68.627 cv
11.456 68.935 11.918 69.089 12.501 69.089 cv
15.9 69.089 li
15.9 70.079 li
9.883 70.079 li
9.883 69.089 li
10.818 69.089 li
10.466 68.858 10.191 68.583 10.015 68.253 cv
9.839 67.934 9.74 67.56 9.74 67.142 cv
9.74 66.46 9.96 65.932 10.389 65.58 cv
10.818 65.228 11.445 65.041 12.27 65.041 cv
ef
12.82 59.126 mo
12.116 59.126 11.555 59.28 11.159 59.566 cv
10.763 59.863 10.565 60.281 10.565 60.809 cv
10.565 61.337 10.763 61.755 11.159 62.052 cv
11.555 62.349 12.116 62.492 12.82 62.492 cv
13.535 62.492 14.085 62.349 14.481 62.052 cv
14.877 61.755 15.075 61.337 15.075 60.809 cv
15.075 60.281 14.877 59.863 14.481 59.566 cv
14.085 59.28 13.535 59.126 12.82 59.126 cv
15.152 58.136 mo
16.164 58.136 16.923 58.367 17.429 58.818 cv
17.924 59.28 18.177 59.973 18.177 60.908 cv
18.177 61.26 18.144 61.579 18.1 61.887 cv
18.045 62.195 17.968 62.503 17.858 62.789 cv
16.901 62.789 li
17.055 62.503 17.165 62.217 17.242 61.931 cv
17.319 61.645 17.363 61.359 17.363 61.062 cv
17.363 60.424 17.187 59.94 16.857 59.61 cv
16.516 59.291 16.01 59.126 15.328 59.126 cv
14.844 59.126 li
15.196 59.335 15.46 59.599 15.636 59.918 cv
15.812 60.237 15.9 60.611 15.9 61.051 cv
15.9 61.799 15.625 62.393 15.064 62.844 cv
14.503 63.295 13.755 63.515 12.82 63.515 cv
11.896 63.515 11.148 63.295 10.587 62.844 cv
10.026 62.393 9.74 61.799 9.74 61.051 cv
9.74 60.611 9.828 60.237 10.004 59.918 cv
10.18 59.599 10.444 59.335 10.796 59.126 cv
9.883 59.126 li
9.883 58.136 li
15.152 58.136 li
ef
8.178 51.667 mo
9.883 51.667 li
9.883 49.632 li
10.653 49.632 li
10.653 51.667 li
13.92 51.667 li
14.415 51.667 14.734 51.601 14.866 51.469 cv
15.009 51.337 15.075 51.062 15.075 50.644 cv
15.075 49.632 li
15.9 49.632 li
15.9 50.644 li
15.9 51.414 15.757 51.942 15.471 52.228 cv
15.185 52.514 14.668 52.657 13.92 52.657 cv
10.653 52.657 li
10.653 53.383 li
9.883 53.383 li
9.883 52.657 li
8.178 52.657 li
8.178 51.667 li
ef
9.883 48.326 mo
9.883 47.336 li
15.9 47.336 li
15.9 48.326 li
9.883 48.326 li
7.54 48.326 mo
8.794 48.326 mo
7.54 48.326 li
7.54 47.336 li
8.794 47.336 li
cp
ef
11.038 40.52 mo
10.598 40.278 10.279 39.981 10.059 39.64 cv
9.85 39.299 9.74 38.892 9.74 38.419 cv
9.74 37.803 9.96 37.319 10.4 36.978 cv
10.84 36.637 11.467 36.461 12.27 36.461 cv
15.9 36.461 li
15.9 37.451 li
12.303 37.451 li
11.731 37.451 11.302 37.561 11.016 37.759 cv
10.741 37.968 10.598 38.276 10.598 38.694 cv
10.598 39.211 10.774 39.618 11.115 39.915 cv
11.456 40.212 11.918 40.355 12.501 40.355 cv
15.9 40.355 li
15.9 41.345 li
12.303 41.345 li
11.731 41.345 11.302 41.455 11.016 41.653 cv
10.741 41.862 10.598 42.181 10.598 42.599 cv
10.598 43.105 10.774 43.512 11.115 43.809 cv
11.456 44.106 11.918 44.249 12.501 44.249 cv
15.9 44.249 li
15.9 45.239 li
9.883 45.239 li
9.883 44.249 li
10.818 44.249 li
10.455 44.029 10.18 43.754 10.004 43.435 cv
9.828 43.127 9.74 42.753 9.74 42.313 cv
9.74 41.873 9.85 41.51 10.07 41.202 cv
10.29 40.894 10.62 40.674 11.038 40.52 cv
ef
12.644 29.378 mo
13.128 29.378 li
13.128 33.921 li
13.81 33.877 14.338 33.679 14.69 33.305 cv
15.042 32.942 15.218 32.436 15.218 31.776 cv
15.218 31.402 15.174 31.028 15.086 30.676 cv
14.998 30.324 14.855 29.961 14.657 29.609 cv
15.592 29.609 li
15.746 29.961 15.867 30.324 15.933 30.698 cv
15.999 31.072 16.043 31.457 16.043 31.831 cv
16.043 32.799 15.768 33.558 15.218 34.119 cv
14.668 34.68 13.909 34.955 12.952 34.955 cv
11.973 34.955 11.192 34.691 10.609 34.163 cv
10.037 33.635 9.74 32.909 9.74 32.007 cv
9.74 31.193 10.004 30.555 10.521 30.082 cv
11.049 29.62 11.753 29.378 12.644 29.378 cv
12.358 30.368 mo
11.819 30.379 11.39 30.533 11.06 30.819 cv
10.741 31.116 10.576 31.512 10.576 31.996 cv
10.576 32.546 10.741 32.986 11.049 33.316 cv
11.357 33.646 11.797 33.844 12.358 33.888 cv
12.358 30.368 li
ef
7.551 21.83 mo
8.387 22.314 9.201 22.666 10.004 22.897 cv
10.807 23.139 11.621 23.249 12.446 23.249 cv
13.282 23.249 14.096 23.139 14.899 22.897 cv
15.713 22.666 16.516 22.314 17.341 21.83 cv
17.341 22.688 li
16.494 23.227 15.68 23.634 14.866 23.898 cv
14.052 24.162 13.249 24.294 12.446 24.294 cv
11.654 24.294 10.851 24.162 10.037 23.898 cv
9.223 23.634 8.398 23.238 7.551 22.688 cv
7.551 21.83 li
ef
10.059 16.167 mo
10.994 16.167 li
10.862 16.453 10.752 16.739 10.675 17.036 cv
10.609 17.344 10.565 17.652 10.565 17.971 cv
10.565 18.466 10.642 18.84 10.796 19.082 cv
10.95 19.324 11.17 19.445 11.467 19.445 cv
11.698 19.445 11.874 19.357 12.006 19.181 cv
12.138 19.005 12.27 18.653 12.38 18.125 cv
12.457 17.784 li
12.611 17.08 12.831 16.585 13.095 16.288 cv
13.37 16.002 13.755 15.848 14.239 15.848 cv
14.8 15.848 15.24 16.068 15.559 16.508 cv
15.889 16.948 16.043 17.564 16.043 18.334 cv
16.043 18.664 16.01 18.994 15.955 19.346 cv
15.9 19.698 15.812 20.061 15.68 20.446 cv
14.657 20.446 li
14.855 20.083 14.998 19.72 15.086 19.368 cv
15.185 19.016 15.229 18.664 15.229 18.312 cv
15.229 17.85 15.152 17.487 14.998 17.234 cv
14.844 16.992 14.613 16.86 14.316 16.86 cv
14.052 16.86 13.843 16.959 13.7 17.135 cv
13.557 17.311 13.414 17.707 13.282 18.323 cv
13.205 18.664 li
13.073 19.28 12.875 19.731 12.611 19.995 cv
12.347 20.27 11.984 20.402 11.511 20.402 cv
10.95 20.402 10.51 20.204 10.202 19.808 cv
9.894 19.412 9.74 18.84 9.74 18.092 cv
9.74 17.729 9.773 17.388 9.828 17.058 cv
9.883 16.739 9.96 16.442 10.059 16.167 cv
ef
7.551 14.4 mo
7.551 13.542 li
8.398 13.014 9.223 12.607 10.037 12.343 cv
10.851 12.079 11.654 11.936 12.446 11.936 cv
13.249 11.936 14.052 12.079 14.866 12.343 cv
15.68 12.607 16.494 13.014 17.341 13.542 cv
17.341 14.4 li
16.516 13.927 15.713 13.575 14.899 13.333 cv
14.096 13.102 13.282 12.981 12.446 12.981 cv
11.621 12.981 10.807 13.102 10.004 13.333 cv
9.201 13.575 8.387 13.927 7.551 14.4 cv
ef
1.5 lw
2 lc
64.135 118.273 mo
92.317 117.234 li
120.499 117.985 li
148.68 117.072 li
176.862 116.422 li
205.044 116.409 li
233.226 116.446 li
261.408 118.535 li
289.59 118.232 li
317.771 116.55 li
.883665 .769162 0 0 cmyk
@
61.135 121.273 mo
67.135 121.273 li
67.135 115.273 li
61.135 115.273 li
cp
f
1 lw
0 lc
0 lj
61.135 121.273 mo
67.135 121.273 li
67.135 115.273 li
61.135 115.273 li
cp
@
89.317 120.234 mo
95.317 120.234 li
95.317 114.234 li
89.317 114.234 li
cp
f
89.317 120.234 mo
95.317 120.234 li
95.317 114.234 li
89.317 114.234 li
cp
@
117.499 120.984 mo
123.499 120.984 li
123.499 114.984 li
117.499 114.984 li
cp
f
117.499 120.984 mo
123.499 120.984 li
123.499 114.984 li
117.499 114.984 li
cp
@
145.681 120.072 mo
151.681 120.072 li
151.681 114.072 li
145.681 114.072 li
cp
f
145.681 120.072 mo
151.681 120.072 li
151.681 114.072 li
145.681 114.072 li
cp
@
173.862 119.422 mo
179.862 119.422 li
179.862 113.422 li
173.862 113.422 li
cp
f
173.862 119.422 mo
179.862 119.422 li
179.862 113.422 li
173.862 113.422 li
cp
@
202.044 119.408 mo
208.044 119.408 li
208.044 113.408 li
202.044 113.408 li
cp
f
202.044 119.408 mo
208.044 119.408 li
208.044 113.408 li
202.044 113.408 li
cp
@
230.226 119.445 mo
236.226 119.445 li
236.226 113.445 li
230.226 113.445 li
cp
f
230.226 119.445 mo
236.226 119.445 li
236.226 113.445 li
230.226 113.445 li
cp
@
258.408 121.535 mo
264.408 121.535 li
264.408 115.535 li
258.408 115.535 li
cp
f
258.408 121.535 mo
264.408 121.535 li
264.408 115.535 li
258.408 115.535 li
cp
@
286.59 121.231 mo
292.59 121.231 li
292.59 115.231 li
286.59 115.231 li
cp
f
286.59 121.231 mo
292.59 121.231 li
292.59 115.231 li
286.59 115.231 li
cp
@
314.771 119.55 mo
320.771 119.55 li
320.771 113.55 li
314.771 113.55 li
cp
f
314.771 119.55 mo
320.771 119.55 li
320.771 113.55 li
314.771 113.55 li
cp
@
1.5 lw
2 lc
1 lj
64.135 97.883 mo
92.317 98.86 li
120.499 96.929 li
148.68 97.94 li
176.862 99.353 li
205.044 98.769 li
233.226 99.354 li
261.408 99.034 li
289.59 99.356 li
317.771 97.94 li
@
64.135 100.884 mo
64.931 100.884 65.694 100.568 66.256 100.005 cv
66.819 99.443 67.135 98.68 67.135 97.884 cv
67.135 97.088 66.819 96.325 66.256 95.763 cv
65.694 95.2 64.931 94.884 64.135 94.884 cv
63.339 94.884 62.576 95.2 62.014 95.763 cv
61.451 96.325 61.135 97.088 61.135 97.884 cv
61.135 98.68 61.451 99.443 62.014 100.005 cv
62.576 100.568 63.339 100.884 64.135 100.884 cv
cp
f
1 lw
0 lc
64.135 100.884 mo
64.931 100.884 65.694 100.568 66.256 100.005 cv
66.819 99.443 67.135 98.68 67.135 97.884 cv
67.135 97.088 66.819 96.325 66.256 95.763 cv
65.694 95.2 64.931 94.884 64.135 94.884 cv
63.339 94.884 62.576 95.2 62.014 95.763 cv
61.451 96.325 61.135 97.088 61.135 97.884 cv
61.135 98.68 61.451 99.443 62.014 100.005 cv
62.576 100.568 63.339 100.884 64.135 100.884 cv
cp
@
92.317 101.861 mo
93.113 101.861 93.876 101.545 94.438 100.982 cv
95.001 100.42 95.317 99.657 95.317 98.861 cv
95.317 98.065 95.001 97.302 94.438 96.74 cv
93.876 96.177 93.113 95.861 92.317 95.861 cv
91.521 95.861 90.758 96.177 90.196 96.74 cv
89.633 97.302 89.317 98.065 89.317 98.861 cv
89.317 99.657 89.633 100.42 90.196 100.982 cv
90.758 101.545 91.521 101.861 92.317 101.861 cv
cp
f
92.317 101.861 mo
93.113 101.861 93.876 101.545 94.438 100.982 cv
95.001 100.42 95.317 99.657 95.317 98.861 cv
95.317 98.065 95.001 97.302 94.438 96.74 cv
93.876 96.177 93.113 95.861 92.317 95.861 cv
91.521 95.861 90.758 96.177 90.196 96.74 cv
89.633 97.302 89.317 98.065 89.317 98.861 cv
89.317 99.657 89.633 100.42 90.196 100.982 cv
90.758 101.545 91.521 101.861 92.317 101.861 cv
cp
@
120.499 99.93 mo
121.295 99.93 122.058 99.614 122.62 99.051 cv
123.183 98.489 123.499 97.726 123.499 96.93 cv
123.499 96.134 123.183 95.371 122.62 94.809 cv
122.058 94.246 121.295 93.93 120.499 93.93 cv
119.703 93.93 118.94 94.246 118.378 94.809 cv
117.815 95.371 117.499 96.134 117.499 96.93 cv
117.499 97.726 117.815 98.489 118.378 99.051 cv
118.94 99.614 119.703 99.93 120.499 99.93 cv
cp
f
120.499 99.93 mo
121.295 99.93 122.058 99.614 122.62 99.051 cv
123.183 98.489 123.499 97.726 123.499 96.93 cv
123.499 96.134 123.183 95.371 122.62 94.809 cv
122.058 94.246 121.295 93.93 120.499 93.93 cv
119.703 93.93 118.94 94.246 118.378 94.809 cv
117.815 95.371 117.499 96.134 117.499 96.93 cv
117.499 97.726 117.815 98.489 118.378 99.051 cv
118.94 99.614 119.703 99.93 120.499 99.93 cv
cp
@
148.681 100.94 mo
149.477 100.94 150.24 100.624 150.802 100.061 cv
151.365 99.499 151.681 98.736 151.681 97.94 cv
151.681 97.144 151.365 96.381 150.802 95.819 cv
150.24 95.256 149.477 94.94 148.681 94.94 cv
147.885 94.94 147.122 95.256 146.56 95.819 cv
145.997 96.381 145.681 97.144 145.681 97.94 cv
145.681 98.736 145.997 99.499 146.56 100.061 cv
147.122 100.624 147.885 100.94 148.681 100.94 cv
cp
f
148.681 100.94 mo
149.477 100.94 150.24 100.624 150.802 100.061 cv
151.365 99.499 151.681 98.736 151.681 97.94 cv
151.681 97.144 151.365 96.381 150.802 95.819 cv
150.24 95.256 149.477 94.94 148.681 94.94 cv
147.885 94.94 147.122 95.256 146.56 95.819 cv
145.997 96.381 145.681 97.144 145.681 97.94 cv
145.681 98.736 145.997 99.499 146.56 100.061 cv
147.122 100.624 147.885 100.94 148.681 100.94 cv
cp
@
176.862 102.353 mo
177.658 102.353 178.421 102.037 178.983 101.474 cv
179.546 100.912 179.862 100.149 179.862 99.353 cv
179.862 98.557 179.546 97.794 178.983 97.232 cv
178.421 96.669 177.658 96.353 176.862 96.353 cv
176.066 96.353 175.303 96.669 174.741 97.232 cv
174.178 97.794 173.862 98.557 173.862 99.353 cv
173.862 100.149 174.178 100.912 174.741 101.474 cv
175.303 102.037 176.066 102.353 176.862 102.353 cv
cp
f
176.862 102.353 mo
177.658 102.353 178.421 102.037 178.983 101.474 cv
179.546 100.912 179.862 100.149 179.862 99.353 cv
179.862 98.557 179.546 97.794 178.983 97.232 cv
178.421 96.669 177.658 96.353 176.862 96.353 cv
176.066 96.353 175.303 96.669 174.741 97.232 cv
174.178 97.794 173.862 98.557 173.862 99.353 cv
173.862 100.149 174.178 100.912 174.741 101.474 cv
175.303 102.037 176.066 102.353 176.862 102.353 cv
cp
@
205.044 101.769 mo
205.84 101.769 206.603 101.453 207.165 100.89 cv
207.728 100.328 208.044 99.565 208.044 98.769 cv
208.044 97.973 207.728 97.21 207.165 96.648 cv
206.603 96.085 205.84 95.769 205.044 95.769 cv
204.248 95.769 203.485 96.085 202.923 96.648 cv
202.36 97.21 202.044 97.973 202.044 98.769 cv
202.044 99.565 202.36 100.328 202.923 100.89 cv
203.485 101.453 204.248 101.769 205.044 101.769 cv
cp
f
205.044 101.769 mo
205.84 101.769 206.603 101.453 207.165 100.89 cv
207.728 100.328 208.044 99.565 208.044 98.769 cv
208.044 97.973 207.728 97.21 207.165 96.648 cv
206.603 96.085 205.84 95.769 205.044 95.769 cv
204.248 95.769 203.485 96.085 202.923 96.648 cv
202.36 97.21 202.044 97.973 202.044 98.769 cv
202.044 99.565 202.36 100.328 202.923 100.89 cv
203.485 101.453 204.248 101.769 205.044 101.769 cv
cp
@
233.226 102.355 mo
234.022 102.355 234.785 102.039 235.347 101.476 cv
235.91 100.914 236.226 100.151 236.226 99.355 cv
236.226 98.559 235.91 97.796 235.347 97.234 cv
234.785 96.671 234.022 96.355 233.226 96.355 cv
232.43 96.355 231.667 96.671 231.105 97.234 cv
230.542 97.796 230.226 98.559 230.226 99.355 cv
230.226 100.151 230.542 100.914 231.105 101.476 cv
231.667 102.039 232.43 102.355 233.226 102.355 cv
cp
f
233.226 102.355 mo
234.022 102.355 234.785 102.039 235.347 101.476 cv
235.91 100.914 236.226 100.151 236.226 99.355 cv
236.226 98.559 235.91 97.796 235.347 97.234 cv
234.785 96.671 234.022 96.355 233.226 96.355 cv
232.43 96.355 231.667 96.671 231.105 97.234 cv
230.542 97.796 230.226 98.559 230.226 99.355 cv
230.226 100.151 230.542 100.914 231.105 101.476 cv
231.667 102.039 232.43 102.355 233.226 102.355 cv
cp
@
261.408 102.034 mo
262.204 102.034 262.967 101.718 263.529 101.155 cv
264.092 100.593 264.408 99.83 264.408 99.034 cv
264.408 98.238 264.092 97.475 263.529 96.913 cv
262.967 96.35 262.204 96.034 261.408 96.034 cv
260.612 96.034 259.849 96.35 259.287 96.913 cv
258.724 97.475 258.408 98.238 258.408 99.034 cv
258.408 99.83 258.724 100.593 259.287 101.155 cv
259.849 101.718 260.612 102.034 261.408 102.034 cv
cp
f
261.408 102.034 mo
262.204 102.034 262.967 101.718 263.529 101.155 cv
264.092 100.593 264.408 99.83 264.408 99.034 cv
264.408 98.238 264.092 97.475 263.529 96.913 cv
262.967 96.35 262.204 96.034 261.408 96.034 cv
260.612 96.034 259.849 96.35 259.287 96.913 cv
258.724 97.475 258.408 98.238 258.408 99.034 cv
258.408 99.83 258.724 100.593 259.287 101.155 cv
259.849 101.718 260.612 102.034 261.408 102.034 cv
cp
@
289.59 102.356 mo
290.386 102.356 291.149 102.04 291.711 101.477 cv
292.274 100.915 292.59 100.152 292.59 99.356 cv
292.59 98.56 292.274 97.797 291.711 97.235 cv
291.149 96.672 290.386 96.356 289.59 96.356 cv
288.794 96.356 288.031 96.672 287.469 97.235 cv
286.906 97.797 286.59 98.56 286.59 99.356 cv
286.59 100.152 286.906 100.915 287.469 101.477 cv
288.031 102.04 288.794 102.356 289.59 102.356 cv
cp
f
289.59 102.356 mo
290.386 102.356 291.149 102.04 291.711 101.477 cv
292.274 100.915 292.59 100.152 292.59 99.356 cv
292.59 98.56 292.274 97.797 291.711 97.235 cv
291.149 96.672 290.386 96.356 289.59 96.356 cv
288.794 96.356 288.031 96.672 287.469 97.235 cv
286.906 97.797 286.59 98.56 286.59 99.356 cv
286.59 100.152 286.906 100.915 287.469 101.477 cv
288.031 102.04 288.794 102.356 289.59 102.356 cv
cp
@
317.771 100.94 mo
318.567 100.94 319.33 100.624 319.892 100.061 cv
320.455 99.499 320.771 98.736 320.771 97.94 cv
320.771 97.144 320.455 96.381 319.892 95.819 cv
319.33 95.256 318.567 94.94 317.771 94.94 cv
316.975 94.94 316.212 95.256 315.65 95.819 cv
315.087 96.381 314.771 97.144 314.771 97.94 cv
314.771 98.736 315.087 99.499 315.65 100.061 cv
316.212 100.624 316.975 100.94 317.771 100.94 cv
cp
f
317.771 100.94 mo
318.567 100.94 319.33 100.624 319.892 100.061 cv
320.455 99.499 320.771 98.736 320.771 97.94 cv
320.771 97.144 320.455 96.381 319.892 95.819 cv
319.33 95.256 318.567 94.94 317.771 94.94 cv
316.975 94.94 316.212 95.256 315.65 95.819 cv
315.087 96.381 314.771 97.144 314.771 97.94 cv
314.771 98.736 315.087 99.499 315.65 100.061 cv
316.212 100.624 316.975 100.94 317.771 100.94 cv
cp
@
1.5 lw
2 lc
64.135 90.336 mo
92.317 86.024 li
120.499 87.852 li
148.68 89.027 li
176.862 92.312 li
205.044 86.665 li
233.226 87.927 li
261.408 93.954 li
289.59 89.027 li
317.771 87.852 li
0 .993988 1 0 cmyk
@
61.135 93.336 mo
67.135 93.336 li
67.135 87.336 li
61.135 87.336 li
cp
f
1 lw
0 lc
0 lj
61.135 93.336 mo
67.135 93.336 li
67.135 87.336 li
61.135 87.336 li
cp
@
89.317 89.024 mo
95.317 89.024 li
95.317 83.024 li
89.317 83.024 li
cp
f
89.317 89.024 mo
95.317 89.024 li
95.317 83.024 li
89.317 83.024 li
cp
@
117.499 90.852 mo
123.499 90.852 li
123.499 84.852 li
117.499 84.852 li
cp
f
117.499 90.852 mo
123.499 90.852 li
123.499 84.852 li
117.499 84.852 li
cp
@
145.681 92.027 mo
151.681 92.027 li
151.681 86.027 li
145.681 86.027 li
cp
f
145.681 92.027 mo
151.681 92.027 li
151.681 86.027 li
145.681 86.027 li
cp
@
173.862 95.312 mo
179.862 95.312 li
179.862 89.312 li
173.862 89.312 li
cp
f
173.862 95.312 mo
179.862 95.312 li
179.862 89.312 li
173.862 89.312 li
cp
@
202.044 89.665 mo
208.044 89.665 li
208.044 83.665 li
202.044 83.665 li
cp
f
202.044 89.665 mo
208.044 89.665 li
208.044 83.665 li
202.044 83.665 li
cp
@
230.226 90.927 mo
236.226 90.927 li
236.226 84.927 li
230.226 84.927 li
cp
f
230.226 90.927 mo
236.226 90.927 li
236.226 84.927 li
230.226 84.927 li
cp
@
258.408 96.954 mo
264.408 96.954 li
264.408 90.954 li
258.408 90.954 li
cp
f
258.408 96.954 mo
264.408 96.954 li
264.408 90.954 li
258.408 90.954 li
cp
@
286.59 92.027 mo
292.59 92.027 li
292.59 86.027 li
286.59 86.027 li
cp
f
286.59 92.027 mo
292.59 92.027 li
292.59 86.027 li
286.59 86.027 li
cp
@
314.771 90.852 mo
320.771 90.852 li
320.771 84.852 li
314.771 84.852 li
cp
f
314.771 90.852 mo
320.771 90.852 li
320.771 84.852 li
314.771 84.852 li
cp
@
1.5 lw
2 lc
1 lj
64.135 37.309 mo
92.317 49.769 li
120.499 51.077 li
148.68 52.652 li
176.862 53.224 li
205.044 48.036 li
233.226 44.915 li
261.408 50.829 li
289.59 47.177 li
317.771 46.153 li
@
64.135 40.309 mo
64.931 40.309 65.694 39.993 66.256 39.43 cv
66.819 38.868 67.135 38.105 67.135 37.309 cv
67.135 36.513 66.819 35.75 66.256 35.188 cv
65.694 34.625 64.931 34.309 64.135 34.309 cv
63.339 34.309 62.576 34.625 62.014 35.188 cv
61.451 35.75 61.135 36.513 61.135 37.309 cv
61.135 38.105 61.451 38.868 62.014 39.43 cv
62.576 39.993 63.339 40.309 64.135 40.309 cv
cp
f
1 lw
0 lc
64.135 40.309 mo
64.931 40.309 65.694 39.993 66.256 39.43 cv
66.819 38.868 67.135 38.105 67.135 37.309 cv
67.135 36.513 66.819 35.75 66.256 35.188 cv
65.694 34.625 64.931 34.309 64.135 34.309 cv
63.339 34.309 62.576 34.625 62.014 35.188 cv
61.451 35.75 61.135 36.513 61.135 37.309 cv
61.135 38.105 61.451 38.868 62.014 39.43 cv
62.576 39.993 63.339 40.309 64.135 40.309 cv
cp
@
92.317 52.769 mo
93.113 52.769 93.876 52.453 94.438 51.89 cv
95.001 51.328 95.317 50.565 95.317 49.769 cv
95.317 48.973 95.001 48.21 94.438 47.648 cv
93.876 47.085 93.113 46.769 92.317 46.769 cv
91.521 46.769 90.758 47.085 90.196 47.648 cv
89.633 48.21 89.317 48.973 89.317 49.769 cv
89.317 50.565 89.633 51.328 90.196 51.89 cv
90.758 52.453 91.521 52.769 92.317 52.769 cv
cp
f
92.317 52.769 mo
93.113 52.769 93.876 52.453 94.438 51.89 cv
95.001 51.328 95.317 50.565 95.317 49.769 cv
95.317 48.973 95.001 48.21 94.438 47.648 cv
93.876 47.085 93.113 46.769 92.317 46.769 cv
91.521 46.769 90.758 47.085 90.196 47.648 cv
89.633 48.21 89.317 48.973 89.317 49.769 cv
89.317 50.565 89.633 51.328 90.196 51.89 cv
90.758 52.453 91.521 52.769 92.317 52.769 cv
cp
@
120.499 54.077 mo
121.295 54.077 122.058 53.761 122.62 53.198 cv
123.183 52.636 123.499 51.873 123.499 51.077 cv
123.499 50.281 123.183 49.518 122.62 48.956 cv
122.058 48.393 121.295 48.077 120.499 48.077 cv
119.703 48.077 118.94 48.393 118.378 48.956 cv
117.815 49.518 117.499 50.281 117.499 51.077 cv
117.499 51.873 117.815 52.636 118.378 53.198 cv
118.94 53.761 119.703 54.077 120.499 54.077 cv
cp
f
120.499 54.077 mo
121.295 54.077 122.058 53.761 122.62 53.198 cv
123.183 52.636 123.499 51.873 123.499 51.077 cv
123.499 50.281 123.183 49.518 122.62 48.956 cv
122.058 48.393 121.295 48.077 120.499 48.077 cv
119.703 48.077 118.94 48.393 118.378 48.956 cv
117.815 49.518 117.499 50.281 117.499 51.077 cv
117.499 51.873 117.815 52.636 118.378 53.198 cv
118.94 53.761 119.703 54.077 120.499 54.077 cv
cp
@
148.681 55.653 mo
149.477 55.653 150.24 55.337 150.802 54.774 cv
151.365 54.212 151.681 53.449 151.681 52.653 cv
151.681 51.857 151.365 51.094 150.802 50.532 cv
150.24 49.969 149.477 49.653 148.681 49.653 cv
147.885 49.653 147.122 49.969 146.56 50.532 cv
145.997 51.094 145.681 51.857 145.681 52.653 cv
145.681 53.449 145.997 54.212 146.56 54.774 cv
147.122 55.337 147.885 55.653 148.681 55.653 cv
cp
f
148.681 55.653 mo
149.477 55.653 150.24 55.337 150.802 54.774 cv
151.365 54.212 151.681 53.449 151.681 52.653 cv
151.681 51.857 151.365 51.094 150.802 50.532 cv
150.24 49.969 149.477 49.653 148.681 49.653 cv
147.885 49.653 147.122 49.969 146.56 50.532 cv
145.997 51.094 145.681 51.857 145.681 52.653 cv
145.681 53.449 145.997 54.212 146.56 54.774 cv
147.122 55.337 147.885 55.653 148.681 55.653 cv
cp
@
176.862 56.225 mo
177.658 56.225 178.421 55.909 178.983 55.346 cv
179.546 54.784 179.862 54.021 179.862 53.225 cv
179.862 52.429 179.546 51.666 178.983 51.104 cv
178.421 50.541 177.658 50.225 176.862 50.225 cv
176.066 50.225 175.303 50.541 174.741 51.104 cv
174.178 51.666 173.862 52.429 173.862 53.225 cv
173.862 54.021 174.178 54.784 174.741 55.346 cv
175.303 55.909 176.066 56.225 176.862 56.225 cv
cp
f
176.862 56.225 mo
177.658 56.225 178.421 55.909 178.983 55.346 cv
179.546 54.784 179.862 54.021 179.862 53.225 cv
179.862 52.429 179.546 51.666 178.983 51.104 cv
178.421 50.541 177.658 50.225 176.862 50.225 cv
176.066 50.225 175.303 50.541 174.741 51.104 cv
174.178 51.666 173.862 52.429 173.862 53.225 cv
173.862 54.021 174.178 54.784 174.741 55.346 cv
175.303 55.909 176.066 56.225 176.862 56.225 cv
cp
@
205.044 51.036 mo
205.84 51.036 206.603 50.72 207.165 50.157 cv
207.728 49.595 208.044 48.832 208.044 48.036 cv
208.044 47.24 207.728 46.477 207.165 45.915 cv
206.603 45.352 205.84 45.036 205.044 45.036 cv
204.248 45.036 203.485 45.352 202.923 45.915 cv
202.36 46.477 202.044 47.24 202.044 48.036 cv
202.044 48.832 202.36 49.595 202.923 50.157 cv
203.485 50.72 204.248 51.036 205.044 51.036 cv
cp
f
205.044 51.036 mo
205.84 51.036 206.603 50.72 207.165 50.157 cv
207.728 49.595 208.044 48.832 208.044 48.036 cv
208.044 47.24 207.728 46.477 207.165 45.915 cv
206.603 45.352 205.84 45.036 205.044 45.036 cv
204.248 45.036 203.485 45.352 202.923 45.915 cv
202.36 46.477 202.044 47.24 202.044 48.036 cv
202.044 48.832 202.36 49.595 202.923 50.157 cv
203.485 50.72 204.248 51.036 205.044 51.036 cv
cp
@
233.226 47.915 mo
234.022 47.915 234.785 47.599 235.347 47.036 cv
235.91 46.474 236.226 45.711 236.226 44.915 cv
236.226 44.119 235.91 43.356 235.347 42.794 cv
234.785 42.231 234.022 41.915 233.226 41.915 cv
232.43 41.915 231.667 42.231 231.105 42.794 cv
230.542 43.356 230.226 44.119 230.226 44.915 cv
230.226 45.711 230.542 46.474 231.105 47.036 cv
231.667 47.599 232.43 47.915 233.226 47.915 cv
cp
f
233.226 47.915 mo
234.022 47.915 234.785 47.599 235.347 47.036 cv
235.91 46.474 236.226 45.711 236.226 44.915 cv
236.226 44.119 235.91 43.356 235.347 42.794 cv
234.785 42.231 234.022 41.915 233.226 41.915 cv
232.43 41.915 231.667 42.231 231.105 42.794 cv
230.542 43.356 230.226 44.119 230.226 44.915 cv
230.226 45.711 230.542 46.474 231.105 47.036 cv
231.667 47.599 232.43 47.915 233.226 47.915 cv
cp
@
261.408 53.83 mo
262.204 53.83 262.967 53.514 263.529 52.951 cv
264.092 52.389 264.408 51.626 264.408 50.83 cv
264.408 50.034 264.092 49.271 263.529 48.709 cv
262.967 48.146 262.204 47.83 261.408 47.83 cv
260.612 47.83 259.849 48.146 259.287 48.709 cv
258.724 49.271 258.408 50.034 258.408 50.83 cv
258.408 51.626 258.724 52.389 259.287 52.951 cv
259.849 53.514 260.612 53.83 261.408 53.83 cv
cp
f
261.408 53.83 mo
262.204 53.83 262.967 53.514 263.529 52.951 cv
264.092 52.389 264.408 51.626 264.408 50.83 cv
264.408 50.034 264.092 49.271 263.529 48.709 cv
262.967 48.146 262.204 47.83 261.408 47.83 cv
260.612 47.83 259.849 48.146 259.287 48.709 cv
258.724 49.271 258.408 50.034 258.408 50.83 cv
258.408 51.626 258.724 52.389 259.287 52.951 cv
259.849 53.514 260.612 53.83 261.408 53.83 cv
cp
@
289.59 50.178 mo
290.386 50.178 291.149 49.862 291.711 49.299 cv
292.274 48.737 292.59 47.974 292.59 47.178 cv
292.59 46.382 292.274 45.619 291.711 45.057 cv
291.149 44.494 290.386 44.178 289.59 44.178 cv
288.794 44.178 288.031 44.494 287.469 45.057 cv
286.906 45.619 286.59 46.382 286.59 47.178 cv
286.59 47.974 286.906 48.737 287.469 49.299 cv
288.031 49.862 288.794 50.178 289.59 50.178 cv
cp
f
289.59 50.178 mo
290.386 50.178 291.149 49.862 291.711 49.299 cv
292.274 48.737 292.59 47.974 292.59 47.178 cv
292.59 46.382 292.274 45.619 291.711 45.057 cv
291.149 44.494 290.386 44.178 289.59 44.178 cv
288.794 44.178 288.031 44.494 287.469 45.057 cv
286.906 45.619 286.59 46.382 286.59 47.178 cv
286.59 47.974 286.906 48.737 287.469 49.299 cv
288.031 49.862 288.794 50.178 289.59 50.178 cv
cp
@
317.771 49.153 mo
318.567 49.153 319.33 48.837 319.892 48.274 cv
320.455 47.712 320.771 46.949 320.771 46.153 cv
320.771 45.357 320.455 44.594 319.892 44.032 cv
319.33 43.469 318.567 43.153 317.771 43.153 cv
316.975 43.153 316.212 43.469 315.65 44.032 cv
315.087 44.594 314.771 45.357 314.771 46.153 cv
314.771 46.949 315.087 47.712 315.65 48.274 cv
316.212 48.837 316.975 49.153 317.771 49.153 cv
cp
f
317.771 49.153 mo
318.567 49.153 319.33 48.837 319.892 48.274 cv
320.455 47.712 320.771 46.949 320.771 46.153 cv
320.771 45.357 320.455 44.594 319.892 44.032 cv
319.33 43.469 318.567 43.153 317.771 43.153 cv
316.975 43.153 316.212 43.469 315.65 44.032 cv
315.087 44.594 314.771 45.357 314.771 46.153 cv
314.771 46.949 315.087 47.712 315.65 48.274 cv
316.212 48.837 316.975 49.153 317.771 49.153 cv
cp
@
.8 lw
2 lc
0 lj
51.453 135.163 mo
51.453 7.651 li
1 /0 /CSD get_res sepcs
1 sep
@
330.453 135.163 mo
330.453 7.651 li
@
51.453 135.163 mo
330.453 135.163 li
@
51.453 7.651 mo
330.453 7.651 li
@
178.772 33.782 mo
325.553 33.782 li
326.487 33.782 326.953 33.315 326.953 32.382 cv
326.953 12.551 li
326.953 11.617 326.487 11.151 325.553 11.151 cv
178.772 11.151 li
177.839 11.151 177.372 11.617 177.372 12.551 cv
177.372 32.382 li
177.372 33.315 177.839 33.782 178.772 33.782 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
178.772 33.782 mo
325.553 33.782 li
326.487 33.782 326.953 33.315 326.953 32.382 cv
326.953 12.551 li
326.953 11.617 326.487 11.151 325.553 11.151 cv
178.772 11.151 li
177.839 11.151 177.372 11.617 177.372 12.551 cv
177.372 32.382 li
177.372 33.315 177.839 33.782 178.772 33.782 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
180.172 16.813 mo
194.172 16.813 li
.883665 .769162 0 0 cmyk
@
184.172 19.813 mo
190.172 19.813 li
190.172 13.813 li
184.172 13.813 li
cp
f
1 lw
0 lc
0 lj
184.172 19.813 mo
190.172 19.813 li
190.172 13.813 li
184.172 13.813 li
cp
@
203.485 14.305 mo
203.485 14.977 li
203.219 14.851 202.974 14.76 202.743 14.697 cv
202.505 14.641 202.281 14.606 202.071 14.606 cv
201.693 14.606 201.399 14.683 201.196 14.823 cv
200.993 14.97 200.895 15.18 200.895 15.446 cv
200.895 15.67 200.958 15.845 201.098 15.957 cv
201.231 16.076 201.49 16.167 201.868 16.237 cv
202.288 16.321 li
202.799 16.419 203.177 16.594 203.422 16.839 cv
203.667 17.091 203.793 17.42 203.793 17.833 cv
203.793 18.33 203.625 18.701 203.296 18.953 cv
202.96 19.205 202.477 19.331 201.84 19.331 cv
201.595 19.331 201.336 19.303 201.063 19.254 cv
200.79 19.205 200.51 19.128 200.223 19.016 cv
200.223 18.302 li
200.503 18.463 200.776 18.582 201.042 18.659 cv
201.308 18.743 201.574 18.778 201.84 18.778 cv
202.232 18.778 202.533 18.701 202.75 18.547 cv
202.96 18.393 203.072 18.176 203.072 17.882 cv
203.072 17.63 202.995 17.434 202.841 17.294 cv
202.687 17.154 202.435 17.049 202.085 16.979 cv
201.665 16.895 li
201.147 16.797 200.776 16.636 200.545 16.412 cv
200.314 16.195 200.202 15.894 200.202 15.502 cv
200.202 15.054 200.356 14.697 200.678 14.438 cv
200.993 14.179 201.434 14.046 201.994 14.046 cv
202.232 14.046 202.47 14.067 202.722 14.109 cv
202.967 14.151 203.219 14.221 203.485 14.305 cv
1 /0 /CSD get_res sepcs
1 sep
ef
207.925 14.305 mo
207.925 14.977 li
207.659 14.851 207.414 14.76 207.183 14.697 cv
206.945 14.641 206.721 14.606 206.511 14.606 cv
206.133 14.606 205.839 14.683 205.636 14.823 cv
205.433 14.97 205.335 15.18 205.335 15.446 cv
205.335 15.67 205.398 15.845 205.538 15.957 cv
205.671 16.076 205.93 16.167 206.308 16.237 cv
206.728 16.321 li
207.239 16.419 207.617 16.594 207.862 16.839 cv
208.107 17.091 208.233 17.42 208.233 17.833 cv
208.233 18.33 208.065 18.701 207.736 18.953 cv
207.4 19.205 206.917 19.331 206.28 19.331 cv
206.035 19.331 205.776 19.303 205.503 19.254 cv
205.23 19.205 204.95 19.128 204.663 19.016 cv
204.663 18.302 li
204.943 18.463 205.216 18.582 205.482 18.659 cv
205.748 18.743 206.014 18.778 206.28 18.778 cv
206.672 18.778 206.973 18.701 207.19 18.547 cv
207.4 18.393 207.512 18.176 207.512 17.882 cv
207.512 17.63 207.435 17.434 207.281 17.294 cv
207.127 17.154 206.875 17.049 206.525 16.979 cv
206.105 16.895 li
205.587 16.797 205.216 16.636 204.985 16.412 cv
204.754 16.195 204.642 15.894 204.642 15.502 cv
204.642 15.054 204.796 14.697 205.118 14.438 cv
205.433 14.179 205.874 14.046 206.434 14.046 cv
206.672 14.046 206.91 14.067 207.162 14.109 cv
207.407 14.151 207.659 14.221 207.925 14.305 cv
ef
209.999 14.704 mo
209.999 18.673 li
210.832 18.673 li
211.532 18.673 212.05 18.519 212.379 18.197 cv
212.701 17.875 212.869 17.371 212.869 16.685 cv
212.869 15.999 212.701 15.502 212.379 15.18 cv
212.05 14.865 211.532 14.704 210.832 14.704 cv
209.999 14.704 li
209.306 14.137 mo
210.727 14.137 li
211.714 14.137 212.442 14.347 212.904 14.753 cv
213.366 15.166 213.597 15.81 213.597 16.685 cv
213.597 17.567 213.359 18.211 212.897 18.624 cv
212.435 19.037 211.707 19.24 210.727 19.24 cv
209.306 19.24 li
209.306 14.137 li
ef
214.363 17.602 mo
216.204 17.602 li
216.204 17.042 li
214.363 17.042 li
cp
f
218.85 16.412 mo
218.542 16.412 218.297 16.524 218.115 16.734 cv
217.933 16.944 217.842 17.238 217.842 17.602 cv
217.842 17.973 217.933 18.267 218.115 18.477 cv
218.297 18.687 218.542 18.792 218.85 18.792 cv
219.158 18.792 219.403 18.687 219.585 18.477 cv
219.767 18.267 219.858 17.973 219.858 17.602 cv
219.858 17.238 219.767 16.944 219.585 16.734 cv
219.403 16.524 219.158 16.412 218.85 16.412 cv
220.222 14.249 mo
220.222 14.879 li
220.047 14.795 219.872 14.732 219.697 14.69 cv
219.515 14.648 219.34 14.627 219.172 14.627 cv
218.71 14.627 218.36 14.781 218.122 15.089 cv
217.884 15.397 217.744 15.866 217.716 16.482 cv
217.849 16.286 218.017 16.132 218.22 16.027 cv
218.423 15.922 218.647 15.866 218.892 15.866 cv
219.403 15.866 219.809 16.027 220.103 16.335 cv
220.397 16.643 220.551 17.07 220.551 17.602 cv
220.551 18.127 220.39 18.547 220.082 18.862 cv
219.774 19.177 219.361 19.331 218.85 19.331 cv
218.262 19.331 217.807 19.107 217.499 18.659 cv
217.184 18.211 217.03 17.553 217.03 16.692 cv
217.03 15.887 217.219 15.243 217.604 14.767 cv
217.982 14.291 218.5 14.046 219.144 14.046 cv
219.312 14.046 219.487 14.067 219.669 14.095 cv
219.844 14.13 220.026 14.179 220.222 14.249 cv
ef
223.626 14.739 mo
221.883 17.462 li
223.626 17.462 li
223.626 14.739 li
223.444 14.137 mo
224.312 14.137 li
224.312 17.462 li
225.04 17.462 li
225.04 18.036 li
224.312 18.036 li
224.312 19.24 li
223.626 19.24 li
223.626 18.036 li
221.323 18.036 li
221.323 17.371 li
223.444 14.137 li
ef
226.226 14.137 mo
227.255 14.137 li
228.557 17.609 li
229.866 14.137 li
230.895 14.137 li
230.895 19.24 li
230.223 19.24 li
230.223 14.76 li
228.907 18.26 li
228.214 18.26 li
226.898 14.76 li
226.898 19.24 li
226.226 19.24 li
226.226 14.137 li
ef
232.919 16.804 mo
232.919 18.673 li
234.025 18.673 li
234.396 18.673 234.669 18.596 234.851 18.442 cv
235.026 18.288 235.117 18.057 235.117 17.735 cv
235.117 17.42 235.026 17.189 234.851 17.035 cv
234.669 16.881 234.396 16.804 234.025 16.804 cv
232.919 16.804 li
232.919 14.704 mo
232.919 16.244 li
233.941 16.244 li
234.277 16.244 234.522 16.181 234.69 16.055 cv
234.858 15.929 234.942 15.74 234.942 15.474 cv
234.942 15.222 234.858 15.026 234.69 14.9 cv
234.522 14.774 234.277 14.704 233.941 14.704 cv
232.919 14.704 li
232.226 14.137 mo
233.99 14.137 li
234.515 14.137 234.921 14.249 235.208 14.466 cv
235.488 14.69 235.635 14.998 235.635 15.397 cv
235.635 15.712 235.558 15.964 235.411 16.146 cv
235.264 16.328 235.054 16.447 234.774 16.489 cv
235.11 16.566 235.376 16.72 235.565 16.951 cv
235.747 17.182 235.845 17.469 235.845 17.812 cv
235.845 18.274 235.684 18.624 235.376 18.869 cv
235.068 19.121 234.627 19.24 234.06 19.24 cv
232.226 19.24 li
232.226 14.137 li
ef
1.5 lw
2 lc
1 lj
180.172 27.079 mo
194.172 27.079 li
.883665 .769162 0 0 cmyk
@
187.172 30.079 mo
187.968 30.079 188.731 29.763 189.293 29.2 cv
189.856 28.638 190.172 27.875 190.172 27.079 cv
190.172 26.283 189.856 25.52 189.293 24.958 cv
188.731 24.395 187.968 24.079 187.172 24.079 cv
186.376 24.079 185.613 24.395 185.051 24.958 cv
184.488 25.52 184.172 26.283 184.172 27.079 cv
184.172 27.875 184.488 28.638 185.051 29.2 cv
185.613 29.763 186.376 30.079 187.172 30.079 cv
cp
f
1 lw
0 lc
187.172 30.079 mo
187.968 30.079 188.731 29.763 189.293 29.2 cv
189.856 28.638 190.172 27.875 190.172 27.079 cv
190.172 26.283 189.856 25.52 189.293 24.958 cv
188.731 24.395 187.968 24.079 187.172 24.079 cv
186.376 24.079 185.613 24.395 185.051 24.958 cv
184.488 25.52 184.172 26.283 184.172 27.079 cv
184.172 27.875 184.488 28.638 185.051 29.2 cv
185.613 29.763 186.376 30.079 187.172 30.079 cv
cp
@
203.485 24.625 mo
203.485 25.297 li
203.219 25.171 202.974 25.08 202.743 25.017 cv
202.505 24.961 202.281 24.926 202.071 24.926 cv
201.693 24.926 201.399 25.003 201.196 25.143 cv
200.993 25.29 200.895 25.5 200.895 25.766 cv
200.895 25.99 200.958 26.165 201.098 26.277 cv
201.231 26.396 201.49 26.487 201.868 26.557 cv
202.288 26.641 li
202.799 26.739 203.177 26.914 203.422 27.159 cv
203.667 27.411 203.793 27.74 203.793 28.153 cv
203.793 28.65 203.625 29.021 203.296 29.273 cv
202.96 29.525 202.477 29.651 201.84 29.651 cv
201.595 29.651 201.336 29.623 201.063 29.574 cv
200.79 29.525 200.51 29.448 200.223 29.336 cv
200.223 28.622 li
200.503 28.783 200.776 28.902 201.042 28.979 cv
201.308 29.063 201.574 29.098 201.84 29.098 cv
202.232 29.098 202.533 29.021 202.75 28.867 cv
202.96 28.713 203.072 28.496 203.072 28.202 cv
203.072 27.95 202.995 27.754 202.841 27.614 cv
202.687 27.474 202.435 27.369 202.085 27.299 cv
201.665 27.215 li
201.147 27.117 200.776 26.956 200.545 26.732 cv
200.314 26.515 200.202 26.214 200.202 25.822 cv
200.202 25.374 200.356 25.017 200.678 24.758 cv
200.993 24.499 201.434 24.366 201.994 24.366 cv
202.232 24.366 202.47 24.387 202.722 24.429 cv
202.967 24.471 203.219 24.541 203.485 24.625 cv
1 /0 /CSD get_res sepcs
1 sep
ef
207.925 24.625 mo
207.925 25.297 li
207.659 25.171 207.414 25.08 207.183 25.017 cv
206.945 24.961 206.721 24.926 206.511 24.926 cv
206.133 24.926 205.839 25.003 205.636 25.143 cv
205.433 25.29 205.335 25.5 205.335 25.766 cv
205.335 25.99 205.398 26.165 205.538 26.277 cv
205.671 26.396 205.93 26.487 206.308 26.557 cv
206.728 26.641 li
207.239 26.739 207.617 26.914 207.862 27.159 cv
208.107 27.411 208.233 27.74 208.233 28.153 cv
208.233 28.65 208.065 29.021 207.736 29.273 cv
207.4 29.525 206.917 29.651 206.28 29.651 cv
206.035 29.651 205.776 29.623 205.503 29.574 cv
205.23 29.525 204.95 29.448 204.663 29.336 cv
204.663 28.622 li
204.943 28.783 205.216 28.902 205.482 28.979 cv
205.748 29.063 206.014 29.098 206.28 29.098 cv
206.672 29.098 206.973 29.021 207.19 28.867 cv
207.4 28.713 207.512 28.496 207.512 28.202 cv
207.512 27.95 207.435 27.754 207.281 27.614 cv
207.127 27.474 206.875 27.369 206.525 27.299 cv
206.105 27.215 li
205.587 27.117 205.216 26.956 204.985 26.732 cv
204.754 26.515 204.642 26.214 204.642 25.822 cv
204.642 25.374 204.796 25.017 205.118 24.758 cv
205.433 24.499 205.874 24.366 206.434 24.366 cv
206.672 24.366 206.91 24.387 207.162 24.429 cv
207.407 24.471 207.659 24.541 207.925 24.625 cv
ef
209.999 25.024 mo
209.999 28.993 li
210.832 28.993 li
211.532 28.993 212.05 28.839 212.379 28.517 cv
212.701 28.195 212.869 27.691 212.869 27.005 cv
212.869 26.319 212.701 25.822 212.379 25.5 cv
212.05 25.185 211.532 25.024 210.832 25.024 cv
209.999 25.024 li
209.306 24.457 mo
210.727 24.457 li
211.714 24.457 212.442 24.667 212.904 25.073 cv
213.366 25.486 213.597 26.13 213.597 27.005 cv
213.597 27.887 213.359 28.531 212.897 28.944 cv
212.435 29.357 211.707 29.56 210.727 29.56 cv
209.306 29.56 li
209.306 24.457 li
ef
214.363 27.922 mo
216.204 27.922 li
216.204 27.362 li
214.363 27.362 li
cp
f
218.85 26.732 mo
218.542 26.732 218.297 26.844 218.115 27.054 cv
217.933 27.264 217.842 27.558 217.842 27.922 cv
217.842 28.293 217.933 28.587 218.115 28.797 cv
218.297 29.007 218.542 29.112 218.85 29.112 cv
219.158 29.112 219.403 29.007 219.585 28.797 cv
219.767 28.587 219.858 28.293 219.858 27.922 cv
219.858 27.558 219.767 27.264 219.585 27.054 cv
219.403 26.844 219.158 26.732 218.85 26.732 cv
220.222 24.569 mo
220.222 25.199 li
220.047 25.115 219.872 25.052 219.697 25.01 cv
219.515 24.968 219.34 24.947 219.172 24.947 cv
218.71 24.947 218.36 25.101 218.122 25.409 cv
217.884 25.717 217.744 26.186 217.716 26.802 cv
217.849 26.606 218.017 26.452 218.22 26.347 cv
218.423 26.242 218.647 26.186 218.892 26.186 cv
219.403 26.186 219.809 26.347 220.103 26.655 cv
220.397 26.963 220.551 27.39 220.551 27.922 cv
220.551 28.447 220.39 28.867 220.082 29.182 cv
219.774 29.497 219.361 29.651 218.85 29.651 cv
218.262 29.651 217.807 29.427 217.499 28.979 cv
217.184 28.531 217.03 27.873 217.03 27.012 cv
217.03 26.207 217.219 25.563 217.604 25.087 cv
217.982 24.611 218.5 24.366 219.144 24.366 cv
219.312 24.366 219.487 24.387 219.669 24.415 cv
219.844 24.45 220.026 24.499 220.222 24.569 cv
ef
223.626 25.059 mo
221.883 27.782 li
223.626 27.782 li
223.626 25.059 li
223.444 24.457 mo
224.312 24.457 li
224.312 27.782 li
225.04 27.782 li
225.04 28.356 li
224.312 28.356 li
224.312 29.56 li
223.626 29.56 li
223.626 28.356 li
221.323 28.356 li
221.323 27.691 li
223.444 24.457 li
ef
226.226 24.457 mo
227.255 24.457 li
228.557 27.929 li
229.866 24.457 li
230.895 24.457 li
230.895 29.56 li
230.223 29.56 li
230.223 25.08 li
228.907 28.58 li
228.214 28.58 li
226.898 25.08 li
226.898 29.56 li
226.226 29.56 li
226.226 24.457 li
ef
232.919 27.124 mo
232.919 28.993 li
234.025 28.993 li
234.396 28.993 234.669 28.916 234.851 28.762 cv
235.026 28.608 235.117 28.377 235.117 28.055 cv
235.117 27.74 235.026 27.509 234.851 27.355 cv
234.669 27.201 234.396 27.124 234.025 27.124 cv
232.919 27.124 li
232.919 25.024 mo
232.919 26.564 li
233.941 26.564 li
234.277 26.564 234.522 26.501 234.69 26.375 cv
234.858 26.249 234.942 26.06 234.942 25.794 cv
234.942 25.542 234.858 25.346 234.69 25.22 cv
234.522 25.094 234.277 25.024 233.941 25.024 cv
232.919 25.024 li
232.226 24.457 mo
233.99 24.457 li
234.515 24.457 234.921 24.569 235.208 24.786 cv
235.488 25.01 235.635 25.318 235.635 25.717 cv
235.635 26.032 235.558 26.284 235.411 26.466 cv
235.264 26.648 235.054 26.767 234.774 26.809 cv
235.11 26.886 235.376 27.04 235.565 27.271 cv
235.747 27.502 235.845 27.789 235.845 28.132 cv
235.845 28.594 235.684 28.944 235.376 29.189 cv
235.068 29.441 234.627 29.56 234.06 29.56 cv
232.226 29.56 li
232.226 24.457 li
ef
239.63 25.297 mo
238.405 25.962 li
239.63 26.627 li
239.434 26.963 li
238.286 26.27 li
238.286 27.558 li
237.894 27.558 li
237.894 26.27 li
236.746 26.963 li
236.55 26.627 li
237.775 25.962 li
236.55 25.297 li
236.746 24.961 li
237.894 25.654 li
237.894 24.366 li
238.286 24.366 li
238.286 25.654 li
239.434 24.961 li
239.63 25.297 li
ef
241.164 28.979 mo
243.572 28.979 li
243.572 29.56 li
240.331 29.56 li
240.331 28.979 li
240.59 28.713 240.947 28.349 241.402 27.887 cv
241.85 27.432 242.137 27.138 242.256 27.005 cv
242.48 26.76 242.634 26.55 242.718 26.375 cv
242.802 26.207 242.851 26.032 242.851 25.864 cv
242.851 25.598 242.753 25.374 242.564 25.206 cv
242.375 25.038 242.13 24.947 241.822 24.947 cv
241.605 24.947 241.374 24.989 241.136 25.059 cv
240.898 25.136 240.639 25.248 240.366 25.402 cv
240.366 24.702 li
240.646 24.59 240.905 24.506 241.143 24.45 cv
241.381 24.394 241.605 24.366 241.808 24.366 cv
242.333 24.366 242.753 24.499 243.068 24.765 cv
243.383 25.031 243.544 25.381 243.544 25.822 cv
243.544 26.032 243.502 26.235 243.425 26.417 cv
243.348 26.606 243.208 26.83 242.998 27.082 cv
242.942 27.152 242.76 27.341 242.452 27.656 cv
242.144 27.971 241.717 28.412 241.164 28.979 cv
ef
1.5 lw
2 lc
258.272 16.813 mo
272.272 16.813 li
0 .993988 1 0 cmyk
@
262.272 19.813 mo
268.272 19.813 li
268.272 13.813 li
262.272 13.813 li
cp
f
1 lw
0 lc
0 lj
262.272 19.813 mo
268.272 19.813 li
268.272 13.813 li
262.272 13.813 li
cp
@
278.546 14.137 mo
279.239 14.137 li
279.239 16.23 li
281.745 16.23 li
281.745 14.137 li
282.438 14.137 li
282.438 19.24 li
281.745 19.24 li
281.745 16.811 li
279.239 16.811 li
279.239 19.24 li
278.546 19.24 li
278.546 14.137 li
1 /0 /CSD get_res sepcs
1 sep
ef
284.519 14.704 mo
284.519 18.673 li
285.352 18.673 li
286.052 18.673 286.57 18.519 286.899 18.197 cv
287.221 17.875 287.389 17.371 287.389 16.685 cv
287.389 15.999 287.221 15.502 286.899 15.18 cv
286.57 14.865 286.052 14.704 285.352 14.704 cv
284.519 14.704 li
283.826 14.137 mo
285.247 14.137 li
286.234 14.137 286.962 14.347 287.424 14.753 cv
287.886 15.166 288.117 15.81 288.117 16.685 cv
288.117 17.567 287.879 18.211 287.417 18.624 cv
286.955 19.037 286.227 19.24 285.247 19.24 cv
283.826 19.24 li
283.826 14.137 li
ef
289.919 14.704 mo
289.919 18.673 li
290.752 18.673 li
291.452 18.673 291.97 18.519 292.299 18.197 cv
292.621 17.875 292.789 17.371 292.789 16.685 cv
292.789 15.999 292.621 15.502 292.299 15.18 cv
291.97 14.865 291.452 14.704 290.752 14.704 cv
289.919 14.704 li
289.226 14.137 mo
290.647 14.137 li
291.634 14.137 292.362 14.347 292.824 14.753 cv
293.286 15.166 293.517 15.81 293.517 16.685 cv
293.517 17.567 293.279 18.211 292.817 18.624 cv
292.355 19.037 291.627 19.24 290.647 19.24 cv
289.226 19.24 li
289.226 14.137 li
ef
294.283 17.602 mo
296.124 17.602 li
296.124 17.042 li
294.283 17.042 li
cp
f
298.77 16.412 mo
298.462 16.412 298.217 16.524 298.035 16.734 cv
297.853 16.944 297.762 17.238 297.762 17.602 cv
297.762 17.973 297.853 18.267 298.035 18.477 cv
298.217 18.687 298.462 18.792 298.77 18.792 cv
299.078 18.792 299.323 18.687 299.505 18.477 cv
299.687 18.267 299.778 17.973 299.778 17.602 cv
299.778 17.238 299.687 16.944 299.505 16.734 cv
299.323 16.524 299.078 16.412 298.77 16.412 cv
300.142 14.249 mo
300.142 14.879 li
299.967 14.795 299.792 14.732 299.617 14.69 cv
299.435 14.648 299.26 14.627 299.092 14.627 cv
298.63 14.627 298.28 14.781 298.042 15.089 cv
297.804 15.397 297.664 15.866 297.636 16.482 cv
297.769 16.286 297.937 16.132 298.14 16.027 cv
298.343 15.922 298.567 15.866 298.812 15.866 cv
299.323 15.866 299.729 16.027 300.023 16.335 cv
300.317 16.643 300.471 17.07 300.471 17.602 cv
300.471 18.127 300.31 18.547 300.002 18.862 cv
299.694 19.177 299.281 19.331 298.77 19.331 cv
298.182 19.331 297.727 19.107 297.419 18.659 cv
297.104 18.211 296.95 17.553 296.95 16.692 cv
296.95 15.887 297.139 15.243 297.524 14.767 cv
297.902 14.291 298.42 14.046 299.064 14.046 cv
299.232 14.046 299.407 14.067 299.589 14.095 cv
299.764 14.13 299.946 14.179 300.142 14.249 cv
ef
303.546 14.739 mo
301.803 17.462 li
303.546 17.462 li
303.546 14.739 li
303.364 14.137 mo
304.232 14.137 li
304.232 17.462 li
304.96 17.462 li
304.96 18.036 li
304.232 18.036 li
304.232 19.24 li
303.546 19.24 li
303.546 18.036 li
301.243 18.036 li
301.243 17.371 li
303.364 14.137 li
ef
306.026 14.137 mo
307.055 14.137 li
308.357 17.609 li
309.666 14.137 li
310.695 14.137 li
310.695 19.24 li
310.023 19.24 li
310.023 14.76 li
308.707 18.26 li
308.014 18.26 li
306.698 14.76 li
306.698 19.24 li
306.026 19.24 li
306.026 14.137 li
ef
312.719 16.804 mo
312.719 18.673 li
313.825 18.673 li
314.196 18.673 314.469 18.596 314.651 18.442 cv
314.826 18.288 314.917 18.057 314.917 17.735 cv
314.917 17.42 314.826 17.189 314.651 17.035 cv
314.469 16.881 314.196 16.804 313.825 16.804 cv
312.719 16.804 li
312.719 14.704 mo
312.719 16.244 li
313.741 16.244 li
314.077 16.244 314.322 16.181 314.49 16.055 cv
314.658 15.929 314.742 15.74 314.742 15.474 cv
314.742 15.222 314.658 15.026 314.49 14.9 cv
314.322 14.774 314.077 14.704 313.741 14.704 cv
312.719 14.704 li
312.026 14.137 mo
313.79 14.137 li
314.315 14.137 314.721 14.249 315.008 14.466 cv
315.288 14.69 315.435 14.998 315.435 15.397 cv
315.435 15.712 315.358 15.964 315.211 16.146 cv
315.064 16.328 314.854 16.447 314.574 16.489 cv
314.91 16.566 315.176 16.72 315.365 16.951 cv
315.547 17.182 315.645 17.469 315.645 17.812 cv
315.645 18.274 315.484 18.624 315.176 18.869 cv
314.868 19.121 314.427 19.24 313.86 19.24 cv
312.026 19.24 li
312.026 14.137 li
ef
1.5 lw
2 lc
1 lj
258.272 27.079 mo
272.272 27.079 li
0 .993988 1 0 cmyk
@
265.272 30.079 mo
266.068 30.079 266.831 29.763 267.393 29.2 cv
267.956 28.638 268.272 27.875 268.272 27.079 cv
268.272 26.283 267.956 25.52 267.393 24.958 cv
266.831 24.395 266.068 24.079 265.272 24.079 cv
264.476 24.079 263.713 24.395 263.151 24.958 cv
262.588 25.52 262.272 26.283 262.272 27.079 cv
262.272 27.875 262.588 28.638 263.151 29.2 cv
263.713 29.763 264.476 30.079 265.272 30.079 cv
cp
f
1 lw
0 lc
265.272 30.079 mo
266.068 30.079 266.831 29.763 267.393 29.2 cv
267.956 28.638 268.272 27.875 268.272 27.079 cv
268.272 26.283 267.956 25.52 267.393 24.958 cv
266.831 24.395 266.068 24.079 265.272 24.079 cv
264.476 24.079 263.713 24.395 263.151 24.958 cv
262.588 25.52 262.272 26.283 262.272 27.079 cv
262.272 27.875 262.588 28.638 263.151 29.2 cv
263.713 29.763 264.476 30.079 265.272 30.079 cv
cp
@
278.546 24.457 mo
279.239 24.457 li
279.239 26.55 li
281.745 26.55 li
281.745 24.457 li
282.438 24.457 li
282.438 29.56 li
281.745 29.56 li
281.745 27.131 li
279.239 27.131 li
279.239 29.56 li
278.546 29.56 li
278.546 24.457 li
1 /0 /CSD get_res sepcs
1 sep
ef
284.519 25.024 mo
284.519 28.993 li
285.352 28.993 li
286.052 28.993 286.57 28.839 286.899 28.517 cv
287.221 28.195 287.389 27.691 287.389 27.005 cv
287.389 26.319 287.221 25.822 286.899 25.5 cv
286.57 25.185 286.052 25.024 285.352 25.024 cv
284.519 25.024 li
283.826 24.457 mo
285.247 24.457 li
286.234 24.457 286.962 24.667 287.424 25.073 cv
287.886 25.486 288.117 26.13 288.117 27.005 cv
288.117 27.887 287.879 28.531 287.417 28.944 cv
286.955 29.357 286.227 29.56 285.247 29.56 cv
283.826 29.56 li
283.826 24.457 li
ef
289.919 25.024 mo
289.919 28.993 li
290.752 28.993 li
291.452 28.993 291.97 28.839 292.299 28.517 cv
292.621 28.195 292.789 27.691 292.789 27.005 cv
292.789 26.319 292.621 25.822 292.299 25.5 cv
291.97 25.185 291.452 25.024 290.752 25.024 cv
289.919 25.024 li
289.226 24.457 mo
290.647 24.457 li
291.634 24.457 292.362 24.667 292.824 25.073 cv
293.286 25.486 293.517 26.13 293.517 27.005 cv
293.517 27.887 293.279 28.531 292.817 28.944 cv
292.355 29.357 291.627 29.56 290.647 29.56 cv
289.226 29.56 li
289.226 24.457 li
ef
294.283 27.922 mo
296.124 27.922 li
296.124 27.362 li
294.283 27.362 li
cp
f
298.77 26.732 mo
298.462 26.732 298.217 26.844 298.035 27.054 cv
297.853 27.264 297.762 27.558 297.762 27.922 cv
297.762 28.293 297.853 28.587 298.035 28.797 cv
298.217 29.007 298.462 29.112 298.77 29.112 cv
299.078 29.112 299.323 29.007 299.505 28.797 cv
299.687 28.587 299.778 28.293 299.778 27.922 cv
299.778 27.558 299.687 27.264 299.505 27.054 cv
299.323 26.844 299.078 26.732 298.77 26.732 cv
300.142 24.569 mo
300.142 25.199 li
299.967 25.115 299.792 25.052 299.617 25.01 cv
299.435 24.968 299.26 24.947 299.092 24.947 cv
298.63 24.947 298.28 25.101 298.042 25.409 cv
297.804 25.717 297.664 26.186 297.636 26.802 cv
297.769 26.606 297.937 26.452 298.14 26.347 cv
298.343 26.242 298.567 26.186 298.812 26.186 cv
299.323 26.186 299.729 26.347 300.023 26.655 cv
300.317 26.963 300.471 27.39 300.471 27.922 cv
300.471 28.447 300.31 28.867 300.002 29.182 cv
299.694 29.497 299.281 29.651 298.77 29.651 cv
298.182 29.651 297.727 29.427 297.419 28.979 cv
297.104 28.531 296.95 27.873 296.95 27.012 cv
296.95 26.207 297.139 25.563 297.524 25.087 cv
297.902 24.611 298.42 24.366 299.064 24.366 cv
299.232 24.366 299.407 24.387 299.589 24.415 cv
299.764 24.45 299.946 24.499 300.142 24.569 cv
ef
303.546 25.059 mo
301.803 27.782 li
303.546 27.782 li
303.546 25.059 li
303.364 24.457 mo
304.232 24.457 li
304.232 27.782 li
304.96 27.782 li
304.96 28.356 li
304.232 28.356 li
304.232 29.56 li
303.546 29.56 li
303.546 28.356 li
301.243 28.356 li
301.243 27.691 li
303.364 24.457 li
ef
306.026 24.457 mo
307.055 24.457 li
308.357 27.929 li
309.666 24.457 li
310.695 24.457 li
310.695 29.56 li
310.023 29.56 li
310.023 25.08 li
308.707 28.58 li
308.014 28.58 li
306.698 25.08 li
306.698 29.56 li
306.026 29.56 li
306.026 24.457 li
ef
312.719 27.124 mo
312.719 28.993 li
313.825 28.993 li
314.196 28.993 314.469 28.916 314.651 28.762 cv
314.826 28.608 314.917 28.377 314.917 28.055 cv
314.917 27.74 314.826 27.509 314.651 27.355 cv
314.469 27.201 314.196 27.124 313.825 27.124 cv
312.719 27.124 li
312.719 25.024 mo
312.719 26.564 li
313.741 26.564 li
314.077 26.564 314.322 26.501 314.49 26.375 cv
314.658 26.249 314.742 26.06 314.742 25.794 cv
314.742 25.542 314.658 25.346 314.49 25.22 cv
314.322 25.094 314.077 25.024 313.741 25.024 cv
312.719 25.024 li
312.026 24.457 mo
313.79 24.457 li
314.315 24.457 314.721 24.569 315.008 24.786 cv
315.288 25.01 315.435 25.318 315.435 25.717 cv
315.435 26.032 315.358 26.284 315.211 26.466 cv
315.064 26.648 314.854 26.767 314.574 26.809 cv
314.91 26.886 315.176 27.04 315.365 27.271 cv
315.547 27.502 315.645 27.789 315.645 28.132 cv
315.645 28.594 315.484 28.944 315.176 29.189 cv
314.868 29.441 314.427 29.56 313.86 29.56 cv
312.026 29.56 li
312.026 24.457 li
ef
319.43 25.297 mo
318.205 25.962 li
319.43 26.627 li
319.234 26.963 li
318.086 26.27 li
318.086 27.558 li
317.694 27.558 li
317.694 26.27 li
316.546 26.963 li
316.35 26.627 li
317.575 25.962 li
316.35 25.297 li
316.546 24.961 li
317.694 25.654 li
317.694 24.366 li
318.086 24.366 li
318.086 25.654 li
319.234 24.961 li
319.43 25.297 li
ef
321.084 28.979 mo
323.492 28.979 li
323.492 29.56 li
320.251 29.56 li
320.251 28.979 li
320.51 28.713 320.867 28.349 321.322 27.887 cv
321.77 27.432 322.057 27.138 322.176 27.005 cv
322.4 26.76 322.554 26.55 322.638 26.375 cv
322.722 26.207 322.771 26.032 322.771 25.864 cv
322.771 25.598 322.673 25.374 322.484 25.206 cv
322.295 25.038 322.05 24.947 321.742 24.947 cv
321.525 24.947 321.294 24.989 321.056 25.059 cv
320.818 25.136 320.559 25.248 320.286 25.402 cv
320.286 24.702 li
320.566 24.59 320.825 24.506 321.063 24.45 cv
321.301 24.394 321.525 24.366 321.728 24.366 cv
322.253 24.366 322.673 24.499 322.988 24.765 cv
323.303 25.031 323.464 25.381 323.464 25.822 cv
323.464 26.032 323.422 26.235 323.345 26.417 cv
323.268 26.606 323.128 26.83 322.918 27.082 cv
322.862 27.152 322.68 27.341 322.372 27.656 cv
322.064 27.971 321.637 28.412 321.084 28.979 cv
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
