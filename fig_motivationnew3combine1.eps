%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP9248.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/21, 23:48:58
%%BoundingBox: 0 0 410 328
%%HiResBoundingBox: 0 0 410 328
%%CropBox: 0 0 410 328
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 970 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2019-09-21T23:45:28+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-21T23:45:28+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmpMM:DocumentID="uuid:ba71035e-2b9c-4cf8-be6c-8df37aed9dfd"
   xmpMM:InstanceID="uuid:b97dab62-50e1-45e6-9584-0d3c581d99f8">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_motivationnew3combine1.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -328 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 328 li
410 328 li
410 0 li
cp
clp
.059998 328 mo
410.1 328 li
410.1 .0400085 li
.059998 .0400085 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
46.166 273.306 mo
403.286 273.306 li
403.286 7.194 li
46.166 7.194 li
cp
f
55.773 273.306 mo
55.773 276.806 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
55.773 273.306 mo
55.773 276.806 li
@
55.752 281.624 mo
55.038 281.624 54.506 281.974 54.142 282.674 cv
53.778 283.374 53.61 284.424 53.61 285.824 cv
53.61 287.224 53.778 288.274 54.142 288.974 cv
54.506 289.674 55.038 290.024 55.752 290.024 cv
56.466 290.024 56.998 289.674 57.362 288.974 cv
57.712 288.274 57.894 287.224 57.894 285.824 cv
57.894 284.424 57.712 283.374 57.362 282.674 cv
56.998 281.974 56.466 281.624 55.752 281.624 cv
55.752 280.532 mo
56.886 280.532 57.754 280.994 58.37 281.89 cv
58.972 282.8 59.28 284.116 59.28 285.824 cv
59.28 287.546 58.972 288.862 58.37 289.758 cv
57.754 290.654 56.886 291.102 55.752 291.102 cv
54.604 291.102 53.722 290.654 53.12 289.758 cv
52.518 288.862 52.224 287.546 52.224 285.824 cv
52.224 284.116 52.518 282.8 53.12 281.89 cv
53.722 280.994 54.604 280.532 55.752 280.532 cv
ef
122.029 273.306 mo
122.029 276.806 li
f
122.029 273.306 mo
122.029 276.806 li
@
114.836 289.758 mo
117.09 289.758 li
117.09 281.974 li
114.64 282.464 li
114.64 281.204 li
117.076 280.714 li
118.462 280.714 li
118.462 289.758 li
120.716 289.758 li
120.716 290.92 li
114.836 290.92 li
114.836 289.758 li
ef
126.432 281.624 mo
125.718 281.624 125.186 281.974 124.822 282.674 cv
124.458 283.374 124.29 284.424 124.29 285.824 cv
124.29 287.224 124.458 288.274 124.822 288.974 cv
125.186 289.674 125.718 290.024 126.432 290.024 cv
127.146 290.024 127.678 289.674 128.042 288.974 cv
128.392 288.274 128.574 287.224 128.574 285.824 cv
128.574 284.424 128.392 283.374 128.042 282.674 cv
127.678 281.974 127.146 281.624 126.432 281.624 cv
126.432 280.532 mo
127.566 280.532 128.434 280.994 129.05 281.89 cv
129.652 282.8 129.96 284.116 129.96 285.824 cv
129.96 287.546 129.652 288.862 129.05 289.758 cv
128.434 290.654 127.566 291.102 126.432 291.102 cv
125.284 291.102 124.402 290.654 123.8 289.758 cv
123.198 288.862 122.904 287.546 122.904 285.824 cv
122.904 284.116 123.198 282.8 123.8 281.89 cv
124.402 280.994 125.284 280.532 126.432 280.532 cv
ef
188.285 273.306 mo
188.285 276.806 li
f
188.285 273.306 mo
188.285 276.806 li
@
182.028 289.758 mo
186.844 289.758 li
186.844 290.92 li
180.362 290.92 li
180.362 289.758 li
180.88 289.226 181.594 288.498 182.504 287.574 cv
183.4 286.664 183.974 286.076 184.212 285.81 cv
184.66 285.32 184.968 284.9 185.136 284.55 cv
185.304 284.214 185.402 283.864 185.402 283.528 cv
185.402 282.996 185.206 282.548 184.828 282.212 cv
184.45 281.876 183.96 281.694 183.344 281.694 cv
182.91 281.694 182.448 281.778 181.972 281.918 cv
181.496 282.072 180.978 282.296 180.432 282.604 cv
180.432 281.204 li
180.992 280.98 181.51 280.812 181.986 280.7 cv
182.462 280.588 182.91 280.532 183.316 280.532 cv
184.366 280.532 185.206 280.798 185.836 281.33 cv
186.466 281.862 186.788 282.562 186.788 283.444 cv
186.788 283.864 186.704 284.27 186.55 284.634 cv
186.396 285.012 186.116 285.46 185.696 285.964 cv
185.584 286.104 185.22 286.482 184.604 287.112 cv
183.988 287.742 183.134 288.624 182.028 289.758 cv
ef
192.792 281.624 mo
192.078 281.624 191.546 281.974 191.182 282.674 cv
190.818 283.374 190.65 284.424 190.65 285.824 cv
190.65 287.224 190.818 288.274 191.182 288.974 cv
191.546 289.674 192.078 290.024 192.792 290.024 cv
193.506 290.024 194.038 289.674 194.402 288.974 cv
194.752 288.274 194.934 287.224 194.934 285.824 cv
194.934 284.424 194.752 283.374 194.402 282.674 cv
194.038 281.974 193.506 281.624 192.792 281.624 cv
192.792 280.532 mo
193.926 280.532 194.794 280.994 195.41 281.89 cv
196.012 282.8 196.32 284.116 196.32 285.824 cv
196.32 287.546 196.012 288.862 195.41 289.758 cv
194.794 290.654 193.926 291.102 192.792 291.102 cv
191.644 291.102 190.762 290.654 190.16 289.758 cv
189.558 288.862 189.264 287.546 189.264 285.824 cv
189.264 284.116 189.558 282.8 190.16 281.89 cv
190.762 280.994 191.644 280.532 192.792 280.532 cv
ef
254.541 273.306 mo
254.541 276.806 li
f
254.541 273.306 mo
254.541 276.806 li
@
251.264 285.418 mo
251.922 285.558 252.44 285.852 252.804 286.3 cv
253.168 286.748 253.364 287.308 253.364 287.952 cv
253.364 288.96 253.014 289.744 252.328 290.29 cv
251.628 290.836 250.648 291.102 249.374 291.102 cv
248.94 291.102 248.492 291.06 248.044 290.976 cv
247.596 290.906 247.12 290.78 246.644 290.612 cv
246.644 289.282 li
247.022 289.506 247.442 289.674 247.904 289.786 cv
248.352 289.898 248.828 289.954 249.332 289.954 cv
250.2 289.954 250.858 289.786 251.306 289.45 cv
251.754 289.114 251.992 288.61 251.992 287.952 cv
251.992 287.364 251.782 286.888 251.362 286.552 cv
250.942 286.216 250.354 286.034 249.598 286.034 cv
248.408 286.034 li
248.408 284.9 li
249.654 284.9 li
250.326 284.9 250.844 284.774 251.208 284.494 cv
251.572 284.228 251.754 283.836 251.754 283.318 cv
251.754 282.8 251.558 282.394 251.194 282.114 cv
250.816 281.834 250.284 281.694 249.598 281.694 cv
249.22 281.694 248.814 281.736 248.38 281.82 cv
247.946 281.904 247.47 282.03 246.952 282.198 cv
246.952 280.966 li
247.47 280.826 247.96 280.714 248.422 280.644 cv
248.87 280.574 249.304 280.532 249.724 280.532 cv
250.76 280.532 251.586 280.77 252.202 281.246 cv
252.818 281.722 253.126 282.366 253.126 283.178 cv
253.126 283.738 252.958 284.214 252.636 284.606 cv
252.314 284.998 251.852 285.278 251.264 285.418 cv
ef
259.032 281.624 mo
258.318 281.624 257.786 281.974 257.422 282.674 cv
257.058 283.374 256.89 284.424 256.89 285.824 cv
256.89 287.224 257.058 288.274 257.422 288.974 cv
257.786 289.674 258.318 290.024 259.032 290.024 cv
259.746 290.024 260.278 289.674 260.642 288.974 cv
260.992 288.274 261.174 287.224 261.174 285.824 cv
261.174 284.424 260.992 283.374 260.642 282.674 cv
260.278 281.974 259.746 281.624 259.032 281.624 cv
259.032 280.532 mo
260.166 280.532 261.034 280.994 261.65 281.89 cv
262.252 282.8 262.56 284.116 262.56 285.824 cv
262.56 287.546 262.252 288.862 261.65 289.758 cv
261.034 290.654 260.166 291.102 259.032 291.102 cv
257.884 291.102 257.002 290.654 256.4 289.758 cv
255.798 288.862 255.504 287.546 255.504 285.824 cv
255.504 284.116 255.798 282.8 256.4 281.89 cv
257.002 280.994 257.884 280.532 259.032 280.532 cv
ef
320.797 273.306 mo
320.797 276.806 li
f
320.797 273.306 mo
320.797 276.806 li
@
317.232 281.918 mo
313.746 287.364 li
317.232 287.364 li
317.232 281.918 li
316.868 280.714 mo
318.604 280.714 li
318.604 287.364 li
320.06 287.364 li
320.06 288.512 li
318.604 288.512 li
318.604 290.92 li
317.232 290.92 li
317.232 288.512 li
312.626 288.512 li
312.626 287.182 li
316.868 280.714 li
ef
325.272 281.624 mo
324.558 281.624 324.026 281.974 323.662 282.674 cv
323.298 283.374 323.13 284.424 323.13 285.824 cv
323.13 287.224 323.298 288.274 323.662 288.974 cv
324.026 289.674 324.558 290.024 325.272 290.024 cv
325.986 290.024 326.518 289.674 326.882 288.974 cv
327.232 288.274 327.414 287.224 327.414 285.824 cv
327.414 284.424 327.232 283.374 326.882 282.674 cv
326.518 281.974 325.986 281.624 325.272 281.624 cv
325.272 280.532 mo
326.406 280.532 327.274 280.994 327.89 281.89 cv
328.492 282.8 328.8 284.116 328.8 285.824 cv
328.8 287.546 328.492 288.862 327.89 289.758 cv
327.274 290.654 326.406 291.102 325.272 291.102 cv
324.124 291.102 323.242 290.654 322.64 289.758 cv
322.038 288.862 321.744 287.546 321.744 285.824 cv
321.744 284.116 322.038 282.8 322.64 281.89 cv
323.242 280.994 324.124 280.532 325.272 280.532 cv
ef
387.053 273.306 mo
387.053 276.806 li
f
387.053 273.306 mo
387.053 276.806 li
@
379.692 280.714 mo
385.11 280.714 li
385.11 281.876 li
380.952 281.876 li
380.952 284.382 li
381.148 284.312 381.358 284.256 381.554 284.228 cv
381.75 284.2 381.96 284.172 382.156 284.172 cv
383.29 284.172 384.186 284.494 384.858 285.11 cv
385.53 285.74 385.866 286.58 385.866 287.644 cv
385.866 288.75 385.516 289.604 384.83 290.206 cv
384.144 290.808 383.178 291.102 381.946 291.102 cv
381.512 291.102 381.078 291.06 380.63 291.004 cv
380.182 290.934 379.734 290.836 379.258 290.682 cv
379.258 289.296 li
379.664 289.52 380.084 289.688 380.532 289.8 cv
380.966 289.912 381.428 289.954 381.918 289.954 cv
382.702 289.954 383.332 289.758 383.794 289.338 cv
384.242 288.918 384.48 288.358 384.48 287.644 cv
384.48 286.944 384.242 286.384 383.794 285.964 cv
383.332 285.544 382.702 285.334 381.918 285.334 cv
381.554 285.334 381.176 285.376 380.812 285.46 cv
380.448 285.544 380.07 285.67 379.692 285.838 cv
379.692 280.714 li
ef
391.512 281.624 mo
390.798 281.624 390.266 281.974 389.902 282.674 cv
389.538 283.374 389.37 284.424 389.37 285.824 cv
389.37 287.224 389.538 288.274 389.902 288.974 cv
390.266 289.674 390.798 290.024 391.512 290.024 cv
392.226 290.024 392.758 289.674 393.122 288.974 cv
393.472 288.274 393.654 287.224 393.654 285.824 cv
393.654 284.424 393.472 283.374 393.122 282.674 cv
392.758 281.974 392.226 281.624 391.512 281.624 cv
391.512 280.532 mo
392.646 280.532 393.514 280.994 394.13 281.89 cv
394.732 282.8 395.04 284.116 395.04 285.824 cv
395.04 287.546 394.732 288.862 394.13 289.758 cv
393.514 290.654 392.646 291.102 391.512 291.102 cv
390.364 291.102 389.482 290.654 388.88 289.758 cv
388.278 288.862 387.984 287.546 387.984 285.824 cv
387.984 284.116 388.278 282.8 388.88 281.89 cv
389.482 280.994 390.364 280.532 391.512 280.532 cv
ef
121.738 298.141 mo
123.201 298.141 li
126.754 304.851 li
126.754 298.141 li
127.81 298.141 li
127.81 306.16 li
126.347 306.16 li
122.794 299.45 li
122.794 306.16 li
121.738 306.16 li
121.738 298.141 li
ef
129.875 303.784 mo
129.875 300.143 li
130.865 300.143 li
130.865 303.751 li
130.865 304.323 130.975 304.741 131.195 305.027 cv
131.415 305.313 131.745 305.456 132.196 305.456 cv
132.724 305.456 133.153 305.291 133.461 304.95 cv
133.769 304.609 133.923 304.147 133.923 303.553 cv
133.923 300.143 li
134.913 300.143 li
134.913 306.16 li
133.923 306.16 li
133.923 305.236 li
133.681 305.61 133.395 305.874 133.087 306.05 cv
132.768 306.215 132.405 306.303 131.987 306.303 cv
131.294 306.303 130.766 306.094 130.414 305.665 cv
130.051 305.247 129.875 304.62 129.875 303.784 cv
132.361 300 mo
132.361 300 li
ef
141.62 301.298 mo
141.862 300.858 142.159 300.539 142.5 300.319 cv
142.841 300.11 143.248 300 143.721 300 cv
144.337 300 144.821 300.22 145.162 300.66 cv
145.503 301.1 145.679 301.727 145.679 302.53 cv
145.679 306.16 li
144.689 306.16 li
144.689 302.563 li
144.689 301.991 144.579 301.562 144.381 301.276 cv
144.172 301.001 143.864 300.858 143.446 300.858 cv
142.929 300.858 142.522 301.034 142.225 301.375 cv
141.928 301.716 141.785 302.178 141.785 302.761 cv
141.785 306.16 li
140.795 306.16 li
140.795 302.563 li
140.795 301.991 140.685 301.562 140.487 301.276 cv
140.278 301.001 139.959 300.858 139.541 300.858 cv
139.035 300.858 138.628 301.034 138.331 301.375 cv
138.034 301.716 137.891 302.178 137.891 302.761 cv
137.891 306.16 li
136.901 306.16 li
136.901 300.143 li
137.891 300.143 li
137.891 301.078 li
138.111 300.715 138.386 300.44 138.705 300.264 cv
139.013 300.088 139.387 300 139.827 300 cv
140.267 300 140.63 300.11 140.938 300.33 cv
141.246 300.55 141.466 300.88 141.62 301.298 cv
ef
151.937 303.157 mo
151.937 302.431 151.783 301.87 151.486 301.452 cv
151.178 301.034 150.771 300.825 150.254 300.825 cv
149.726 300.825 149.319 301.034 149.022 301.452 cv
148.714 301.87 148.571 302.431 148.571 303.157 cv
148.571 303.883 148.714 304.455 149.022 304.873 cv
149.319 305.291 149.726 305.489 150.254 305.489 cv
150.771 305.489 151.178 305.291 151.486 304.873 cv
151.783 304.455 151.937 303.883 151.937 303.157 cv
148.571 301.056 mo
148.769 300.704 149.033 300.44 149.352 300.264 cv
149.671 300.088 150.056 300 150.496 300 cv
151.222 300 151.816 300.297 152.278 300.869 cv
152.729 301.452 152.96 302.211 152.96 303.157 cv
152.96 304.103 152.729 304.873 152.278 305.445 cv
151.816 306.017 151.222 306.303 150.496 306.303 cv
150.056 306.303 149.671 306.215 149.352 306.05 cv
149.033 305.885 148.769 305.621 148.571 305.258 cv
148.571 306.16 li
147.581 306.16 li
147.581 297.8 li
148.571 297.8 li
148.571 301.056 li
ef
159.842 302.904 mo
159.842 303.388 li
155.299 303.388 li
155.343 304.07 155.541 304.598 155.915 304.95 cv
156.278 305.302 156.784 305.478 157.444 305.478 cv
157.818 305.478 158.192 305.434 158.544 305.346 cv
158.896 305.258 159.259 305.115 159.611 304.917 cv
159.611 305.852 li
159.259 306.006 158.896 306.127 158.522 306.193 cv
158.148 306.259 157.763 306.303 157.389 306.303 cv
156.421 306.303 155.662 306.028 155.101 305.478 cv
154.54 304.928 154.265 304.169 154.265 303.212 cv
154.265 302.233 154.529 301.452 155.057 300.869 cv
155.585 300.297 156.311 300 157.213 300 cv
158.027 300 158.665 300.264 159.138 300.781 cv
159.6 301.309 159.842 302.013 159.842 302.904 cv
158.852 302.618 mo
158.841 302.079 158.687 301.65 158.401 301.32 cv
158.104 301.001 157.708 300.836 157.224 300.836 cv
156.674 300.836 156.234 301.001 155.904 301.309 cv
155.574 301.617 155.376 302.057 155.332 302.618 cv
158.852 302.618 li
ef
164.901 301.067 mo
164.791 301.001 164.67 300.957 164.538 300.924 cv
164.406 300.902 164.263 300.88 164.109 300.88 cv
163.548 300.88 163.119 301.067 162.822 301.43 cv
162.514 301.793 162.371 302.31 162.371 302.992 cv
162.371 306.16 li
161.381 306.16 li
161.381 300.143 li
162.371 300.143 li
162.371 301.078 li
162.569 300.715 162.844 300.44 163.174 300.264 cv
163.504 300.088 163.911 300 164.395 300 cv
164.461 300 164.538 300.011 164.626 300.011 cv
164.703 300.022 164.791 300.033 164.901 300.055 cv
164.901 301.067 li
ef
171.786 300.836 mo
171.258 300.836 170.84 301.045 170.532 301.463 cv
170.224 301.881 170.07 302.442 170.07 303.157 cv
170.07 303.883 170.213 304.444 170.521 304.862 cv
170.829 305.28 171.247 305.478 171.786 305.478 cv
172.314 305.478 172.732 305.28 173.04 304.862 cv
173.348 304.444 173.502 303.883 173.502 303.157 cv
173.502 302.453 173.348 301.881 173.04 301.463 cv
172.732 301.045 172.314 300.836 171.786 300.836 cv
171.786 300 mo
172.644 300 173.315 300.286 173.81 300.836 cv
174.294 301.397 174.547 302.167 174.547 303.157 cv
174.547 304.147 174.294 304.917 173.81 305.467 cv
173.315 306.028 172.644 306.303 171.786 306.303 cv
170.917 306.303 170.235 306.028 169.751 305.467 cv
169.267 304.917 169.025 304.147 169.025 303.157 cv
169.025 302.167 169.267 301.397 169.751 300.836 cv
170.235 300.286 170.917 300 171.786 300 cv
ef
179.221 297.8 mo
179.221 298.625 li
178.275 298.625 li
177.923 298.625 177.67 298.702 177.538 298.845 cv
177.395 298.988 177.329 299.241 177.329 299.615 cv
177.329 300.143 li
178.957 300.143 li
178.957 300.913 li
177.329 300.913 li
177.329 306.16 li
176.339 306.16 li
176.339 300.913 li
175.393 300.913 li
175.393 300.143 li
176.339 300.143 li
176.339 299.725 li
176.339 299.065 176.493 298.57 176.801 298.262 cv
177.109 297.954 177.604 297.8 178.286 297.8 cv
179.221 297.8 li
ef
187.454 301.056 mo
187.454 297.8 li
188.444 297.8 li
188.444 306.16 li
187.454 306.16 li
187.454 305.258 li
187.245 305.621 186.981 305.885 186.662 306.05 cv
186.343 306.215 185.969 306.303 185.529 306.303 cv
184.803 306.303 184.209 306.017 183.747 305.445 cv
183.285 304.873 183.065 304.103 183.065 303.157 cv
183.065 302.211 183.285 301.452 183.747 300.869 cv
184.209 300.297 184.803 300 185.529 300 cv
185.969 300 186.343 300.088 186.662 300.264 cv
186.981 300.44 187.245 300.704 187.454 301.056 cv
184.088 303.157 mo
184.088 303.883 184.231 304.455 184.528 304.873 cv
184.825 305.291 185.243 305.489 185.771 305.489 cv
186.288 305.489 186.695 305.291 187.003 304.873 cv
187.3 304.455 187.454 303.883 187.454 303.157 cv
187.454 302.431 187.3 301.87 187.003 301.452 cv
186.695 301.034 186.288 300.825 185.771 300.825 cv
185.243 300.825 184.825 301.034 184.528 301.452 cv
184.231 301.87 184.088 302.431 184.088 303.157 cv
ef
193.313 303.135 mo
192.51 303.135 191.96 303.234 191.652 303.41 cv
191.344 303.597 191.19 303.905 191.19 304.345 cv
191.19 304.697 191.3 304.983 191.531 305.181 cv
191.762 305.39 192.081 305.489 192.477 305.489 cv
193.027 305.489 193.467 305.302 193.797 304.906 cv
194.127 304.521 194.292 304.004 194.292 303.355 cv
194.292 303.135 li
193.313 303.135 li
195.282 302.728 mo
195.282 306.16 li
194.292 306.16 li
194.292 305.247 li
194.061 305.621 193.775 305.885 193.445 306.05 cv
193.115 306.215 192.697 306.303 192.213 306.303 cv
191.597 306.303 191.102 306.138 190.739 305.797 cv
190.376 305.456 190.2 304.994 190.2 304.411 cv
190.2 303.74 190.42 303.234 190.882 302.882 cv
191.333 302.541 192.004 302.365 192.906 302.365 cv
194.292 302.365 li
194.292 302.266 li
194.292 301.815 194.138 301.463 193.841 301.21 cv
193.544 300.968 193.126 300.836 192.587 300.836 cv
192.235 300.836 191.905 300.88 191.575 300.968 cv
191.245 301.056 190.937 301.177 190.64 301.331 cv
190.64 300.418 li
190.992 300.286 191.344 300.176 191.685 300.11 cv
192.026 300.044 192.356 300 192.686 300 cv
193.555 300 194.204 300.231 194.633 300.682 cv
195.062 301.133 195.282 301.815 195.282 302.728 cv
ef
198.273 298.438 mo
198.273 300.143 li
200.308 300.143 li
200.308 300.913 li
198.273 300.913 li
198.273 304.18 li
198.273 304.675 198.339 304.994 198.471 305.126 cv
198.603 305.269 198.878 305.335 199.296 305.335 cv
200.308 305.335 li
200.308 306.16 li
199.296 306.16 li
198.526 306.16 197.998 306.017 197.712 305.731 cv
197.426 305.445 197.283 304.928 197.283 304.18 cv
197.283 300.913 li
196.557 300.913 li
196.557 300.143 li
197.283 300.143 li
197.283 298.438 li
198.273 298.438 li
ef
204.353 303.135 mo
203.55 303.135 203 303.234 202.692 303.41 cv
202.384 303.597 202.23 303.905 202.23 304.345 cv
202.23 304.697 202.34 304.983 202.571 305.181 cv
202.802 305.39 203.121 305.489 203.517 305.489 cv
204.067 305.489 204.507 305.302 204.837 304.906 cv
205.167 304.521 205.332 304.004 205.332 303.355 cv
205.332 303.135 li
204.353 303.135 li
206.322 302.728 mo
206.322 306.16 li
205.332 306.16 li
205.332 305.247 li
205.101 305.621 204.815 305.885 204.485 306.05 cv
204.155 306.215 203.737 306.303 203.253 306.303 cv
202.637 306.303 202.142 306.138 201.779 305.797 cv
201.416 305.456 201.24 304.994 201.24 304.411 cv
201.24 303.74 201.46 303.234 201.922 302.882 cv
202.373 302.541 203.044 302.365 203.946 302.365 cv
205.332 302.365 li
205.332 302.266 li
205.332 301.815 205.178 301.463 204.881 301.21 cv
204.584 300.968 204.166 300.836 203.627 300.836 cv
203.275 300.836 202.945 300.88 202.615 300.968 cv
202.285 301.056 201.977 301.177 201.68 301.331 cv
201.68 300.418 li
202.032 300.286 202.384 300.176 202.725 300.11 cv
203.066 300.044 203.396 300 203.726 300 cv
204.595 300 205.244 300.231 205.673 300.682 cv
206.102 301.133 206.322 301.815 206.322 302.728 cv
ef
214.861 297.8 mo
214.861 298.625 li
213.915 298.625 li
213.563 298.625 213.31 298.702 213.178 298.845 cv
213.035 298.988 212.969 299.241 212.969 299.615 cv
212.969 300.143 li
214.597 300.143 li
214.597 300.913 li
212.969 300.913 li
212.969 306.16 li
211.979 306.16 li
211.979 300.913 li
211.033 300.913 li
211.033 300.143 li
211.979 300.143 li
211.979 299.725 li
211.979 299.065 212.133 298.57 212.441 298.262 cv
212.749 297.954 213.244 297.8 213.926 297.8 cv
214.861 297.8 li
ef
220.802 302.904 mo
220.802 303.388 li
216.259 303.388 li
216.303 304.07 216.501 304.598 216.875 304.95 cv
217.238 305.302 217.744 305.478 218.404 305.478 cv
218.778 305.478 219.152 305.434 219.504 305.346 cv
219.856 305.258 220.219 305.115 220.571 304.917 cv
220.571 305.852 li
220.219 306.006 219.856 306.127 219.482 306.193 cv
219.108 306.259 218.723 306.303 218.349 306.303 cv
217.381 306.303 216.622 306.028 216.061 305.478 cv
215.5 304.928 215.225 304.169 215.225 303.212 cv
215.225 302.233 215.489 301.452 216.017 300.869 cv
216.545 300.297 217.271 300 218.173 300 cv
218.987 300 219.625 300.264 220.098 300.781 cv
220.56 301.309 220.802 302.013 220.802 302.904 cv
219.812 302.618 mo
219.801 302.079 219.647 301.65 219.361 301.32 cv
219.064 301.001 218.668 300.836 218.184 300.836 cv
217.634 300.836 217.194 301.001 216.864 301.309 cv
216.534 301.617 216.336 302.057 216.292 302.618 cv
219.812 302.618 li
ef
223.473 298.438 mo
223.473 300.143 li
225.508 300.143 li
225.508 300.913 li
223.473 300.913 li
223.473 304.18 li
223.473 304.675 223.539 304.994 223.671 305.126 cv
223.803 305.269 224.078 305.335 224.496 305.335 cv
225.508 305.335 li
225.508 306.16 li
224.496 306.16 li
223.726 306.16 223.198 306.017 222.912 305.731 cv
222.626 305.445 222.483 304.928 222.483 304.18 cv
222.483 300.913 li
221.757 300.913 li
221.757 300.143 li
222.483 300.143 li
222.483 298.438 li
223.473 298.438 li
ef
231.148 300.374 mo
231.148 301.298 li
230.862 301.144 230.587 301.034 230.301 300.957 cv
230.015 300.88 229.74 300.836 229.454 300.836 cv
228.816 300.836 228.31 301.045 227.958 301.452 cv
227.606 301.859 227.43 302.431 227.43 303.157 cv
227.43 303.894 227.606 304.466 227.958 304.873 cv
228.31 305.28 228.816 305.478 229.454 305.478 cv
229.74 305.478 230.015 305.445 230.301 305.368 cv
230.587 305.291 230.862 305.17 231.148 305.016 cv
231.148 305.929 li
230.862 306.061 230.576 306.16 230.29 306.215 cv
229.993 306.27 229.674 306.303 229.344 306.303 cv
228.442 306.303 227.716 306.028 227.188 305.456 cv
226.649 304.895 226.385 304.125 226.385 303.157 cv
226.385 302.178 226.649 301.408 227.188 300.847 cv
227.727 300.286 228.464 300 229.41 300 cv
229.718 300 230.015 300.033 230.301 300.099 cv
230.587 300.165 230.873 300.253 231.148 300.374 cv
ef
237.819 302.53 mo
237.819 306.16 li
236.829 306.16 li
236.829 302.563 li
236.829 301.991 236.708 301.573 236.488 301.287 cv
236.268 301.001 235.938 300.858 235.498 300.858 cv
234.959 300.858 234.541 301.034 234.233 301.375 cv
233.925 301.716 233.771 302.178 233.771 302.761 cv
233.771 306.16 li
232.781 306.16 li
232.781 297.8 li
233.771 297.8 li
233.771 301.078 li
234.002 300.726 234.277 300.451 234.607 300.275 cv
234.926 300.099 235.3 300 235.718 300 cv
236.4 300 236.928 300.22 237.28 300.649 cv
237.632 301.078 237.819 301.705 237.819 302.53 cv
ef
239.774 300.143 mo
240.764 300.143 li
240.764 306.16 li
239.774 306.16 li
239.774 300.143 li
239.774 297.8 mo
239.774 297.8 mo
240.764 297.8 li
240.764 299.054 li
239.774 299.054 li
cp
ef
247.899 302.53 mo
247.899 306.16 li
246.909 306.16 li
246.909 302.563 li
246.909 301.991 246.788 301.573 246.568 301.287 cv
246.348 301.001 246.018 300.858 245.578 300.858 cv
245.039 300.858 244.621 301.034 244.313 301.375 cv
244.005 301.716 243.851 302.178 243.851 302.761 cv
243.851 306.16 li
242.861 306.16 li
242.861 300.143 li
243.851 300.143 li
243.851 301.078 li
244.082 300.726 244.357 300.451 244.687 300.275 cv
245.006 300.099 245.38 300 245.798 300 cv
246.48 300 247.008 300.22 247.36 300.649 cv
247.712 301.078 247.899 301.705 247.899 302.53 cv
ef
253.814 303.08 mo
253.814 302.376 253.66 301.815 253.374 301.419 cv
253.077 301.023 252.659 300.825 252.131 300.825 cv
251.603 300.825 251.185 301.023 250.888 301.419 cv
250.591 301.815 250.448 302.376 250.448 303.08 cv
250.448 303.795 250.591 304.345 250.888 304.741 cv
251.185 305.137 251.603 305.335 252.131 305.335 cv
252.659 305.335 253.077 305.137 253.374 304.741 cv
253.66 304.345 253.814 303.795 253.814 303.08 cv
254.804 305.412 mo
254.804 306.424 254.573 307.183 254.122 307.689 cv
253.66 308.184 252.967 308.437 252.032 308.437 cv
251.68 308.437 251.361 308.404 251.053 308.36 cv
250.745 308.305 250.437 308.228 250.151 308.118 cv
250.151 307.161 li
250.437 307.315 250.723 307.425 251.009 307.502 cv
251.295 307.579 251.581 307.623 251.878 307.623 cv
252.516 307.623 253 307.447 253.33 307.117 cv
253.649 306.776 253.814 306.27 253.814 305.588 cv
253.814 305.104 li
253.605 305.456 253.341 305.72 253.022 305.896 cv
252.703 306.072 252.329 306.16 251.889 306.16 cv
251.141 306.16 250.547 305.885 250.096 305.324 cv
249.645 304.763 249.425 304.015 249.425 303.08 cv
249.425 302.156 249.645 301.408 250.096 300.847 cv
250.547 300.286 251.141 300 251.889 300 cv
252.329 300 252.703 300.088 253.022 300.264 cv
253.341 300.44 253.605 300.704 253.814 301.056 cv
253.814 300.143 li
254.804 300.143 li
254.804 305.412 li
ef
264.628 300.374 mo
264.628 301.298 li
264.342 301.144 264.067 301.034 263.781 300.957 cv
263.495 300.88 263.22 300.836 262.934 300.836 cv
262.296 300.836 261.79 301.045 261.438 301.452 cv
261.086 301.859 260.91 302.431 260.91 303.157 cv
260.91 303.894 261.086 304.466 261.438 304.873 cv
261.79 305.28 262.296 305.478 262.934 305.478 cv
263.22 305.478 263.495 305.445 263.781 305.368 cv
264.067 305.291 264.342 305.17 264.628 305.016 cv
264.628 305.929 li
264.342 306.061 264.056 306.16 263.77 306.215 cv
263.473 306.27 263.154 306.303 262.824 306.303 cv
261.922 306.303 261.196 306.028 260.668 305.456 cv
260.129 304.895 259.865 304.125 259.865 303.157 cv
259.865 302.178 260.129 301.408 260.668 300.847 cv
261.207 300.286 261.944 300 262.89 300 cv
263.198 300 263.495 300.033 263.781 300.099 cv
264.067 300.165 264.353 300.253 264.628 300.374 cv
ef
268.626 300.836 mo
268.098 300.836 267.68 301.045 267.372 301.463 cv
267.064 301.881 266.91 302.442 266.91 303.157 cv
266.91 303.883 267.053 304.444 267.361 304.862 cv
267.669 305.28 268.087 305.478 268.626 305.478 cv
269.154 305.478 269.572 305.28 269.88 304.862 cv
270.188 304.444 270.342 303.883 270.342 303.157 cv
270.342 302.453 270.188 301.881 269.88 301.463 cv
269.572 301.045 269.154 300.836 268.626 300.836 cv
268.626 300 mo
269.484 300 270.155 300.286 270.65 300.836 cv
271.134 301.397 271.387 302.167 271.387 303.157 cv
271.387 304.147 271.134 304.917 270.65 305.467 cv
270.155 306.028 269.484 306.303 268.626 306.303 cv
267.757 306.303 267.075 306.028 266.591 305.467 cv
266.107 304.917 265.865 304.147 265.865 303.157 cv
265.865 302.167 266.107 301.397 266.591 300.836 cv
267.075 300.286 267.757 300 268.626 300 cv
ef
278.019 302.53 mo
278.019 306.16 li
277.029 306.16 li
277.029 302.563 li
277.029 301.991 276.908 301.573 276.688 301.287 cv
276.468 301.001 276.138 300.858 275.698 300.858 cv
275.159 300.858 274.741 301.034 274.433 301.375 cv
274.125 301.716 273.971 302.178 273.971 302.761 cv
273.971 306.16 li
272.981 306.16 li
272.981 300.143 li
273.971 300.143 li
273.971 301.078 li
274.202 300.726 274.477 300.451 274.807 300.275 cv
275.126 300.099 275.5 300 275.918 300 cv
276.6 300 277.128 300.22 277.48 300.649 cv
277.832 301.078 278.019 301.705 278.019 302.53 cv
ef
284.428 300.374 mo
284.428 301.298 li
284.142 301.144 283.867 301.034 283.581 300.957 cv
283.295 300.88 283.02 300.836 282.734 300.836 cv
282.096 300.836 281.59 301.045 281.238 301.452 cv
280.886 301.859 280.71 302.431 280.71 303.157 cv
280.71 303.894 280.886 304.466 281.238 304.873 cv
281.59 305.28 282.096 305.478 282.734 305.478 cv
283.02 305.478 283.295 305.445 283.581 305.368 cv
283.867 305.291 284.142 305.17 284.428 305.016 cv
284.428 305.929 li
284.142 306.061 283.856 306.16 283.57 306.215 cv
283.273 306.27 282.954 306.303 282.624 306.303 cv
281.722 306.303 280.996 306.028 280.468 305.456 cv
279.929 304.895 279.665 304.125 279.665 303.157 cv
279.665 302.178 279.929 301.408 280.468 300.847 cv
281.007 300.286 281.744 300 282.69 300 cv
282.998 300 283.295 300.033 283.581 300.099 cv
283.867 300.165 284.153 300.253 284.428 300.374 cv
ef
285.995 303.784 mo
285.995 300.143 li
286.985 300.143 li
286.985 303.751 li
286.985 304.323 287.095 304.741 287.315 305.027 cv
287.535 305.313 287.865 305.456 288.316 305.456 cv
288.844 305.456 289.273 305.291 289.581 304.95 cv
289.889 304.609 290.043 304.147 290.043 303.553 cv
290.043 300.143 li
291.033 300.143 li
291.033 306.16 li
290.043 306.16 li
290.043 305.236 li
289.801 305.61 289.515 305.874 289.207 306.05 cv
288.888 306.215 288.525 306.303 288.107 306.303 cv
287.414 306.303 286.886 306.094 286.534 305.665 cv
286.171 305.247 285.995 304.62 285.995 303.784 cv
288.481 300 mo
288.481 300 li
ef
296.541 301.067 mo
296.431 301.001 296.31 300.957 296.178 300.924 cv
296.046 300.902 295.903 300.88 295.749 300.88 cv
295.188 300.88 294.759 301.067 294.462 301.43 cv
294.154 301.793 294.011 302.31 294.011 302.992 cv
294.011 306.16 li
293.021 306.16 li
293.021 300.143 li
294.011 300.143 li
294.011 301.078 li
294.209 300.715 294.484 300.44 294.814 300.264 cv
295.144 300.088 295.551 300 296.035 300 cv
296.101 300 296.178 300.011 296.266 300.011 cv
296.343 300.022 296.431 300.033 296.541 300.055 cv
296.541 301.067 li
ef
301.101 301.067 mo
300.991 301.001 300.87 300.957 300.738 300.924 cv
300.606 300.902 300.463 300.88 300.309 300.88 cv
299.748 300.88 299.319 301.067 299.022 301.43 cv
298.714 301.793 298.571 302.31 298.571 302.992 cv
298.571 306.16 li
297.581 306.16 li
297.581 300.143 li
298.571 300.143 li
298.571 301.078 li
298.769 300.715 299.044 300.44 299.374 300.264 cv
299.704 300.088 300.111 300 300.595 300 cv
300.661 300 300.738 300.011 300.826 300.011 cv
300.903 300.022 300.991 300.033 301.101 300.055 cv
301.101 301.067 li
ef
307.202 302.904 mo
307.202 303.388 li
302.659 303.388 li
302.703 304.07 302.901 304.598 303.275 304.95 cv
303.638 305.302 304.144 305.478 304.804 305.478 cv
305.178 305.478 305.552 305.434 305.904 305.346 cv
306.256 305.258 306.619 305.115 306.971 304.917 cv
306.971 305.852 li
306.619 306.006 306.256 306.127 305.882 306.193 cv
305.508 306.259 305.123 306.303 304.749 306.303 cv
303.781 306.303 303.022 306.028 302.461 305.478 cv
301.9 304.928 301.625 304.169 301.625 303.212 cv
301.625 302.233 301.889 301.452 302.417 300.869 cv
302.945 300.297 303.671 300 304.573 300 cv
305.387 300 306.025 300.264 306.498 300.781 cv
306.96 301.309 307.202 302.013 307.202 302.904 cv
306.212 302.618 mo
306.201 302.079 306.047 301.65 305.761 301.32 cv
305.464 301.001 305.068 300.836 304.584 300.836 cv
304.034 300.836 303.594 301.001 303.264 301.309 cv
302.934 301.617 302.736 302.057 302.692 302.618 cv
306.212 302.618 li
ef
313.899 302.53 mo
313.899 306.16 li
312.909 306.16 li
312.909 302.563 li
312.909 301.991 312.788 301.573 312.568 301.287 cv
312.348 301.001 312.018 300.858 311.578 300.858 cv
311.039 300.858 310.621 301.034 310.313 301.375 cv
310.005 301.716 309.851 302.178 309.851 302.761 cv
309.851 306.16 li
308.861 306.16 li
308.861 300.143 li
309.851 300.143 li
309.851 301.078 li
310.082 300.726 310.357 300.451 310.687 300.275 cv
311.006 300.099 311.38 300 311.798 300 cv
312.48 300 313.008 300.22 313.36 300.649 cv
313.712 301.078 313.899 301.705 313.899 302.53 cv
ef
316.833 298.438 mo
316.833 300.143 li
318.868 300.143 li
318.868 300.913 li
316.833 300.913 li
316.833 304.18 li
316.833 304.675 316.899 304.994 317.031 305.126 cv
317.163 305.269 317.438 305.335 317.856 305.335 cv
318.868 305.335 li
318.868 306.16 li
317.856 306.16 li
317.086 306.16 316.558 306.017 316.272 305.731 cv
315.986 305.445 315.843 304.928 315.843 304.18 cv
315.843 300.913 li
315.117 300.913 li
315.117 300.143 li
315.843 300.143 li
315.843 298.438 li
316.833 298.438 li
ef
320.174 306.16 mo
321.164 306.16 li
321.164 297.8 li
320.174 297.8 li
cp
f
325.682 306.71 mo
325.396 307.414 325.121 307.887 324.857 308.107 cv
324.593 308.327 324.241 308.437 323.801 308.437 cv
323.009 308.437 li
323.009 307.612 li
323.592 307.612 li
323.856 307.612 324.065 307.546 324.219 307.414 cv
324.373 307.282 324.538 306.985 324.725 306.501 cv
324.901 306.061 li
322.47 300.143 li
323.515 300.143 li
325.396 304.851 li
327.277 300.143 li
328.322 300.143 li
325.682 306.71 li
ef
178.67 310.171 mo
178.186 311.007 177.834 311.821 177.603 312.624 cv
177.361 313.427 177.251 314.241 177.251 315.066 cv
177.251 315.902 177.361 316.716 177.603 317.519 cv
177.834 318.333 178.186 319.136 178.67 319.961 cv
177.812 319.961 li
177.273 319.114 176.866 318.3 176.602 317.486 cv
176.338 316.672 176.206 315.869 176.206 315.066 cv
176.206 314.274 176.338 313.471 176.602 312.657 cv
176.866 311.843 177.262 311.018 177.812 310.171 cv
178.67 310.171 li
ef
180.538 310.501 mo
185.609 310.501 li
185.609 311.414 li
181.627 311.414 li
181.627 313.79 li
185.444 313.79 li
185.444 314.703 li
181.627 314.703 li
181.627 317.607 li
185.708 317.607 li
185.708 318.52 li
180.538 318.52 li
180.538 310.501 li
ef
190.193 315.495 mo
189.39 315.495 188.84 315.594 188.532 315.77 cv
188.224 315.957 188.07 316.265 188.07 316.705 cv
188.07 317.057 188.18 317.343 188.411 317.541 cv
188.642 317.75 188.961 317.849 189.357 317.849 cv
189.907 317.849 190.347 317.662 190.677 317.266 cv
191.007 316.881 191.172 316.364 191.172 315.715 cv
191.172 315.495 li
190.193 315.495 li
192.162 315.088 mo
192.162 318.52 li
191.172 318.52 li
191.172 317.607 li
190.941 317.981 190.655 318.245 190.325 318.41 cv
189.995 318.575 189.577 318.663 189.093 318.663 cv
188.477 318.663 187.982 318.498 187.619 318.157 cv
187.256 317.816 187.08 317.354 187.08 316.771 cv
187.08 316.1 187.3 315.594 187.762 315.242 cv
188.213 314.901 188.884 314.725 189.786 314.725 cv
191.172 314.725 li
191.172 314.626 li
191.172 314.175 191.018 313.823 190.721 313.57 cv
190.424 313.328 190.006 313.196 189.467 313.196 cv
189.115 313.196 188.785 313.24 188.455 313.328 cv
188.125 313.416 187.817 313.537 187.52 313.691 cv
187.52 312.778 li
187.872 312.646 188.224 312.536 188.565 312.47 cv
188.906 312.404 189.236 312.36 189.566 312.36 cv
190.435 312.36 191.084 312.591 191.513 313.042 cv
191.942 313.493 192.162 314.175 192.162 315.088 cv
ef
198.508 312.734 mo
198.508 313.658 li
198.222 313.504 197.947 313.394 197.661 313.317 cv
197.375 313.24 197.1 313.196 196.814 313.196 cv
196.176 313.196 195.67 313.405 195.318 313.812 cv
194.966 314.219 194.79 314.791 194.79 315.517 cv
194.79 316.254 194.966 316.826 195.318 317.233 cv
195.67 317.64 196.176 317.838 196.814 317.838 cv
197.1 317.838 197.375 317.805 197.661 317.728 cv
197.947 317.651 198.222 317.53 198.508 317.376 cv
198.508 318.289 li
198.222 318.421 197.936 318.52 197.65 318.575 cv
197.353 318.63 197.034 318.663 196.704 318.663 cv
195.802 318.663 195.076 318.388 194.548 317.816 cv
194.009 317.255 193.745 316.485 193.745 315.517 cv
193.745 314.538 194.009 313.768 194.548 313.207 cv
195.087 312.646 195.824 312.36 196.77 312.36 cv
197.078 312.36 197.375 312.393 197.661 312.459 cv
197.947 312.525 198.233 312.613 198.508 312.734 cv
ef
205.299 314.89 mo
205.299 318.52 li
204.309 318.52 li
204.309 314.923 li
204.309 314.351 204.188 313.933 203.968 313.647 cv
203.748 313.361 203.418 313.218 202.978 313.218 cv
202.439 313.218 202.021 313.394 201.713 313.735 cv
201.405 314.076 201.251 314.538 201.251 315.121 cv
201.251 318.52 li
200.261 318.52 li
200.261 310.16 li
201.251 310.16 li
201.251 313.438 li
201.482 313.086 201.757 312.811 202.087 312.635 cv
202.406 312.459 202.78 312.36 203.198 312.36 cv
203.88 312.36 204.408 312.58 204.76 313.009 cv
205.112 313.438 205.299 314.065 205.299 314.89 cv
ef
215.057 315.517 mo
215.057 314.791 214.903 314.23 214.606 313.812 cv
214.298 313.394 213.891 313.185 213.374 313.185 cv
212.846 313.185 212.439 313.394 212.142 313.812 cv
211.834 314.23 211.691 314.791 211.691 315.517 cv
211.691 316.243 211.834 316.815 212.142 317.233 cv
212.439 317.651 212.846 317.849 213.374 317.849 cv
213.891 317.849 214.298 317.651 214.606 317.233 cv
214.903 316.815 215.057 316.243 215.057 315.517 cv
211.691 313.416 mo
211.889 313.064 212.153 312.8 212.472 312.624 cv
212.791 312.448 213.176 312.36 213.616 312.36 cv
214.342 312.36 214.936 312.657 215.398 313.229 cv
215.849 313.812 216.08 314.571 216.08 315.517 cv
216.08 316.463 215.849 317.233 215.398 317.805 cv
214.936 318.377 214.342 318.663 213.616 318.663 cv
213.176 318.663 212.791 318.575 212.472 318.41 cv
212.153 318.245 211.889 317.981 211.691 317.618 cv
211.691 318.52 li
210.701 318.52 li
210.701 310.16 li
211.691 310.16 li
211.691 313.416 li
ef
217.694 318.52 mo
218.684 318.52 li
218.684 310.16 li
217.694 310.16 li
cp
f
223.146 313.196 mo
222.618 313.196 222.2 313.405 221.892 313.823 cv
221.584 314.241 221.43 314.802 221.43 315.517 cv
221.43 316.243 221.573 316.804 221.881 317.222 cv
222.189 317.64 222.607 317.838 223.146 317.838 cv
223.674 317.838 224.092 317.64 224.4 317.222 cv
224.708 316.804 224.862 316.243 224.862 315.517 cv
224.862 314.813 224.708 314.241 224.4 313.823 cv
224.092 313.405 223.674 313.196 223.146 313.196 cv
223.146 312.36 mo
224.004 312.36 224.675 312.646 225.17 313.196 cv
225.654 313.757 225.907 314.527 225.907 315.517 cv
225.907 316.507 225.654 317.277 225.17 317.827 cv
224.675 318.388 224.004 318.663 223.146 318.663 cv
222.277 318.663 221.595 318.388 221.111 317.827 cv
220.627 317.277 220.385 316.507 220.385 315.517 cv
220.385 314.527 220.627 313.757 221.111 313.196 cv
221.595 312.646 222.277 312.36 223.146 312.36 cv
ef
231.868 312.734 mo
231.868 313.658 li
231.582 313.504 231.307 313.394 231.021 313.317 cv
230.735 313.24 230.46 313.196 230.174 313.196 cv
229.536 313.196 229.03 313.405 228.678 313.812 cv
228.326 314.219 228.15 314.791 228.15 315.517 cv
228.15 316.254 228.326 316.826 228.678 317.233 cv
229.03 317.64 229.536 317.838 230.174 317.838 cv
230.46 317.838 230.735 317.805 231.021 317.728 cv
231.307 317.651 231.582 317.53 231.868 317.376 cv
231.868 318.289 li
231.582 318.421 231.296 318.52 231.01 318.575 cv
230.713 318.63 230.394 318.663 230.064 318.663 cv
229.162 318.663 228.436 318.388 227.908 317.816 cv
227.369 317.255 227.105 316.485 227.105 315.517 cv
227.105 314.538 227.369 313.768 227.908 313.207 cv
228.447 312.646 229.184 312.36 230.13 312.36 cv
230.438 312.36 230.735 312.393 231.021 312.459 cv
231.307 312.525 231.593 312.613 231.868 312.734 cv
ef
233.501 310.16 mo
234.491 310.16 li
234.491 315.099 li
237.439 312.503 li
238.704 312.503 li
235.514 315.319 li
238.836 318.52 li
237.549 318.52 li
234.491 315.583 li
234.491 318.52 li
233.501 318.52 li
233.501 310.16 li
ef
245.97 314.076 mo
245.486 314.076 245.101 314.252 244.815 314.582 cv
244.529 314.912 244.386 315.374 244.386 315.946 cv
244.386 316.529 244.529 316.991 244.815 317.321 cv
245.101 317.651 245.486 317.816 245.97 317.816 cv
246.454 317.816 246.839 317.651 247.125 317.321 cv
247.411 316.991 247.554 316.529 247.554 315.946 cv
247.554 315.374 247.411 314.912 247.125 314.582 cv
246.839 314.252 246.454 314.076 245.97 314.076 cv
248.126 310.677 mo
248.126 311.667 li
247.851 311.535 247.576 311.436 247.301 311.37 cv
247.015 311.304 246.74 311.271 246.476 311.271 cv
245.75 311.271 245.2 311.513 244.826 311.997 cv
244.452 312.481 244.232 313.218 244.188 314.186 cv
244.397 313.878 244.661 313.636 244.98 313.471 cv
245.299 313.306 245.651 313.218 246.036 313.218 cv
246.839 313.218 247.477 313.471 247.939 313.955 cv
248.401 314.439 248.643 315.11 248.643 315.946 cv
248.643 316.771 248.39 317.431 247.906 317.926 cv
247.422 318.421 246.773 318.663 245.97 318.663 cv
245.046 318.663 244.331 318.311 243.847 317.607 cv
243.352 316.903 243.11 315.869 243.11 314.516 cv
243.11 313.251 243.407 312.239 244.012 311.491 cv
244.606 310.743 245.42 310.358 246.432 310.358 cv
246.696 310.358 246.971 310.391 247.257 310.435 cv
247.532 310.49 247.818 310.567 248.126 310.677 cv
ef
253.578 311.447 mo
250.839 315.726 li
253.578 315.726 li
253.578 311.447 li
253.292 310.501 mo
254.656 310.501 li
254.656 315.726 li
255.8 315.726 li
255.8 316.628 li
254.656 316.628 li
254.656 318.52 li
253.578 318.52 li
253.578 316.628 li
249.959 316.628 li
249.959 315.583 li
253.292 310.501 li
ef
257.458 310.501 mo
259.075 310.501 li
261.121 315.957 li
263.178 310.501 li
264.795 310.501 li
264.795 318.52 li
263.739 318.52 li
263.739 311.48 li
261.671 316.98 li
260.582 316.98 li
258.514 311.48 li
258.514 318.52 li
257.458 318.52 li
257.458 310.501 li
ef
268.027 314.692 mo
268.027 317.629 li
269.765 317.629 li
270.348 317.629 270.777 317.508 271.063 317.266 cv
271.338 317.024 271.481 316.661 271.481 316.155 cv
271.481 315.66 271.338 315.297 271.063 315.055 cv
270.777 314.813 270.348 314.692 269.765 314.692 cv
268.027 314.692 li
268.027 311.392 mo
268.027 313.812 li
269.633 313.812 li
270.161 313.812 270.546 313.713 270.81 313.515 cv
271.074 313.317 271.206 313.02 271.206 312.602 cv
271.206 312.206 271.074 311.898 270.81 311.7 cv
270.546 311.502 270.161 311.392 269.633 311.392 cv
268.027 311.392 li
266.938 310.501 mo
269.71 310.501 li
270.535 310.501 271.173 310.677 271.624 311.018 cv
272.064 311.37 272.295 311.854 272.295 312.481 cv
272.295 312.976 272.174 313.372 271.943 313.658 cv
271.712 313.944 271.382 314.131 270.942 314.197 cv
271.47 314.318 271.888 314.56 272.185 314.923 cv
272.471 315.286 272.625 315.737 272.625 316.276 cv
272.625 317.002 272.372 317.552 271.888 317.937 cv
271.404 318.333 270.711 318.52 269.82 318.52 cv
266.938 318.52 li
266.938 310.501 li
ef
274.3 310.171 mo
275.158 310.171 li
275.686 311.018 276.093 311.843 276.357 312.657 cv
276.621 313.471 276.764 314.274 276.764 315.066 cv
276.764 315.869 276.621 316.672 276.357 317.486 cv
276.093 318.3 275.686 319.114 275.158 319.961 cv
274.3 319.961 li
274.773 319.136 275.125 318.333 275.367 317.519 cv
275.598 316.716 275.719 315.902 275.719 315.066 cv
275.719 314.241 275.598 313.427 275.367 312.624 cv
275.125 311.821 274.773 311.007 274.3 310.171 cv
ef
46.166 263.503 mo
42.666 263.503 li
f
46.166 263.503 mo
42.666 263.503 li
@
34.752 259.544 mo
34.038 259.544 33.506 259.894 33.142 260.594 cv
32.778 261.294 32.61 262.344 32.61 263.744 cv
32.61 265.144 32.778 266.194 33.142 266.894 cv
33.506 267.594 34.038 267.944 34.752 267.944 cv
35.466 267.944 35.998 267.594 36.362 266.894 cv
36.712 266.194 36.894 265.144 36.894 263.744 cv
36.894 262.344 36.712 261.294 36.362 260.594 cv
35.998 259.894 35.466 259.544 34.752 259.544 cv
34.752 258.452 mo
35.886 258.452 36.754 258.914 37.37 259.81 cv
37.972 260.72 38.28 262.036 38.28 263.744 cv
38.28 265.466 37.972 266.782 37.37 267.678 cv
36.754 268.574 35.886 269.022 34.752 269.022 cv
33.604 269.022 32.722 268.574 32.12 267.678 cv
31.518 266.782 31.224 265.466 31.224 263.744 cv
31.224 262.036 31.518 260.72 32.12 259.81 cv
32.722 258.914 33.604 258.452 34.752 258.452 cv
ef
46.166 231.231 mo
42.666 231.231 li
f
46.166 231.231 mo
42.666 231.231 li
@
31.812 226.354 mo
37.23 226.354 li
37.23 227.516 li
33.072 227.516 li
33.072 230.022 li
33.268 229.952 33.478 229.896 33.674 229.868 cv
33.87 229.84 34.08 229.812 34.276 229.812 cv
35.41 229.812 36.306 230.134 36.978 230.75 cv
37.65 231.38 37.986 232.22 37.986 233.284 cv
37.986 234.39 37.636 235.244 36.95 235.846 cv
36.264 236.448 35.298 236.742 34.066 236.742 cv
33.632 236.742 33.198 236.7 32.75 236.644 cv
32.302 236.574 31.854 236.476 31.378 236.322 cv
31.378 234.936 li
31.784 235.16 32.204 235.328 32.652 235.44 cv
33.086 235.552 33.548 235.594 34.038 235.594 cv
34.822 235.594 35.452 235.398 35.914 234.978 cv
36.362 234.558 36.6 233.998 36.6 233.284 cv
36.6 232.584 36.362 232.024 35.914 231.604 cv
35.452 231.184 34.822 230.974 34.038 230.974 cv
33.674 230.974 33.296 231.016 32.932 231.1 cv
32.568 231.184 32.19 231.31 31.812 231.478 cv
31.812 226.354 li
ef
46.166 198.959 mo
42.666 198.959 li
f
46.166 198.959 mo
42.666 198.959 li
@
23.036 203.118 mo
25.29 203.118 li
25.29 195.334 li
22.84 195.824 li
22.84 194.564 li
25.276 194.074 li
26.662 194.074 li
26.662 203.118 li
28.916 203.118 li
28.916 204.28 li
23.036 204.28 li
23.036 203.118 li
ef
34.752 194.984 mo
34.038 194.984 33.506 195.334 33.142 196.034 cv
32.778 196.734 32.61 197.784 32.61 199.184 cv
32.61 200.584 32.778 201.634 33.142 202.334 cv
33.506 203.034 34.038 203.384 34.752 203.384 cv
35.466 203.384 35.998 203.034 36.362 202.334 cv
36.712 201.634 36.894 200.584 36.894 199.184 cv
36.894 197.784 36.712 196.734 36.362 196.034 cv
35.998 195.334 35.466 194.984 34.752 194.984 cv
34.752 193.892 mo
35.886 193.892 36.754 194.354 37.37 195.25 cv
37.972 196.16 38.28 197.476 38.28 199.184 cv
38.28 200.906 37.972 202.222 37.37 203.118 cv
36.754 204.014 35.886 204.462 34.752 204.462 cv
33.604 204.462 32.722 204.014 32.12 203.118 cv
31.518 202.222 31.224 200.906 31.224 199.184 cv
31.224 197.476 31.518 196.16 32.12 195.25 cv
32.722 194.354 33.604 193.892 34.752 193.892 cv
ef
46.166 166.687 mo
42.666 166.687 li
f
46.166 166.687 mo
42.666 166.687 li
@
23.036 170.838 mo
25.29 170.838 li
25.29 163.054 li
22.84 163.544 li
22.84 162.284 li
25.276 161.794 li
26.662 161.794 li
26.662 170.838 li
28.916 170.838 li
28.916 172 li
23.036 172 li
23.036 170.838 li
ef
31.812 161.794 mo
37.23 161.794 li
37.23 162.956 li
33.072 162.956 li
33.072 165.462 li
33.268 165.392 33.478 165.336 33.674 165.308 cv
33.87 165.28 34.08 165.252 34.276 165.252 cv
35.41 165.252 36.306 165.574 36.978 166.19 cv
37.65 166.82 37.986 167.66 37.986 168.724 cv
37.986 169.83 37.636 170.684 36.95 171.286 cv
36.264 171.888 35.298 172.182 34.066 172.182 cv
33.632 172.182 33.198 172.14 32.75 172.084 cv
32.302 172.014 31.854 171.916 31.378 171.762 cv
31.378 170.376 li
31.784 170.6 32.204 170.768 32.652 170.88 cv
33.086 170.992 33.548 171.034 34.038 171.034 cv
34.822 171.034 35.452 170.838 35.914 170.418 cv
36.362 169.998 36.6 169.438 36.6 168.724 cv
36.6 168.024 36.362 167.464 35.914 167.044 cv
35.452 166.624 34.822 166.414 34.038 166.414 cv
33.674 166.414 33.296 166.456 32.932 166.54 cv
32.568 166.624 32.19 166.75 31.812 166.918 cv
31.812 161.794 li
ef
46.166 134.415 mo
42.666 134.415 li
f
46.166 134.415 mo
42.666 134.415 li
@
23.988 138.558 mo
28.804 138.558 li
28.804 139.72 li
22.322 139.72 li
22.322 138.558 li
22.84 138.026 23.554 137.298 24.464 136.374 cv
25.36 135.464 25.934 134.876 26.172 134.61 cv
26.62 134.12 26.928 133.7 27.096 133.35 cv
27.264 133.014 27.362 132.664 27.362 132.328 cv
27.362 131.796 27.166 131.348 26.788 131.012 cv
26.41 130.676 25.92 130.494 25.304 130.494 cv
24.87 130.494 24.408 130.578 23.932 130.718 cv
23.456 130.872 22.938 131.096 22.392 131.404 cv
22.392 130.004 li
22.952 129.78 23.47 129.612 23.946 129.5 cv
24.422 129.388 24.87 129.332 25.276 129.332 cv
26.326 129.332 27.166 129.598 27.796 130.13 cv
28.426 130.662 28.748 131.362 28.748 132.244 cv
28.748 132.664 28.664 133.07 28.51 133.434 cv
28.356 133.812 28.076 134.26 27.656 134.764 cv
27.544 134.904 27.18 135.282 26.564 135.912 cv
25.948 136.542 25.094 137.424 23.988 138.558 cv
ef
34.752 130.424 mo
34.038 130.424 33.506 130.774 33.142 131.474 cv
32.778 132.174 32.61 133.224 32.61 134.624 cv
32.61 136.024 32.778 137.074 33.142 137.774 cv
33.506 138.474 34.038 138.824 34.752 138.824 cv
35.466 138.824 35.998 138.474 36.362 137.774 cv
36.712 137.074 36.894 136.024 36.894 134.624 cv
36.894 133.224 36.712 132.174 36.362 131.474 cv
35.998 130.774 35.466 130.424 34.752 130.424 cv
34.752 129.332 mo
35.886 129.332 36.754 129.794 37.37 130.69 cv
37.972 131.6 38.28 132.916 38.28 134.624 cv
38.28 136.346 37.972 137.662 37.37 138.558 cv
36.754 139.454 35.886 139.902 34.752 139.902 cv
33.604 139.902 32.722 139.454 32.12 138.558 cv
31.518 137.662 31.224 136.346 31.224 134.624 cv
31.224 132.916 31.518 131.6 32.12 130.69 cv
32.722 129.794 33.604 129.332 34.752 129.332 cv
ef
46.166 102.143 mo
42.666 102.143 li
f
46.166 102.143 mo
42.666 102.143 li
@
23.988 106.278 mo
28.804 106.278 li
28.804 107.44 li
22.322 107.44 li
22.322 106.278 li
22.84 105.746 23.554 105.018 24.464 104.094 cv
25.36 103.184 25.934 102.596 26.172 102.33 cv
26.62 101.84 26.928 101.42 27.096 101.07 cv
27.264 100.734 27.362 100.384 27.362 100.048 cv
27.362 99.516 27.166 99.068 26.788 98.732 cv
26.41 98.396 25.92 98.214 25.304 98.214 cv
24.87 98.214 24.408 98.298 23.932 98.438 cv
23.456 98.592 22.938 98.816 22.392 99.124 cv
22.392 97.724 li
22.952 97.5 23.47 97.332 23.946 97.22 cv
24.422 97.108 24.87 97.052 25.276 97.052 cv
26.326 97.052 27.166 97.318 27.796 97.85 cv
28.426 98.382 28.748 99.082 28.748 99.964 cv
28.748 100.384 28.664 100.79 28.51 101.154 cv
28.356 101.532 28.076 101.98 27.656 102.484 cv
27.544 102.624 27.18 103.002 26.564 103.632 cv
25.948 104.262 25.094 105.144 23.988 106.278 cv
ef
31.812 97.234 mo
37.23 97.234 li
37.23 98.396 li
33.072 98.396 li
33.072 100.902 li
33.268 100.832 33.478 100.776 33.674 100.748 cv
33.87 100.72 34.08 100.692 34.276 100.692 cv
35.41 100.692 36.306 101.014 36.978 101.63 cv
37.65 102.26 37.986 103.1 37.986 104.164 cv
37.986 105.27 37.636 106.124 36.95 106.726 cv
36.264 107.328 35.298 107.622 34.066 107.622 cv
33.632 107.622 33.198 107.58 32.75 107.524 cv
32.302 107.454 31.854 107.356 31.378 107.202 cv
31.378 105.816 li
31.784 106.04 32.204 106.208 32.652 106.32 cv
33.086 106.432 33.548 106.474 34.038 106.474 cv
34.822 106.474 35.452 106.278 35.914 105.858 cv
36.362 105.438 36.6 104.878 36.6 104.164 cv
36.6 103.464 36.362 102.904 35.914 102.484 cv
35.452 102.064 34.822 101.854 34.038 101.854 cv
33.674 101.854 33.296 101.896 32.932 101.98 cv
32.568 102.064 32.19 102.19 31.812 102.358 cv
31.812 97.234 li
ef
46.166 69.871 mo
42.666 69.871 li
f
46.166 69.871 mo
42.666 69.871 li
@
26.984 69.658 mo
27.642 69.798 28.16 70.092 28.524 70.54 cv
28.888 70.988 29.084 71.548 29.084 72.192 cv
29.084 73.2 28.734 73.984 28.048 74.53 cv
27.348 75.076 26.368 75.342 25.094 75.342 cv
24.66 75.342 24.212 75.3 23.764 75.216 cv
23.316 75.146 22.84 75.02 22.364 74.852 cv
22.364 73.522 li
22.742 73.746 23.162 73.914 23.624 74.026 cv
24.072 74.138 24.548 74.194 25.052 74.194 cv
25.92 74.194 26.578 74.026 27.026 73.69 cv
27.474 73.354 27.712 72.85 27.712 72.192 cv
27.712 71.604 27.502 71.128 27.082 70.792 cv
26.662 70.456 26.074 70.274 25.318 70.274 cv
24.128 70.274 li
24.128 69.14 li
25.374 69.14 li
26.046 69.14 26.564 69.014 26.928 68.734 cv
27.292 68.468 27.474 68.076 27.474 67.558 cv
27.474 67.04 27.278 66.634 26.914 66.354 cv
26.536 66.074 26.004 65.934 25.318 65.934 cv
24.94 65.934 24.534 65.976 24.1 66.06 cv
23.666 66.144 23.19 66.27 22.672 66.438 cv
22.672 65.206 li
23.19 65.066 23.68 64.954 24.142 64.884 cv
24.59 64.814 25.024 64.772 25.444 64.772 cv
26.48 64.772 27.306 65.01 27.922 65.486 cv
28.538 65.962 28.846 66.606 28.846 67.418 cv
28.846 67.978 28.678 68.454 28.356 68.846 cv
28.034 69.238 27.572 69.518 26.984 69.658 cv
ef
34.752 65.864 mo
34.038 65.864 33.506 66.214 33.142 66.914 cv
32.778 67.614 32.61 68.664 32.61 70.064 cv
32.61 71.464 32.778 72.514 33.142 73.214 cv
33.506 73.914 34.038 74.264 34.752 74.264 cv
35.466 74.264 35.998 73.914 36.362 73.214 cv
36.712 72.514 36.894 71.464 36.894 70.064 cv
36.894 68.664 36.712 67.614 36.362 66.914 cv
35.998 66.214 35.466 65.864 34.752 65.864 cv
34.752 64.772 mo
35.886 64.772 36.754 65.234 37.37 66.13 cv
37.972 67.04 38.28 68.356 38.28 70.064 cv
38.28 71.786 37.972 73.102 37.37 73.998 cv
36.754 74.894 35.886 75.342 34.752 75.342 cv
33.604 75.342 32.722 74.894 32.12 73.998 cv
31.518 73.102 31.224 71.786 31.224 70.064 cv
31.224 68.356 31.518 67.04 32.12 66.13 cv
32.722 65.234 33.604 64.772 34.752 64.772 cv
ef
46.166 37.599 mo
42.666 37.599 li
f
46.166 37.599 mo
42.666 37.599 li
@
26.984 37.378 mo
27.642 37.518 28.16 37.812 28.524 38.26 cv
28.888 38.708 29.084 39.268 29.084 39.912 cv
29.084 40.92 28.734 41.704 28.048 42.25 cv
27.348 42.796 26.368 43.062 25.094 43.062 cv
24.66 43.062 24.212 43.02 23.764 42.936 cv
23.316 42.866 22.84 42.74 22.364 42.572 cv
22.364 41.242 li
22.742 41.466 23.162 41.634 23.624 41.746 cv
24.072 41.858 24.548 41.914 25.052 41.914 cv
25.92 41.914 26.578 41.746 27.026 41.41 cv
27.474 41.074 27.712 40.57 27.712 39.912 cv
27.712 39.324 27.502 38.848 27.082 38.512 cv
26.662 38.176 26.074 37.994 25.318 37.994 cv
24.128 37.994 li
24.128 36.86 li
25.374 36.86 li
26.046 36.86 26.564 36.734 26.928 36.454 cv
27.292 36.188 27.474 35.796 27.474 35.278 cv
27.474 34.76 27.278 34.354 26.914 34.074 cv
26.536 33.794 26.004 33.654 25.318 33.654 cv
24.94 33.654 24.534 33.696 24.1 33.78 cv
23.666 33.864 23.19 33.99 22.672 34.158 cv
22.672 32.926 li
23.19 32.786 23.68 32.674 24.142 32.604 cv
24.59 32.534 25.024 32.492 25.444 32.492 cv
26.48 32.492 27.306 32.73 27.922 33.206 cv
28.538 33.682 28.846 34.326 28.846 35.138 cv
28.846 35.698 28.678 36.174 28.356 36.566 cv
28.034 36.958 27.572 37.238 26.984 37.378 cv
ef
31.812 32.674 mo
37.23 32.674 li
37.23 33.836 li
33.072 33.836 li
33.072 36.342 li
33.268 36.272 33.478 36.216 33.674 36.188 cv
33.87 36.16 34.08 36.132 34.276 36.132 cv
35.41 36.132 36.306 36.454 36.978 37.07 cv
37.65 37.7 37.986 38.54 37.986 39.604 cv
37.986 40.71 37.636 41.564 36.95 42.166 cv
36.264 42.768 35.298 43.062 34.066 43.062 cv
33.632 43.062 33.198 43.02 32.75 42.964 cv
32.302 42.894 31.854 42.796 31.378 42.642 cv
31.378 41.256 li
31.784 41.48 32.204 41.648 32.652 41.76 cv
33.086 41.872 33.548 41.914 34.038 41.914 cv
34.822 41.914 35.452 41.718 35.914 41.298 cv
36.362 40.878 36.6 40.318 36.6 39.604 cv
36.6 38.904 36.362 38.344 35.914 37.924 cv
35.452 37.504 34.822 37.294 34.038 37.294 cv
33.674 37.294 33.296 37.336 32.932 37.42 cv
32.568 37.504 32.19 37.63 31.812 37.798 cv
31.812 32.674 li
ef
7.932 198.513 mo
14.169 198.513 li
14.169 197.204 li
14.169 196.104 13.927 195.29 13.421 194.773 cv
12.915 194.267 12.123 194.003 11.045 194.003 cv
9.967 194.003 9.186 194.267 8.68 194.773 cv
8.185 195.29 7.932 196.104 7.932 197.204 cv
7.932 198.513 li
7.041 199.602 mo
7.041 197.369 li
7.041 195.818 7.371 194.674 8.009 193.948 cv
8.658 193.222 9.67 192.859 11.045 192.859 cv
12.431 192.859 13.443 193.233 14.092 193.959 cv
14.741 194.685 15.06 195.829 15.06 197.369 cv
15.06 199.602 li
7.041 199.602 li
ef
12.035 188.507 mo
12.035 189.31 12.134 189.86 12.31 190.168 cv
12.497 190.476 12.805 190.63 13.245 190.63 cv
13.597 190.63 13.883 190.52 14.081 190.289 cv
14.29 190.058 14.389 189.739 14.389 189.343 cv
14.389 188.793 14.202 188.353 13.806 188.023 cv
13.421 187.693 12.904 187.528 12.255 187.528 cv
12.035 187.528 li
12.035 188.507 li
11.628 186.538 mo
15.06 186.538 li
15.06 187.528 li
14.147 187.528 li
14.521 187.759 14.785 188.045 14.95 188.375 cv
15.115 188.705 15.203 189.123 15.203 189.607 cv
15.203 190.223 15.038 190.718 14.697 191.081 cv
14.356 191.444 13.894 191.62 13.311 191.62 cv
12.64 191.62 12.134 191.4 11.782 190.938 cv
11.441 190.487 11.265 189.816 11.265 188.914 cv
11.265 187.528 li
11.166 187.528 li
10.715 187.528 10.363 187.682 10.11 187.979 cv
9.868 188.276 9.736 188.694 9.736 189.233 cv
9.736 189.585 9.78 189.915 9.868 190.245 cv
9.956 190.575 10.077 190.883 10.231 191.18 cv
9.318 191.18 li
9.186 190.828 9.076 190.476 9.01 190.135 cv
8.944 189.794 8.9 189.464 8.9 189.134 cv
8.9 188.265 9.131 187.616 9.582 187.187 cv
10.033 186.758 10.715 186.538 11.628 186.538 cv
ef
7.338 183.547 mo
9.043 183.547 li
9.043 181.512 li
9.813 181.512 li
9.813 183.547 li
13.08 183.547 li
13.575 183.547 13.894 183.481 14.026 183.349 cv
14.169 183.217 14.235 182.942 14.235 182.524 cv
14.235 181.512 li
15.06 181.512 li
15.06 182.524 li
15.06 183.294 14.917 183.822 14.631 184.108 cv
14.345 184.394 13.828 184.537 13.08 184.537 cv
9.813 184.537 li
9.813 185.263 li
9.043 185.263 li
9.043 184.537 li
7.338 184.537 li
7.338 183.547 li
ef
12.035 177.467 mo
12.035 178.27 12.134 178.82 12.31 179.128 cv
12.497 179.436 12.805 179.59 13.245 179.59 cv
13.597 179.59 13.883 179.48 14.081 179.249 cv
14.29 179.018 14.389 178.699 14.389 178.303 cv
14.389 177.753 14.202 177.313 13.806 176.983 cv
13.421 176.653 12.904 176.488 12.255 176.488 cv
12.035 176.488 li
12.035 177.467 li
11.628 175.498 mo
15.06 175.498 li
15.06 176.488 li
14.147 176.488 li
14.521 176.719 14.785 177.005 14.95 177.335 cv
15.115 177.665 15.203 178.083 15.203 178.567 cv
15.203 179.183 15.038 179.678 14.697 180.041 cv
14.356 180.404 13.894 180.58 13.311 180.58 cv
12.64 180.58 12.134 180.36 11.782 179.898 cv
11.441 179.447 11.265 178.776 11.265 177.874 cv
11.265 176.488 li
11.166 176.488 li
10.715 176.488 10.363 176.642 10.11 176.939 cv
9.868 177.236 9.736 177.654 9.736 178.193 cv
9.736 178.545 9.78 178.875 9.868 179.205 cv
9.956 179.535 10.077 179.843 10.231 180.14 cv
9.318 180.14 li
9.186 179.788 9.076 179.436 9.01 179.095 cv
8.944 178.754 8.9 178.424 8.9 178.094 cv
8.9 177.225 9.131 176.576 9.582 176.147 cv
10.033 175.718 10.715 175.498 11.628 175.498 cv
ef
6.7 166.839 mo
7.525 166.839 li
7.525 167.785 li
7.525 168.137 7.602 168.39 7.745 168.522 cv
7.888 168.665 8.141 168.731 8.515 168.731 cv
9.043 168.731 li
9.043 167.103 li
9.813 167.103 li
9.813 168.731 li
15.06 168.731 li
15.06 169.721 li
9.813 169.721 li
9.813 170.667 li
9.043 170.667 li
9.043 169.721 li
8.625 169.721 li
7.965 169.721 7.47 169.567 7.162 169.259 cv
6.854 168.951 6.7 168.456 6.7 167.774 cv
6.7 166.839 li
ef
11.804 160.898 mo
12.288 160.898 li
12.288 165.441 li
12.97 165.397 13.498 165.199 13.85 164.825 cv
14.202 164.462 14.378 163.956 14.378 163.296 cv
14.378 162.922 14.334 162.548 14.246 162.196 cv
14.158 161.844 14.015 161.481 13.817 161.129 cv
14.752 161.129 li
14.906 161.481 15.027 161.844 15.093 162.218 cv
15.159 162.592 15.203 162.977 15.203 163.351 cv
15.203 164.319 14.928 165.078 14.378 165.639 cv
13.828 166.2 13.069 166.475 12.112 166.475 cv
11.133 166.475 10.352 166.211 9.769 165.683 cv
9.197 165.155 8.9 164.429 8.9 163.527 cv
8.9 162.713 9.164 162.075 9.681 161.602 cv
10.209 161.14 10.913 160.898 11.804 160.898 cv
11.518 161.888 mo
10.979 161.899 10.55 162.053 10.22 162.339 cv
9.901 162.636 9.736 163.032 9.736 163.516 cv
9.736 164.066 9.901 164.506 10.209 164.836 cv
10.517 165.166 10.957 165.364 11.518 165.408 cv
11.518 161.888 li
ef
7.338 158.347 mo
9.043 158.347 li
9.043 156.312 li
9.813 156.312 li
9.813 158.347 li
13.08 158.347 li
13.575 158.347 13.894 158.281 14.026 158.149 cv
14.169 158.017 14.235 157.742 14.235 157.324 cv
14.235 156.312 li
15.06 156.312 li
15.06 157.324 li
15.06 158.094 14.917 158.622 14.631 158.908 cv
14.345 159.194 13.828 159.337 13.08 159.337 cv
9.813 159.337 li
9.813 160.063 li
9.043 160.063 li
9.043 159.337 li
7.338 159.337 li
7.338 158.347 li
ef
9.274 150.672 mo
10.198 150.672 li
10.044 150.958 9.934 151.233 9.857 151.519 cv
9.78 151.805 9.736 152.08 9.736 152.366 cv
9.736 153.004 9.945 153.51 10.352 153.862 cv
10.759 154.214 11.331 154.39 12.057 154.39 cv
12.794 154.39 13.366 154.214 13.773 153.862 cv
14.18 153.51 14.378 153.004 14.378 152.366 cv
14.378 152.08 14.345 151.805 14.268 151.519 cv
14.191 151.233 14.07 150.958 13.916 150.672 cv
14.829 150.672 li
14.961 150.958 15.06 151.244 15.115 151.53 cv
15.17 151.827 15.203 152.146 15.203 152.476 cv
15.203 153.378 14.928 154.104 14.356 154.632 cv
13.795 155.171 13.025 155.435 12.057 155.435 cv
11.078 155.435 10.308 155.171 9.747 154.632 cv
9.186 154.093 8.9 153.356 8.9 152.41 cv
8.9 152.102 8.933 151.805 8.999 151.519 cv
9.065 151.233 9.153 150.947 9.274 150.672 cv
ef
11.43 143.881 mo
15.06 143.881 li
15.06 144.871 li
11.463 144.871 li
10.891 144.871 10.473 144.992 10.187 145.212 cv
9.901 145.432 9.758 145.762 9.758 146.202 cv
9.758 146.741 9.934 147.159 10.275 147.467 cv
10.616 147.775 11.078 147.929 11.661 147.929 cv
15.06 147.929 li
15.06 148.919 li
6.7 148.919 li
6.7 147.929 li
9.978 147.929 li
9.626 147.698 9.351 147.423 9.175 147.093 cv
8.999 146.774 8.9 146.4 8.9 145.982 cv
8.9 145.3 9.12 144.772 9.549 144.42 cv
9.978 144.068 10.605 143.881 11.43 143.881 cv
ef
9.043 141.926 mo
9.043 140.936 li
15.06 140.936 li
15.06 141.926 li
9.043 141.926 li
6.7 141.926 mo
7.954 141.926 mo
6.7 141.926 li
6.7 140.936 li
7.954 140.936 li
cp
ef
11.43 133.921 mo
15.06 133.921 li
15.06 134.911 li
11.463 134.911 li
10.891 134.911 10.473 135.032 10.187 135.252 cv
9.901 135.472 9.758 135.802 9.758 136.242 cv
9.758 136.781 9.934 137.199 10.275 137.507 cv
10.616 137.815 11.078 137.969 11.661 137.969 cv
15.06 137.969 li
15.06 138.959 li
9.043 138.959 li
9.043 137.969 li
9.978 137.969 li
9.626 137.738 9.351 137.463 9.175 137.133 cv
8.999 136.814 8.9 136.44 8.9 136.022 cv
8.9 135.34 9.12 134.812 9.549 134.46 cv
9.978 134.108 10.605 133.921 11.43 133.921 cv
ef
11.98 128.006 mo
11.276 128.006 10.715 128.16 10.319 128.446 cv
9.923 128.743 9.725 129.161 9.725 129.689 cv
9.725 130.217 9.923 130.635 10.319 130.932 cv
10.715 131.229 11.276 131.372 11.98 131.372 cv
12.695 131.372 13.245 131.229 13.641 130.932 cv
14.037 130.635 14.235 130.217 14.235 129.689 cv
14.235 129.161 14.037 128.743 13.641 128.446 cv
13.245 128.16 12.695 128.006 11.98 128.006 cv
14.312 127.016 mo
15.324 127.016 16.083 127.247 16.589 127.698 cv
17.084 128.16 17.337 128.853 17.337 129.788 cv
17.337 130.14 17.304 130.459 17.26 130.767 cv
17.205 131.075 17.128 131.383 17.018 131.669 cv
16.061 131.669 li
16.215 131.383 16.325 131.097 16.402 130.811 cv
16.479 130.525 16.523 130.239 16.523 129.942 cv
16.523 129.304 16.347 128.82 16.017 128.49 cv
15.676 128.171 15.17 128.006 14.488 128.006 cv
14.004 128.006 li
14.356 128.215 14.62 128.479 14.796 128.798 cv
14.972 129.117 15.06 129.491 15.06 129.931 cv
15.06 130.679 14.785 131.273 14.224 131.724 cv
13.663 132.175 12.915 132.395 11.98 132.395 cv
11.056 132.395 10.308 132.175 9.747 131.724 cv
9.186 131.273 8.9 130.679 8.9 129.931 cv
8.9 129.491 8.988 129.117 9.164 128.798 cv
9.34 128.479 9.604 128.215 9.956 128.006 cv
9.043 128.006 li
9.043 127.016 li
14.312 127.016 li
ef
7.338 120.427 mo
9.043 120.427 li
9.043 118.392 li
9.813 118.392 li
9.813 120.427 li
13.08 120.427 li
13.575 120.427 13.894 120.361 14.026 120.229 cv
14.169 120.097 14.235 119.822 14.235 119.404 cv
14.235 118.392 li
15.06 118.392 li
15.06 119.404 li
15.06 120.174 14.917 120.702 14.631 120.988 cv
14.345 121.274 13.828 121.417 13.08 121.417 cv
9.813 121.417 li
9.813 122.143 li
9.043 122.143 li
9.043 121.417 li
7.338 121.417 li
7.338 120.427 li
ef
9.043 117.086 mo
9.043 116.096 li
15.06 116.096 li
15.06 117.086 li
9.043 117.086 li
6.7 117.086 mo
7.954 117.086 mo
6.7 117.086 li
6.7 116.096 li
7.954 116.096 li
cp
ef
10.198 109.4 mo
9.758 109.158 9.439 108.861 9.219 108.52 cv
9.01 108.179 8.9 107.772 8.9 107.299 cv
8.9 106.683 9.12 106.199 9.56 105.858 cv
10 105.517 10.627 105.341 11.43 105.341 cv
15.06 105.341 li
15.06 106.331 li
11.463 106.331 li
10.891 106.331 10.462 106.441 10.176 106.639 cv
9.901 106.848 9.758 107.156 9.758 107.574 cv
9.758 108.091 9.934 108.498 10.275 108.795 cv
10.616 109.092 11.078 109.235 11.661 109.235 cv
15.06 109.235 li
15.06 110.225 li
11.463 110.225 li
10.891 110.225 10.462 110.335 10.176 110.533 cv
9.901 110.742 9.758 111.061 9.758 111.479 cv
9.758 111.985 9.934 112.392 10.275 112.689 cv
10.616 112.986 11.078 113.129 11.661 113.129 cv
15.06 113.129 li
15.06 114.119 li
9.043 114.119 li
9.043 113.129 li
9.978 113.129 li
9.615 112.909 9.34 112.634 9.164 112.315 cv
8.988 112.007 8.9 111.633 8.9 111.193 cv
8.9 110.753 9.01 110.39 9.23 110.082 cv
9.45 109.774 9.78 109.554 10.198 109.4 cv
ef
11.804 98.258 mo
12.288 98.258 li
12.288 102.801 li
12.97 102.757 13.498 102.559 13.85 102.185 cv
14.202 101.822 14.378 101.316 14.378 100.656 cv
14.378 100.282 14.334 99.908 14.246 99.556 cv
14.158 99.204 14.015 98.841 13.817 98.489 cv
14.752 98.489 li
14.906 98.841 15.027 99.204 15.093 99.578 cv
15.159 99.952 15.203 100.337 15.203 100.711 cv
15.203 101.679 14.928 102.438 14.378 102.999 cv
13.828 103.56 13.069 103.835 12.112 103.835 cv
11.133 103.835 10.352 103.571 9.769 103.043 cv
9.197 102.515 8.9 101.789 8.9 100.887 cv
8.9 100.073 9.164 99.435 9.681 98.962 cv
10.209 98.5 10.913 98.258 11.804 98.258 cv
11.518 99.248 mo
10.979 99.259 10.55 99.413 10.22 99.699 cv
9.901 99.996 9.736 100.392 9.736 100.876 cv
9.736 101.426 9.901 101.866 10.209 102.196 cv
10.517 102.526 10.957 102.724 11.518 102.768 cv
11.518 99.248 li
ef
6.711 90.71 mo
7.547 91.194 8.361 91.546 9.164 91.777 cv
9.967 92.019 10.781 92.129 11.606 92.129 cv
12.442 92.129 13.256 92.019 14.059 91.777 cv
14.873 91.546 15.676 91.194 16.501 90.71 cv
16.501 91.568 li
15.654 92.107 14.84 92.514 14.026 92.778 cv
13.212 93.042 12.409 93.174 11.606 93.174 cv
10.814 93.174 10.011 93.042 9.197 92.778 cv
8.383 92.514 7.558 92.118 6.711 91.568 cv
6.711 90.71 li
ef
9.219 84.927 mo
10.154 84.927 li
10.022 85.213 9.912 85.499 9.835 85.796 cv
9.769 86.104 9.725 86.412 9.725 86.731 cv
9.725 87.226 9.802 87.6 9.956 87.842 cv
10.11 88.084 10.33 88.205 10.627 88.205 cv
10.858 88.205 11.034 88.117 11.166 87.941 cv
11.298 87.765 11.43 87.413 11.54 86.885 cv
11.617 86.544 li
11.771 85.84 11.991 85.345 12.255 85.048 cv
12.53 84.762 12.915 84.608 13.399 84.608 cv
13.96 84.608 14.4 84.828 14.719 85.268 cv
15.049 85.708 15.203 86.324 15.203 87.094 cv
15.203 87.424 15.17 87.754 15.115 88.106 cv
15.06 88.458 14.972 88.821 14.84 89.206 cv
13.817 89.206 li
14.015 88.843 14.158 88.48 14.246 88.128 cv
14.345 87.776 14.389 87.424 14.389 87.072 cv
14.389 86.61 14.312 86.247 14.158 85.994 cv
14.004 85.752 13.773 85.62 13.476 85.62 cv
13.212 85.62 13.003 85.719 12.86 85.895 cv
12.717 86.071 12.574 86.467 12.442 87.083 cv
12.365 87.424 li
12.233 88.04 12.035 88.491 11.771 88.755 cv
11.507 89.03 11.144 89.162 10.671 89.162 cv
10.11 89.162 9.67 88.964 9.362 88.568 cv
9.054 88.172 8.9 87.6 8.9 86.852 cv
8.9 86.489 8.933 86.148 8.988 85.818 cv
9.043 85.499 9.12 85.202 9.219 84.927 cv
ef
6.711 83.16 mo
6.711 82.302 li
7.558 81.774 8.383 81.367 9.197 81.103 cv
10.011 80.839 10.814 80.696 11.606 80.696 cv
12.409 80.696 13.212 80.839 14.026 81.103 cv
14.84 81.367 15.654 81.774 16.501 82.302 cv
16.501 83.16 li
15.676 82.687 14.873 82.335 14.059 82.093 cv
13.256 81.862 12.442 81.741 11.606 81.741 cv
10.781 81.741 9.967 81.862 9.164 82.093 cv
8.361 82.335 7.547 82.687 6.711 83.16 cv
ef
1.5 lw
2 lc
62.399 261.21 mo
88.901 252.494 li
122.029 241.696 li
155.157 231.061 li
188.285 220.543 li
221.413 210.328 li
254.542 200.72 li
287.669 189.075 li
320.797 177.808 li
353.926 166.689 li
387.054 155.928 li
.895628 .7673 0 0 cmyk
@
59.399 264.21 mo
65.399 264.21 li
65.399 258.21 li
59.399 258.21 li
cp
f
1 lw
0 lc
0 lj
59.399 264.21 mo
65.399 264.21 li
65.399 258.21 li
59.399 258.21 li
cp
@
85.901 255.494 mo
91.901 255.494 li
91.901 249.494 li
85.901 249.494 li
cp
f
85.901 255.494 mo
91.901 255.494 li
91.901 249.494 li
85.901 249.494 li
cp
@
119.029 244.696 mo
125.029 244.696 li
125.029 238.696 li
119.029 238.696 li
cp
f
119.029 244.696 mo
125.029 244.696 li
125.029 238.696 li
119.029 238.696 li
cp
@
152.157 234.061 mo
158.157 234.061 li
158.157 228.061 li
152.157 228.061 li
cp
f
152.157 234.061 mo
158.157 234.061 li
158.157 228.061 li
152.157 228.061 li
cp
@
185.285 223.543 mo
191.285 223.543 li
191.285 217.543 li
185.285 217.543 li
cp
f
185.285 223.543 mo
191.285 223.543 li
191.285 217.543 li
185.285 217.543 li
cp
@
218.413 213.328 mo
224.413 213.328 li
224.413 207.328 li
218.413 207.328 li
cp
f
218.413 213.328 mo
224.413 213.328 li
224.413 207.328 li
218.413 207.328 li
cp
@
251.541 203.72 mo
257.541 203.72 li
257.541 197.72 li
251.541 197.72 li
cp
f
251.541 203.72 mo
257.541 203.72 li
257.541 197.72 li
251.541 197.72 li
cp
@
284.669 192.075 mo
290.669 192.075 li
290.669 186.075 li
284.669 186.075 li
cp
f
284.669 192.075 mo
290.669 192.075 li
290.669 186.075 li
284.669 186.075 li
cp
@
317.797 180.808 mo
323.797 180.808 li
323.797 174.808 li
317.797 174.808 li
cp
f
317.797 180.808 mo
323.797 180.808 li
323.797 174.808 li
317.797 174.808 li
cp
@
350.925 169.689 mo
356.925 169.689 li
356.925 163.689 li
350.925 163.689 li
cp
f
350.925 169.689 mo
356.925 169.689 li
356.925 163.689 li
350.925 163.689 li
cp
@
384.053 158.928 mo
390.053 158.928 li
390.053 152.928 li
384.053 152.928 li
cp
f
384.053 158.928 mo
390.053 158.928 li
390.053 152.928 li
384.053 152.928 li
cp
@
1.5 lw
2 lc
1 lj
62.399 258.017 mo
88.901 238.761 li
122.029 215.031 li
155.157 190.246 li
188.285 166.881 li
221.413 140.456 li
254.542 119.527 li
287.669 94.742 li
320.797 73.614 li
353.926 45.366 li
387.054 19.29 li
0 .990631 1 .000396735 cmyk
@
59.399 261.017 mo
65.399 261.017 li
65.399 255.017 li
59.399 255.017 li
cp
f
1 lw
0 lc
0 lj
59.399 261.017 mo
65.399 261.017 li
65.399 255.017 li
59.399 255.017 li
cp
@
85.901 241.762 mo
91.901 241.762 li
91.901 235.762 li
85.901 235.762 li
cp
f
85.901 241.762 mo
91.901 241.762 li
91.901 235.762 li
85.901 235.762 li
cp
@
119.029 218.031 mo
125.029 218.031 li
125.029 212.031 li
119.029 212.031 li
cp
f
119.029 218.031 mo
125.029 218.031 li
125.029 212.031 li
119.029 212.031 li
cp
@
152.157 193.246 mo
158.157 193.246 li
158.157 187.246 li
152.157 187.246 li
cp
f
152.157 193.246 mo
158.157 193.246 li
158.157 187.246 li
152.157 187.246 li
cp
@
185.285 169.881 mo
191.285 169.881 li
191.285 163.881 li
185.285 163.881 li
cp
f
185.285 169.881 mo
191.285 169.881 li
191.285 163.881 li
185.285 163.881 li
cp
@
218.413 143.457 mo
224.413 143.457 li
224.413 137.457 li
218.413 137.457 li
cp
f
218.413 143.457 mo
224.413 143.457 li
224.413 137.457 li
218.413 137.457 li
cp
@
251.541 122.527 mo
257.541 122.527 li
257.541 116.527 li
251.541 116.527 li
cp
f
251.541 122.527 mo
257.541 122.527 li
257.541 116.527 li
251.541 116.527 li
cp
@
284.669 97.742 mo
290.669 97.742 li
290.669 91.742 li
284.669 91.742 li
cp
f
284.669 97.742 mo
290.669 97.742 li
290.669 91.742 li
284.669 91.742 li
cp
@
317.797 76.615 mo
323.797 76.615 li
323.797 70.615 li
317.797 70.615 li
cp
f
317.797 76.615 mo
323.797 76.615 li
323.797 70.615 li
317.797 70.615 li
cp
@
350.925 48.366 mo
356.925 48.366 li
356.925 42.366 li
350.925 42.366 li
cp
f
350.925 48.366 mo
356.925 48.366 li
356.925 42.366 li
350.925 42.366 li
cp
@
384.053 22.29 mo
390.053 22.29 li
390.053 16.29 li
384.053 16.29 li
cp
f
384.053 22.29 mo
390.053 22.29 li
390.053 16.29 li
384.053 16.29 li
cp
@
.8 lw
2 lc
46.166 273.306 mo
46.166 7.194 li
1 /0 /CSD get_res sepcs
1 sep
@
403.286 273.306 mo
403.286 7.194 li
@
46.166 273.306 mo
403.286 273.306 li
@
46.166 7.194 mo
403.286 7.194 li
@
51.066 23.06 mo
137.379 23.06 li
138.312 23.06 138.779 22.593 138.779 21.66 cv
138.779 12.094 li
138.779 11.161 138.312 10.694 137.379 10.694 cv
51.066 10.694 li
50.133 10.694 49.666 11.161 49.666 12.094 cv
49.666 21.66 li
49.666 22.593 50.133 23.06 51.066 23.06 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
51.066 23.06 mo
137.379 23.06 li
138.312 23.06 138.779 22.593 138.779 21.66 cv
138.779 12.094 li
138.779 11.161 138.312 10.694 137.379 10.694 cv
51.066 10.694 li
50.133 10.694 49.666 11.161 49.666 12.094 cv
49.666 21.66 li
49.666 22.593 50.133 23.06 51.066 23.06 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
52.466 16.357 mo
66.466 16.357 li
.895628 .7673 0 0 cmyk
@
56.466 19.356 mo
62.466 19.356 li
62.466 13.356 li
56.466 13.356 li
cp
f
1 lw
0 lc
0 lj
56.466 19.356 mo
62.466 19.356 li
62.466 13.356 li
56.466 13.356 li
cp
@
75.805 13.825 mo
75.805 14.497 li
75.539 14.371 75.294 14.28 75.063 14.217 cv
74.825 14.161 74.601 14.126 74.391 14.126 cv
74.013 14.126 73.719 14.203 73.516 14.343 cv
73.313 14.49 73.215 14.7 73.215 14.966 cv
73.215 15.19 73.278 15.365 73.418 15.477 cv
73.551 15.596 73.81 15.687 74.188 15.757 cv
74.608 15.841 li
75.119 15.939 75.497 16.114 75.742 16.359 cv
75.987 16.611 76.113 16.94 76.113 17.353 cv
76.113 17.85 75.945 18.221 75.616 18.473 cv
75.28 18.725 74.797 18.851 74.16 18.851 cv
73.915 18.851 73.656 18.823 73.383 18.774 cv
73.11 18.725 72.83 18.648 72.543 18.536 cv
72.543 17.822 li
72.823 17.983 73.096 18.102 73.362 18.179 cv
73.628 18.263 73.894 18.298 74.16 18.298 cv
74.552 18.298 74.853 18.221 75.07 18.067 cv
75.28 17.913 75.392 17.696 75.392 17.402 cv
75.392 17.15 75.315 16.954 75.161 16.814 cv
75.007 16.674 74.755 16.569 74.405 16.499 cv
73.985 16.415 li
73.467 16.317 73.096 16.156 72.865 15.932 cv
72.634 15.715 72.522 15.414 72.522 15.022 cv
72.522 14.574 72.676 14.217 72.998 13.958 cv
73.313 13.699 73.754 13.566 74.314 13.566 cv
74.552 13.566 74.79 13.587 75.042 13.629 cv
75.287 13.671 75.539 13.741 75.805 13.825 cv
1 /0 /CSD get_res sepcs
1 sep
ef
80.245 13.825 mo
80.245 14.497 li
79.979 14.371 79.734 14.28 79.503 14.217 cv
79.265 14.161 79.041 14.126 78.831 14.126 cv
78.453 14.126 78.159 14.203 77.956 14.343 cv
77.753 14.49 77.655 14.7 77.655 14.966 cv
77.655 15.19 77.718 15.365 77.858 15.477 cv
77.991 15.596 78.25 15.687 78.628 15.757 cv
79.048 15.841 li
79.559 15.939 79.937 16.114 80.182 16.359 cv
80.427 16.611 80.553 16.94 80.553 17.353 cv
80.553 17.85 80.385 18.221 80.056 18.473 cv
79.72 18.725 79.237 18.851 78.6 18.851 cv
78.355 18.851 78.096 18.823 77.823 18.774 cv
77.55 18.725 77.27 18.648 76.983 18.536 cv
76.983 17.822 li
77.263 17.983 77.536 18.102 77.802 18.179 cv
78.068 18.263 78.334 18.298 78.6 18.298 cv
78.992 18.298 79.293 18.221 79.51 18.067 cv
79.72 17.913 79.832 17.696 79.832 17.402 cv
79.832 17.15 79.755 16.954 79.601 16.814 cv
79.447 16.674 79.195 16.569 78.845 16.499 cv
78.425 16.415 li
77.907 16.317 77.536 16.156 77.305 15.932 cv
77.074 15.715 76.962 15.414 76.962 15.022 cv
76.962 14.574 77.116 14.217 77.438 13.958 cv
77.753 13.699 78.194 13.566 78.754 13.566 cv
78.992 13.566 79.23 13.587 79.482 13.629 cv
79.727 13.671 79.979 13.741 80.245 13.825 cv
ef
82.319 14.224 mo
82.319 18.193 li
83.152 18.193 li
83.852 18.193 84.37 18.039 84.699 17.717 cv
85.021 17.395 85.189 16.891 85.189 16.205 cv
85.189 15.519 85.021 15.022 84.699 14.7 cv
84.37 14.385 83.852 14.224 83.152 14.224 cv
82.319 14.224 li
81.626 13.657 mo
83.047 13.657 li
84.034 13.657 84.762 13.867 85.224 14.273 cv
85.686 14.686 85.917 15.33 85.917 16.205 cv
85.917 17.087 85.679 17.731 85.217 18.144 cv
84.755 18.557 84.027 18.76 83.047 18.76 cv
81.626 18.76 li
81.626 13.657 li
ef
1.5 lw
2 lc
1 lj
100.332 16.357 mo
114.332 16.357 li
0 .990631 1 .000396735 cmyk
@
104.332 19.356 mo
110.332 19.356 li
110.332 13.356 li
104.332 13.356 li
cp
f
1 lw
0 lc
0 lj
104.332 19.356 mo
110.332 19.356 li
110.332 13.356 li
104.332 13.356 li
cp
@
120.626 13.657 mo
121.319 13.657 li
121.319 15.75 li
123.825 15.75 li
123.825 13.657 li
124.518 13.657 li
124.518 18.76 li
123.825 18.76 li
123.825 16.331 li
121.319 16.331 li
121.319 18.76 li
120.626 18.76 li
120.626 13.657 li
1 /0 /CSD get_res sepcs
1 sep
ef
126.599 14.224 mo
126.599 18.193 li
127.432 18.193 li
128.132 18.193 128.65 18.039 128.979 17.717 cv
129.301 17.395 129.469 16.891 129.469 16.205 cv
129.469 15.519 129.301 15.022 128.979 14.7 cv
128.65 14.385 128.132 14.224 127.432 14.224 cv
126.599 14.224 li
125.906 13.657 mo
127.327 13.657 li
128.314 13.657 129.042 13.867 129.504 14.273 cv
129.966 14.686 130.197 15.33 130.197 16.205 cv
130.197 17.087 129.959 17.731 129.497 18.144 cv
129.035 18.557 128.307 18.76 127.327 18.76 cv
125.906 18.76 li
125.906 13.657 li
ef
131.999 14.224 mo
131.999 18.193 li
132.832 18.193 li
133.532 18.193 134.05 18.039 134.379 17.717 cv
134.701 17.395 134.869 16.891 134.869 16.205 cv
134.869 15.519 134.701 15.022 134.379 14.7 cv
134.05 14.385 133.532 14.224 132.832 14.224 cv
131.999 14.224 li
131.306 13.657 mo
132.727 13.657 li
133.714 13.657 134.442 13.867 134.904 14.273 cv
135.366 14.686 135.597 15.33 135.597 16.205 cv
135.597 17.087 135.359 17.731 134.897 18.144 cv
134.435 18.557 133.707 18.76 132.727 18.76 cv
131.306 18.76 li
131.306 13.657 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
