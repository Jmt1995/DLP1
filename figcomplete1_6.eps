%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADP4DD0.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/27 ÐÇÆÚ¶þ, ÏÂÎç 2:46:14
%%BoundingBox: 0 0 454 338
%%HiResBoundingBox: 0 0 454 338
%%CropBox: 0 0 454 338
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 958 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-08-27T14:45:54+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-27T14:45:54+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:45275fba-07b6-45ac-93a3-82af99dc9172"
   xmpMM:InstanceID="uuid:34e55a04-2b34-444b-9dd1-cbc79f8ab3cd">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">figcomplete1_6.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -338 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 338 li
454 338 li
454 0 li
cp
clp
.29401 338 mo
453.706 338 li
453.706 -.0400085 li
.29401 -.0400085 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
54.307 292.773 mo
446.507 292.773 li
446.507 7.133 li
54.307 7.133 li
cp
f
72.134 292.773 mo
104.547 292.773 li
104.547 252.993 li
72.134 252.993 li
cp
.175418 .676722 .898802 0 cmyk
f
72.134 292.773 mo
104.547 292.773 li
104.547 252.993 li
72.134 252.993 li
cp
gsave
grestore
/208410220.0 
<<
/ID /208410220.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208410220.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
201.787 292.773 mo
234.2 292.773 li
234.2 174.697 li
201.787 174.697 li
cp
false sop
.175418 .676722 .898802 0 cmyk
f
201.787 292.773 mo
234.2 292.773 li
234.2 174.697 li
201.787 174.697 li
cp
gsave
grestore
/208410024.0 
<<
/ID /208410024.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208410024.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
331.44 292.773 mo
363.853 292.773 li
363.853 20.735 li
331.44 20.735 li
cp
false sop
.175418 .676722 .898802 0 cmyk
f
331.44 292.773 mo
363.853 292.773 li
363.853 20.735 li
331.44 20.735 li
cp
gsave
grestore
/208409632.0 
<<
/ID /208409632.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208409632.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
104.547 292.773 mo
136.96 292.773 li
136.96 271.462 li
104.547 271.462 li
cp
false sop
0 .644831 .344976 0 cmyk
f
104.547 292.773 mo
136.96 292.773 li
136.96 271.462 li
104.547 271.462 li
cp
gsave
grestore
/208409436.0 
<<
/ID /208409436.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208409436.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
234.2 292.773 mo
266.613 292.773 li
266.613 214.108 li
234.2 214.108 li
cp
false sop
0 .644831 .344976 0 cmyk
f
234.2 292.773 mo
266.613 292.773 li
266.613 214.108 li
234.2 214.108 li
cp
gsave
grestore
/208409240.0 
<<
/ID /208409240.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208409240.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
363.853 292.773 mo
396.266 292.773 li
396.266 102.767 li
363.853 102.767 li
cp
false sop
0 .644831 .344976 0 cmyk
f
363.853 292.773 mo
396.266 292.773 li
396.266 102.767 li
363.853 102.767 li
cp
gsave
grestore
/208408848.0 
<<
/ID /208408848.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208408848.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
136.96 292.773 mo
169.373 292.773 li
169.373 274.693 li
136.96 274.693 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
136.96 292.773 mo
169.373 292.773 li
169.373 274.693 li
136.96 274.693 li
cp
gsave
grestore
/208377716.0 
<<
/ID /208377716.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208377716.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
266.613 292.773 mo
299.026 292.773 li
299.026 234.051 li
266.613 234.051 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
266.613 292.773 mo
299.026 292.773 li
299.026 234.051 li
266.613 234.051 li
cp
gsave
grestore
/208377520.0 
<<
/ID /208377520.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/208377520.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
396.266 292.773 mo
428.679 292.773 li
428.679 144.767 li
396.266 144.767 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
396.266 292.773 mo
428.679 292.773 li
428.679 144.767 li
396.266 144.767 li
cp
gsave
grestore
/283952488.0 
<<
/ID /283952488.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/283952488.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
120.105 292.773 mo
120.105 296.273 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
120.105 292.773 mo
120.105 296.273 li
@
72.83 300.53 mo
72.83 301.874 li
72.298 301.622 71.808 301.44 71.346 301.314 cv
70.87 301.202 70.422 301.132 70.002 301.132 cv
69.246 301.132 68.658 301.286 68.252 301.566 cv
67.846 301.86 67.65 302.28 67.65 302.812 cv
67.65 303.26 67.776 303.61 68.056 303.834 cv
68.322 304.072 68.84 304.254 69.596 304.394 cv
70.436 304.562 li
71.458 304.758 72.214 305.108 72.704 305.598 cv
73.194 306.102 73.446 306.76 73.446 307.586 cv
73.446 308.58 73.11 309.322 72.452 309.826 cv
71.78 310.33 70.814 310.582 69.54 310.582 cv
69.05 310.582 68.532 310.526 67.986 310.428 cv
67.44 310.33 66.88 310.176 66.306 309.952 cv
66.306 308.524 li
66.866 308.846 67.412 309.084 67.944 309.238 cv
68.476 309.406 69.008 309.476 69.54 309.476 cv
70.324 309.476 70.926 309.322 71.36 309.014 cv
71.78 308.706 72.004 308.272 72.004 307.684 cv
72.004 307.18 71.85 306.788 71.542 306.508 cv
71.234 306.228 70.73 306.018 70.03 305.878 cv
69.19 305.71 li
68.154 305.514 67.412 305.192 66.95 304.744 cv
66.488 304.31 66.264 303.708 66.264 302.924 cv
66.264 302.028 66.572 301.314 67.216 300.796 cv
67.846 300.278 68.728 300.012 69.848 300.012 cv
70.324 300.012 70.8 300.054 71.304 300.138 cv
71.794 300.222 72.298 300.362 72.83 300.53 cv
ef
81.5 304.212 mo
81.808 303.652 82.186 303.246 82.62 302.966 cv
83.054 302.7 83.572 302.56 84.174 302.56 cv
84.958 302.56 85.574 302.84 86.008 303.4 cv
86.442 303.96 86.666 304.758 86.666 305.78 cv
86.666 310.4 li
85.406 310.4 li
85.406 305.822 li
85.406 305.094 85.266 304.548 85.014 304.184 cv
84.748 303.834 84.356 303.652 83.824 303.652 cv
83.166 303.652 82.648 303.876 82.27 304.31 cv
81.892 304.744 81.71 305.332 81.71 306.074 cv
81.71 310.4 li
80.45 310.4 li
80.45 305.822 li
80.45 305.094 80.31 304.548 80.058 304.184 cv
79.792 303.834 79.386 303.652 78.854 303.652 cv
78.21 303.652 77.692 303.876 77.314 304.31 cv
76.936 304.744 76.754 305.332 76.754 306.074 cv
76.754 310.4 li
75.494 310.4 li
75.494 302.742 li
76.754 302.742 li
76.754 303.932 li
77.034 303.47 77.384 303.12 77.79 302.896 cv
78.182 302.672 78.658 302.56 79.218 302.56 cv
79.778 302.56 80.24 302.7 80.632 302.98 cv
81.024 303.26 81.304 303.68 81.5 304.212 cv
ef
92.702 306.55 mo
91.68 306.55 90.98 306.676 90.588 306.9 cv
90.196 307.138 90 307.53 90 308.09 cv
90 308.538 90.14 308.902 90.434 309.154 cv
90.728 309.42 91.134 309.546 91.638 309.546 cv
92.338 309.546 92.898 309.308 93.318 308.804 cv
93.738 308.314 93.948 307.656 93.948 306.83 cv
93.948 306.55 li
92.702 306.55 li
95.208 306.032 mo
95.208 310.4 li
93.948 310.4 li
93.948 309.238 li
93.654 309.714 93.29 310.05 92.87 310.26 cv
92.45 310.47 91.918 310.582 91.302 310.582 cv
90.518 310.582 89.888 310.372 89.426 309.938 cv
88.964 309.504 88.74 308.916 88.74 308.174 cv
88.74 307.32 89.02 306.676 89.608 306.228 cv
90.182 305.794 91.036 305.57 92.184 305.57 cv
93.948 305.57 li
93.948 305.444 li
93.948 304.87 93.752 304.422 93.374 304.1 cv
92.996 303.792 92.464 303.624 91.778 303.624 cv
91.33 303.624 90.91 303.68 90.49 303.792 cv
90.07 303.904 89.678 304.058 89.3 304.254 cv
89.3 303.092 li
89.748 302.924 90.196 302.784 90.63 302.7 cv
91.064 302.616 91.484 302.56 91.904 302.56 cv
93.01 302.56 93.836 302.854 94.382 303.428 cv
94.928 304.002 95.208 304.87 95.208 306.032 cv
ef
97.736 310.4 mo
98.996 310.4 li
98.996 299.76 li
97.736 299.76 li
cp
f
101.696 310.4 mo
102.956 310.4 li
102.956 299.76 li
101.696 299.76 li
cp
f
109.122 300.194 mo
110.522 300.194 li
112.664 308.818 li
114.806 300.194 li
116.36 300.194 li
118.502 308.818 li
120.644 300.194 li
122.044 300.194 li
119.482 310.4 li
117.746 310.4 li
115.59 301.538 li
113.42 310.4 li
111.684 310.4 li
109.122 300.194 li
ef
126.744 303.624 mo
126.072 303.624 125.54 303.89 125.148 304.422 cv
124.756 304.954 124.56 305.668 124.56 306.578 cv
124.56 307.502 124.742 308.216 125.134 308.748 cv
125.526 309.28 126.058 309.532 126.744 309.532 cv
127.416 309.532 127.948 309.28 128.34 308.748 cv
128.732 308.216 128.928 307.502 128.928 306.578 cv
128.928 305.682 128.732 304.954 128.34 304.422 cv
127.948 303.89 127.416 303.624 126.744 303.624 cv
126.744 302.56 mo
127.836 302.56 128.69 302.924 129.32 303.624 cv
129.936 304.338 130.258 305.318 130.258 306.578 cv
130.258 307.838 129.936 308.818 129.32 309.518 cv
128.69 310.232 127.836 310.582 126.744 310.582 cv
125.638 310.582 124.77 310.232 124.154 309.518 cv
123.538 308.818 123.23 307.838 123.23 306.578 cv
123.23 305.318 123.538 304.338 124.154 303.624 cv
124.77 302.924 125.638 302.56 126.744 302.56 cv
ef
136.854 303.918 mo
136.714 303.834 136.56 303.778 136.392 303.736 cv
136.224 303.708 136.042 303.68 135.846 303.68 cv
135.132 303.68 134.586 303.918 134.208 304.38 cv
133.816 304.842 133.634 305.5 133.634 306.368 cv
133.634 310.4 li
132.374 310.4 li
132.374 302.742 li
133.634 302.742 li
133.634 303.932 li
133.886 303.47 134.236 303.12 134.656 302.896 cv
135.076 302.672 135.594 302.56 136.21 302.56 cv
136.294 302.56 136.392 302.574 136.504 302.574 cv
136.602 302.588 136.714 302.602 136.854 302.63 cv
136.854 303.918 li
ef
138.134 299.76 mo
139.394 299.76 li
139.394 306.046 li
143.146 302.742 li
144.756 302.742 li
140.696 306.326 li
144.924 310.4 li
143.286 310.4 li
139.394 306.662 li
139.394 310.4 li
138.134 310.4 li
138.134 299.76 li
ef
146.216 310.4 mo
147.476 310.4 li
147.476 299.76 li
146.216 299.76 li
cp
f
153.144 303.624 mo
152.472 303.624 151.94 303.89 151.548 304.422 cv
151.156 304.954 150.96 305.668 150.96 306.578 cv
150.96 307.502 151.142 308.216 151.534 308.748 cv
151.926 309.28 152.458 309.532 153.144 309.532 cv
153.816 309.532 154.348 309.28 154.74 308.748 cv
155.132 308.216 155.328 307.502 155.328 306.578 cv
155.328 305.682 155.132 304.954 154.74 304.422 cv
154.348 303.89 153.816 303.624 153.144 303.624 cv
153.144 302.56 mo
154.236 302.56 155.09 302.924 155.72 303.624 cv
156.336 304.338 156.658 305.318 156.658 306.578 cv
156.658 307.838 156.336 308.818 155.72 309.518 cv
155.09 310.232 154.236 310.582 153.144 310.582 cv
152.038 310.582 151.17 310.232 150.554 309.518 cv
149.938 308.818 149.63 307.838 149.63 306.578 cv
149.63 305.318 149.938 304.338 150.554 303.624 cv
151.17 302.924 152.038 302.56 153.144 302.56 cv
ef
162.182 306.55 mo
161.16 306.55 160.46 306.676 160.068 306.9 cv
159.676 307.138 159.48 307.53 159.48 308.09 cv
159.48 308.538 159.62 308.902 159.914 309.154 cv
160.208 309.42 160.614 309.546 161.118 309.546 cv
161.818 309.546 162.378 309.308 162.798 308.804 cv
163.218 308.314 163.428 307.656 163.428 306.83 cv
163.428 306.55 li
162.182 306.55 li
164.688 306.032 mo
164.688 310.4 li
163.428 310.4 li
163.428 309.238 li
163.134 309.714 162.77 310.05 162.35 310.26 cv
161.93 310.47 161.398 310.582 160.782 310.582 cv
159.998 310.582 159.368 310.372 158.906 309.938 cv
158.444 309.504 158.22 308.916 158.22 308.174 cv
158.22 307.32 158.5 306.676 159.088 306.228 cv
159.662 305.794 160.516 305.57 161.664 305.57 cv
163.428 305.57 li
163.428 305.444 li
163.428 304.87 163.232 304.422 162.854 304.1 cv
162.476 303.792 161.944 303.624 161.258 303.624 cv
160.81 303.624 160.39 303.68 159.97 303.792 cv
159.55 303.904 159.158 304.058 158.78 304.254 cv
158.78 303.092 li
159.228 302.924 159.676 302.784 160.11 302.7 cv
160.544 302.616 160.964 302.56 161.384 302.56 cv
162.49 302.56 163.316 302.854 163.862 303.428 cv
164.408 304.002 164.688 304.87 164.688 306.032 cv
ef
172.376 303.904 mo
172.376 299.76 li
173.636 299.76 li
173.636 310.4 li
172.376 310.4 li
172.376 309.252 li
172.11 309.714 171.774 310.05 171.368 310.26 cv
170.962 310.47 170.486 310.582 169.926 310.582 cv
169.002 310.582 168.246 310.218 167.658 309.49 cv
167.07 308.762 166.79 307.782 166.79 306.578 cv
166.79 305.374 167.07 304.408 167.658 303.666 cv
168.246 302.938 169.002 302.56 169.926 302.56 cv
170.486 302.56 170.962 302.672 171.368 302.896 cv
171.774 303.12 172.11 303.456 172.376 303.904 cv
168.092 306.578 mo
168.092 307.502 168.274 308.23 168.652 308.762 cv
169.03 309.294 169.562 309.546 170.234 309.546 cv
170.892 309.546 171.41 309.294 171.802 308.762 cv
172.18 308.23 172.376 307.502 172.376 306.578 cv
172.376 305.654 172.18 304.94 171.802 304.408 cv
171.41 303.876 170.892 303.61 170.234 303.61 cv
169.562 303.61 169.03 303.876 168.652 304.408 cv
168.274 304.94 168.092 305.654 168.092 306.578 cv
ef
249.758 292.773 mo
249.758 296.273 li
f
249.758 292.773 mo
249.758 296.273 li
@
187.792 300.194 mo
189.85 300.194 li
192.454 307.138 li
195.072 300.194 li
197.13 300.194 li
197.13 310.4 li
195.786 310.4 li
195.786 301.44 li
193.154 308.44 li
191.768 308.44 li
189.136 301.44 li
189.136 310.4 li
187.792 310.4 li
187.792 300.194 li
ef
206.408 306.256 mo
206.408 306.872 li
200.626 306.872 li
200.682 307.74 200.934 308.412 201.41 308.86 cv
201.872 309.308 202.516 309.532 203.356 309.532 cv
203.832 309.532 204.308 309.476 204.756 309.364 cv
205.204 309.252 205.666 309.07 206.114 308.818 cv
206.114 310.008 li
205.666 310.204 205.204 310.358 204.728 310.442 cv
204.252 310.526 203.762 310.582 203.286 310.582 cv
202.054 310.582 201.088 310.232 200.374 309.532 cv
199.66 308.832 199.31 307.866 199.31 306.648 cv
199.31 305.402 199.646 304.408 200.318 303.666 cv
200.99 302.938 201.914 302.56 203.062 302.56 cv
204.098 302.56 204.91 302.896 205.512 303.554 cv
206.1 304.226 206.408 305.122 206.408 306.256 cv
205.148 305.892 mo
205.134 305.206 204.938 304.66 204.574 304.24 cv
204.196 303.834 203.692 303.624 203.076 303.624 cv
202.376 303.624 201.816 303.834 201.396 304.226 cv
200.976 304.618 200.724 305.178 200.668 305.892 cv
205.148 305.892 li
ef
213.536 303.904 mo
213.536 299.76 li
214.796 299.76 li
214.796 310.4 li
213.536 310.4 li
213.536 309.252 li
213.27 309.714 212.934 310.05 212.528 310.26 cv
212.122 310.47 211.646 310.582 211.086 310.582 cv
210.162 310.582 209.406 310.218 208.818 309.49 cv
208.23 308.762 207.95 307.782 207.95 306.578 cv
207.95 305.374 208.23 304.408 208.818 303.666 cv
209.406 302.938 210.162 302.56 211.086 302.56 cv
211.646 302.56 212.122 302.672 212.528 302.896 cv
212.934 303.12 213.27 303.456 213.536 303.904 cv
209.252 306.578 mo
209.252 307.502 209.434 308.23 209.812 308.762 cv
210.19 309.294 210.722 309.546 211.394 309.546 cv
212.052 309.546 212.57 309.294 212.962 308.762 cv
213.34 308.23 213.536 307.502 213.536 306.578 cv
213.536 305.654 213.34 304.94 212.962 304.408 cv
212.57 303.876 212.052 303.61 211.394 303.61 cv
210.722 303.61 210.19 303.876 209.812 304.408 cv
209.434 304.94 209.252 305.654 209.252 306.578 cv
ef
217.376 302.742 mo
218.636 302.742 li
218.636 310.4 li
217.376 310.4 li
217.376 302.742 li
217.376 299.76 mo
217.376 299.76 mo
218.636 299.76 li
218.636 301.356 li
217.376 301.356 li
cp
ef
221.09 307.376 mo
221.09 302.742 li
222.35 302.742 li
222.35 307.334 li
222.35 308.062 222.49 308.594 222.77 308.958 cv
223.05 309.322 223.47 309.504 224.044 309.504 cv
224.716 309.504 225.262 309.294 225.654 308.86 cv
226.046 308.426 226.242 307.838 226.242 307.082 cv
226.242 302.742 li
227.502 302.742 li
227.502 310.4 li
226.242 310.4 li
226.242 309.224 li
225.934 309.7 225.57 310.036 225.178 310.26 cv
224.772 310.47 224.31 310.582 223.778 310.582 cv
222.896 310.582 222.224 310.316 221.776 309.77 cv
221.314 309.238 221.09 308.44 221.09 307.376 cv
224.254 302.56 mo
224.254 302.56 li
ef
236.06 304.212 mo
236.368 303.652 236.746 303.246 237.18 302.966 cv
237.614 302.7 238.132 302.56 238.734 302.56 cv
239.518 302.56 240.134 302.84 240.568 303.4 cv
241.002 303.96 241.226 304.758 241.226 305.78 cv
241.226 310.4 li
239.966 310.4 li
239.966 305.822 li
239.966 305.094 239.826 304.548 239.574 304.184 cv
239.308 303.834 238.916 303.652 238.384 303.652 cv
237.726 303.652 237.208 303.876 236.83 304.31 cv
236.452 304.744 236.27 305.332 236.27 306.074 cv
236.27 310.4 li
235.01 310.4 li
235.01 305.822 li
235.01 305.094 234.87 304.548 234.618 304.184 cv
234.352 303.834 233.946 303.652 233.414 303.652 cv
232.77 303.652 232.252 303.876 231.874 304.31 cv
231.496 304.744 231.314 305.332 231.314 306.074 cv
231.314 310.4 li
230.054 310.4 li
230.054 302.742 li
231.314 302.742 li
231.314 303.932 li
231.594 303.47 231.944 303.12 232.35 302.896 cv
232.742 302.672 233.218 302.56 233.778 302.56 cv
234.338 302.56 234.8 302.7 235.192 302.98 cv
235.584 303.26 235.864 303.68 236.06 304.212 cv
ef
247.362 300.194 mo
248.762 300.194 li
250.904 308.818 li
253.046 300.194 li
254.6 300.194 li
256.742 308.818 li
258.884 300.194 li
260.284 300.194 li
257.722 310.4 li
255.986 310.4 li
253.83 301.538 li
251.66 310.4 li
249.924 310.4 li
247.362 300.194 li
ef
264.984 303.624 mo
264.312 303.624 263.78 303.89 263.388 304.422 cv
262.996 304.954 262.8 305.668 262.8 306.578 cv
262.8 307.502 262.982 308.216 263.374 308.748 cv
263.766 309.28 264.298 309.532 264.984 309.532 cv
265.656 309.532 266.188 309.28 266.58 308.748 cv
266.972 308.216 267.168 307.502 267.168 306.578 cv
267.168 305.682 266.972 304.954 266.58 304.422 cv
266.188 303.89 265.656 303.624 264.984 303.624 cv
264.984 302.56 mo
266.076 302.56 266.93 302.924 267.56 303.624 cv
268.176 304.338 268.498 305.318 268.498 306.578 cv
268.498 307.838 268.176 308.818 267.56 309.518 cv
266.93 310.232 266.076 310.582 264.984 310.582 cv
263.878 310.582 263.01 310.232 262.394 309.518 cv
261.778 308.818 261.47 307.838 261.47 306.578 cv
261.47 305.318 261.778 304.338 262.394 303.624 cv
263.01 302.924 263.878 302.56 264.984 302.56 cv
ef
275.094 303.918 mo
274.954 303.834 274.8 303.778 274.632 303.736 cv
274.464 303.708 274.282 303.68 274.086 303.68 cv
273.372 303.68 272.826 303.918 272.448 304.38 cv
272.056 304.842 271.874 305.5 271.874 306.368 cv
271.874 310.4 li
270.614 310.4 li
270.614 302.742 li
271.874 302.742 li
271.874 303.932 li
272.126 303.47 272.476 303.12 272.896 302.896 cv
273.316 302.672 273.834 302.56 274.45 302.56 cv
274.534 302.56 274.632 302.574 274.744 302.574 cv
274.842 302.588 274.954 302.602 275.094 302.63 cv
275.094 303.918 li
ef
276.254 299.76 mo
277.514 299.76 li
277.514 306.046 li
281.266 302.742 li
282.876 302.742 li
278.816 306.326 li
283.044 310.4 li
281.406 310.4 li
277.514 306.662 li
277.514 310.4 li
276.254 310.4 li
276.254 299.76 li
ef
284.456 310.4 mo
285.716 310.4 li
285.716 299.76 li
284.456 299.76 li
cp
f
291.264 303.624 mo
290.592 303.624 290.06 303.89 289.668 304.422 cv
289.276 304.954 289.08 305.668 289.08 306.578 cv
289.08 307.502 289.262 308.216 289.654 308.748 cv
290.046 309.28 290.578 309.532 291.264 309.532 cv
291.936 309.532 292.468 309.28 292.86 308.748 cv
293.252 308.216 293.448 307.502 293.448 306.578 cv
293.448 305.682 293.252 304.954 292.86 304.422 cv
292.468 303.89 291.936 303.624 291.264 303.624 cv
291.264 302.56 mo
292.356 302.56 293.21 302.924 293.84 303.624 cv
294.456 304.338 294.778 305.318 294.778 306.578 cv
294.778 307.838 294.456 308.818 293.84 309.518 cv
293.21 310.232 292.356 310.582 291.264 310.582 cv
290.158 310.582 289.29 310.232 288.674 309.518 cv
288.058 308.818 287.75 307.838 287.75 306.578 cv
287.75 305.318 288.058 304.338 288.674 303.624 cv
289.29 302.924 290.158 302.56 291.264 302.56 cv
ef
300.422 306.55 mo
299.4 306.55 298.7 306.676 298.308 306.9 cv
297.916 307.138 297.72 307.53 297.72 308.09 cv
297.72 308.538 297.86 308.902 298.154 309.154 cv
298.448 309.42 298.854 309.546 299.358 309.546 cv
300.058 309.546 300.618 309.308 301.038 308.804 cv
301.458 308.314 301.668 307.656 301.668 306.83 cv
301.668 306.55 li
300.422 306.55 li
302.928 306.032 mo
302.928 310.4 li
301.668 310.4 li
301.668 309.238 li
301.374 309.714 301.01 310.05 300.59 310.26 cv
300.17 310.47 299.638 310.582 299.022 310.582 cv
298.238 310.582 297.608 310.372 297.146 309.938 cv
296.684 309.504 296.46 308.916 296.46 308.174 cv
296.46 307.32 296.74 306.676 297.328 306.228 cv
297.902 305.794 298.756 305.57 299.904 305.57 cv
301.668 305.57 li
301.668 305.444 li
301.668 304.87 301.472 304.422 301.094 304.1 cv
300.716 303.792 300.184 303.624 299.498 303.624 cv
299.05 303.624 298.63 303.68 298.21 303.792 cv
297.79 303.904 297.398 304.058 297.02 304.254 cv
297.02 303.092 li
297.468 302.924 297.916 302.784 298.35 302.7 cv
298.784 302.616 299.204 302.56 299.624 302.56 cv
300.73 302.56 301.556 302.854 302.102 303.428 cv
302.648 304.002 302.928 304.87 302.928 306.032 cv
ef
310.496 303.904 mo
310.496 299.76 li
311.756 299.76 li
311.756 310.4 li
310.496 310.4 li
310.496 309.252 li
310.23 309.714 309.894 310.05 309.488 310.26 cv
309.082 310.47 308.606 310.582 308.046 310.582 cv
307.122 310.582 306.366 310.218 305.778 309.49 cv
305.19 308.762 304.91 307.782 304.91 306.578 cv
304.91 305.374 305.19 304.408 305.778 303.666 cv
306.366 302.938 307.122 302.56 308.046 302.56 cv
308.606 302.56 309.082 302.672 309.488 302.896 cv
309.894 303.12 310.23 303.456 310.496 303.904 cv
306.212 306.578 mo
306.212 307.502 306.394 308.23 306.772 308.762 cv
307.15 309.294 307.682 309.546 308.354 309.546 cv
309.012 309.546 309.53 309.294 309.922 308.762 cv
310.3 308.23 310.496 307.502 310.496 306.578 cv
310.496 305.654 310.3 304.94 309.922 304.408 cv
309.53 303.876 309.012 303.61 308.354 303.61 cv
307.682 303.61 307.15 303.876 306.772 304.408 cv
306.394 304.94 306.212 305.654 306.212 306.578 cv
ef
379.411 292.773 mo
379.411 296.273 li
f
379.411 292.773 mo
379.411 296.273 li
@
325.672 300.194 mo
327.058 300.194 li
327.058 309.238 li
332.028 309.238 li
332.028 310.4 li
325.672 310.4 li
325.672 300.194 li
ef
336.902 306.55 mo
335.88 306.55 335.18 306.676 334.788 306.9 cv
334.396 307.138 334.2 307.53 334.2 308.09 cv
334.2 308.538 334.34 308.902 334.634 309.154 cv
334.928 309.42 335.334 309.546 335.838 309.546 cv
336.538 309.546 337.098 309.308 337.518 308.804 cv
337.938 308.314 338.148 307.656 338.148 306.83 cv
338.148 306.55 li
336.902 306.55 li
339.408 306.032 mo
339.408 310.4 li
338.148 310.4 li
338.148 309.238 li
337.854 309.714 337.49 310.05 337.07 310.26 cv
336.65 310.47 336.118 310.582 335.502 310.582 cv
334.718 310.582 334.088 310.372 333.626 309.938 cv
333.164 309.504 332.94 308.916 332.94 308.174 cv
332.94 307.32 333.22 306.676 333.808 306.228 cv
334.382 305.794 335.236 305.57 336.384 305.57 cv
338.148 305.57 li
338.148 305.444 li
338.148 304.87 337.952 304.422 337.574 304.1 cv
337.196 303.792 336.664 303.624 335.978 303.624 cv
335.53 303.624 335.11 303.68 334.69 303.792 cv
334.27 303.904 333.878 304.058 333.5 304.254 cv
333.5 303.092 li
333.948 302.924 334.396 302.784 334.83 302.7 cv
335.264 302.616 335.684 302.56 336.104 302.56 cv
337.21 302.56 338.036 302.854 338.582 303.428 cv
339.128 304.002 339.408 304.87 339.408 306.032 cv
ef
346.374 303.918 mo
346.234 303.834 346.08 303.778 345.912 303.736 cv
345.744 303.708 345.562 303.68 345.366 303.68 cv
344.652 303.68 344.106 303.918 343.728 304.38 cv
343.336 304.842 343.154 305.5 343.154 306.368 cv
343.154 310.4 li
341.894 310.4 li
341.894 302.742 li
343.154 302.742 li
343.154 303.932 li
343.406 303.47 343.756 303.12 344.176 302.896 cv
344.596 302.672 345.114 302.56 345.73 302.56 cv
345.814 302.56 345.912 302.574 346.024 302.574 cv
346.122 302.588 346.234 302.602 346.374 302.63 cv
346.374 303.918 li
ef
352.736 306.48 mo
352.736 305.584 352.54 304.87 352.176 304.366 cv
351.798 303.862 351.266 303.61 350.594 303.61 cv
349.922 303.61 349.39 303.862 349.012 304.366 cv
348.634 304.87 348.452 305.584 348.452 306.48 cv
348.452 307.39 348.634 308.09 349.012 308.594 cv
349.39 309.098 349.922 309.35 350.594 309.35 cv
351.266 309.35 351.798 309.098 352.176 308.594 cv
352.54 308.09 352.736 307.39 352.736 306.48 cv
353.996 309.448 mo
353.996 310.736 353.702 311.702 353.128 312.346 cv
352.54 312.976 351.658 313.298 350.468 313.298 cv
350.02 313.298 349.614 313.256 349.222 313.2 cv
348.83 313.13 348.438 313.032 348.074 312.892 cv
348.074 311.674 li
348.438 311.87 348.802 312.01 349.166 312.108 cv
349.53 312.206 349.894 312.262 350.272 312.262 cv
351.084 312.262 351.7 312.038 352.12 311.618 cv
352.526 311.184 352.736 310.54 352.736 309.672 cv
352.736 309.056 li
352.47 309.504 352.134 309.84 351.728 310.064 cv
351.322 310.288 350.846 310.4 350.286 310.4 cv
349.334 310.4 348.578 310.05 348.004 309.336 cv
347.43 308.622 347.15 307.67 347.15 306.48 cv
347.15 305.304 347.43 304.352 348.004 303.638 cv
348.578 302.924 349.334 302.56 350.286 302.56 cv
350.846 302.56 351.322 302.672 351.728 302.896 cv
352.134 303.12 352.47 303.456 352.736 303.904 cv
352.736 302.742 li
353.996 302.742 li
353.996 309.448 li
ef
363.128 306.256 mo
363.128 306.872 li
357.346 306.872 li
357.402 307.74 357.654 308.412 358.13 308.86 cv
358.592 309.308 359.236 309.532 360.076 309.532 cv
360.552 309.532 361.028 309.476 361.476 309.364 cv
361.924 309.252 362.386 309.07 362.834 308.818 cv
362.834 310.008 li
362.386 310.204 361.924 310.358 361.448 310.442 cv
360.972 310.526 360.482 310.582 360.006 310.582 cv
358.774 310.582 357.808 310.232 357.094 309.532 cv
356.38 308.832 356.03 307.866 356.03 306.648 cv
356.03 305.402 356.366 304.408 357.038 303.666 cv
357.71 302.938 358.634 302.56 359.782 302.56 cv
360.818 302.56 361.63 302.896 362.232 303.554 cv
362.82 304.226 363.128 305.122 363.128 306.256 cv
361.868 305.892 mo
361.854 305.206 361.658 304.66 361.294 304.24 cv
360.916 303.834 360.412 303.624 359.796 303.624 cv
359.096 303.624 358.536 303.834 358.116 304.226 cv
357.696 304.618 357.444 305.178 357.388 305.892 cv
361.868 305.892 li
ef
368.802 300.194 mo
370.202 300.194 li
372.344 308.818 li
374.486 300.194 li
376.04 300.194 li
378.182 308.818 li
380.324 300.194 li
381.724 300.194 li
379.162 310.4 li
377.426 310.4 li
375.27 301.538 li
373.1 310.4 li
371.364 310.4 li
368.802 300.194 li
ef
386.544 303.624 mo
385.872 303.624 385.34 303.89 384.948 304.422 cv
384.556 304.954 384.36 305.668 384.36 306.578 cv
384.36 307.502 384.542 308.216 384.934 308.748 cv
385.326 309.28 385.858 309.532 386.544 309.532 cv
387.216 309.532 387.748 309.28 388.14 308.748 cv
388.532 308.216 388.728 307.502 388.728 306.578 cv
388.728 305.682 388.532 304.954 388.14 304.422 cv
387.748 303.89 387.216 303.624 386.544 303.624 cv
386.544 302.56 mo
387.636 302.56 388.49 302.924 389.12 303.624 cv
389.736 304.338 390.058 305.318 390.058 306.578 cv
390.058 307.838 389.736 308.818 389.12 309.518 cv
388.49 310.232 387.636 310.582 386.544 310.582 cv
385.438 310.582 384.57 310.232 383.954 309.518 cv
383.338 308.818 383.03 307.838 383.03 306.578 cv
383.03 305.318 383.338 304.338 383.954 303.624 cv
384.57 302.924 385.438 302.56 386.544 302.56 cv
ef
396.534 303.918 mo
396.394 303.834 396.24 303.778 396.072 303.736 cv
395.904 303.708 395.722 303.68 395.526 303.68 cv
394.812 303.68 394.266 303.918 393.888 304.38 cv
393.496 304.842 393.314 305.5 393.314 306.368 cv
393.314 310.4 li
392.054 310.4 li
392.054 302.742 li
393.314 302.742 li
393.314 303.932 li
393.566 303.47 393.916 303.12 394.336 302.896 cv
394.756 302.672 395.274 302.56 395.89 302.56 cv
395.974 302.56 396.072 302.574 396.184 302.574 cv
396.282 302.588 396.394 302.602 396.534 302.63 cv
396.534 303.918 li
ef
397.814 299.76 mo
399.074 299.76 li
399.074 306.046 li
402.826 302.742 li
404.436 302.742 li
400.376 306.326 li
404.604 310.4 li
402.966 310.4 li
399.074 306.662 li
399.074 310.4 li
397.814 310.4 li
397.814 299.76 li
ef
405.896 310.4 mo
407.156 310.4 li
407.156 299.76 li
405.896 299.76 li
cp
f
412.824 303.624 mo
412.152 303.624 411.62 303.89 411.228 304.422 cv
410.836 304.954 410.64 305.668 410.64 306.578 cv
410.64 307.502 410.822 308.216 411.214 308.748 cv
411.606 309.28 412.138 309.532 412.824 309.532 cv
413.496 309.532 414.028 309.28 414.42 308.748 cv
414.812 308.216 415.008 307.502 415.008 306.578 cv
415.008 305.682 414.812 304.954 414.42 304.422 cv
414.028 303.89 413.496 303.624 412.824 303.624 cv
412.824 302.56 mo
413.916 302.56 414.77 302.924 415.4 303.624 cv
416.016 304.338 416.338 305.318 416.338 306.578 cv
416.338 307.838 416.016 308.818 415.4 309.518 cv
414.77 310.232 413.916 310.582 412.824 310.582 cv
411.718 310.582 410.85 310.232 410.234 309.518 cv
409.618 308.818 409.31 307.838 409.31 306.578 cv
409.31 305.318 409.618 304.338 410.234 303.624 cv
410.85 302.924 411.718 302.56 412.824 302.56 cv
ef
421.862 306.55 mo
420.84 306.55 420.14 306.676 419.748 306.9 cv
419.356 307.138 419.16 307.53 419.16 308.09 cv
419.16 308.538 419.3 308.902 419.594 309.154 cv
419.888 309.42 420.294 309.546 420.798 309.546 cv
421.498 309.546 422.058 309.308 422.478 308.804 cv
422.898 308.314 423.108 307.656 423.108 306.83 cv
423.108 306.55 li
421.862 306.55 li
424.368 306.032 mo
424.368 310.4 li
423.108 310.4 li
423.108 309.238 li
422.814 309.714 422.45 310.05 422.03 310.26 cv
421.61 310.47 421.078 310.582 420.462 310.582 cv
419.678 310.582 419.048 310.372 418.586 309.938 cv
418.124 309.504 417.9 308.916 417.9 308.174 cv
417.9 307.32 418.18 306.676 418.768 306.228 cv
419.342 305.794 420.196 305.57 421.344 305.57 cv
423.108 305.57 li
423.108 305.444 li
423.108 304.87 422.912 304.422 422.534 304.1 cv
422.156 303.792 421.624 303.624 420.938 303.624 cv
420.49 303.624 420.07 303.68 419.65 303.792 cv
419.23 303.904 418.838 304.058 418.46 304.254 cv
418.46 303.092 li
418.908 302.924 419.356 302.784 419.79 302.7 cv
420.224 302.616 420.644 302.56 421.064 302.56 cv
422.17 302.56 422.996 302.854 423.542 303.428 cv
424.088 304.002 424.368 304.87 424.368 306.032 cv
ef
432.056 303.904 mo
432.056 299.76 li
433.316 299.76 li
433.316 310.4 li
432.056 310.4 li
432.056 309.252 li
431.79 309.714 431.454 310.05 431.048 310.26 cv
430.642 310.47 430.166 310.582 429.606 310.582 cv
428.682 310.582 427.926 310.218 427.338 309.49 cv
426.75 308.762 426.47 307.782 426.47 306.578 cv
426.47 305.374 426.75 304.408 427.338 303.666 cv
427.926 302.938 428.682 302.56 429.606 302.56 cv
430.166 302.56 430.642 302.672 431.048 302.896 cv
431.454 303.12 431.79 303.456 432.056 303.904 cv
427.772 306.578 mo
427.772 307.502 427.954 308.23 428.332 308.762 cv
428.71 309.294 429.242 309.546 429.914 309.546 cv
430.572 309.546 431.09 309.294 431.482 308.762 cv
431.86 308.23 432.056 307.502 432.056 306.578 cv
432.056 305.654 431.86 304.94 431.482 304.408 cv
431.09 303.876 430.572 303.61 429.914 303.61 cv
429.242 303.61 428.71 303.876 428.332 304.408 cv
427.954 304.94 427.772 305.654 427.772 306.578 cv
ef
214.122 317.714 mo
215.522 317.714 li
217.664 326.338 li
219.806 317.714 li
221.36 317.714 li
223.502 326.338 li
225.644 317.714 li
227.044 317.714 li
224.482 327.92 li
222.746 327.92 li
220.59 319.058 li
218.42 327.92 li
216.684 327.92 li
214.122 317.714 li
ef
231.744 321.144 mo
231.072 321.144 230.54 321.41 230.148 321.942 cv
229.756 322.474 229.56 323.188 229.56 324.098 cv
229.56 325.022 229.742 325.736 230.134 326.268 cv
230.526 326.8 231.058 327.052 231.744 327.052 cv
232.416 327.052 232.948 326.8 233.34 326.268 cv
233.732 325.736 233.928 325.022 233.928 324.098 cv
233.928 323.202 233.732 322.474 233.34 321.942 cv
232.948 321.41 232.416 321.144 231.744 321.144 cv
231.744 320.08 mo
232.836 320.08 233.69 320.444 234.32 321.144 cv
234.936 321.858 235.258 322.838 235.258 324.098 cv
235.258 325.358 234.936 326.338 234.32 327.038 cv
233.69 327.752 232.836 328.102 231.744 328.102 cv
230.638 328.102 229.77 327.752 229.154 327.038 cv
228.538 326.338 228.23 325.358 228.23 324.098 cv
228.23 322.838 228.538 321.858 229.154 321.144 cv
229.77 320.444 230.638 320.08 231.744 320.08 cv
ef
241.854 321.438 mo
241.714 321.354 241.56 321.298 241.392 321.256 cv
241.224 321.228 241.042 321.2 240.846 321.2 cv
240.132 321.2 239.586 321.438 239.208 321.9 cv
238.816 322.362 238.634 323.02 238.634 323.888 cv
238.634 327.92 li
237.374 327.92 li
237.374 320.262 li
238.634 320.262 li
238.634 321.452 li
238.886 320.99 239.236 320.64 239.656 320.416 cv
240.076 320.192 240.594 320.08 241.21 320.08 cv
241.294 320.08 241.392 320.094 241.504 320.094 cv
241.602 320.108 241.714 320.122 241.854 320.15 cv
241.854 321.438 li
ef
243.134 317.28 mo
244.394 317.28 li
244.394 323.566 li
248.146 320.262 li
249.756 320.262 li
245.696 323.846 li
249.924 327.92 li
248.286 327.92 li
244.394 324.182 li
244.394 327.92 li
243.134 327.92 li
243.134 317.28 li
ef
251.216 327.92 mo
252.476 327.92 li
252.476 317.28 li
251.216 317.28 li
cp
f
258.144 321.144 mo
257.472 321.144 256.94 321.41 256.548 321.942 cv
256.156 322.474 255.96 323.188 255.96 324.098 cv
255.96 325.022 256.142 325.736 256.534 326.268 cv
256.926 326.8 257.458 327.052 258.144 327.052 cv
258.816 327.052 259.348 326.8 259.74 326.268 cv
260.132 325.736 260.328 325.022 260.328 324.098 cv
260.328 323.202 260.132 322.474 259.74 321.942 cv
259.348 321.41 258.816 321.144 258.144 321.144 cv
258.144 320.08 mo
259.236 320.08 260.09 320.444 260.72 321.144 cv
261.336 321.858 261.658 322.838 261.658 324.098 cv
261.658 325.358 261.336 326.338 260.72 327.038 cv
260.09 327.752 259.236 328.102 258.144 328.102 cv
257.038 328.102 256.17 327.752 255.554 327.038 cv
254.938 326.338 254.63 325.358 254.63 324.098 cv
254.63 322.838 254.938 321.858 255.554 321.144 cv
256.17 320.444 257.038 320.08 258.144 320.08 cv
ef
267.182 324.07 mo
266.16 324.07 265.46 324.196 265.068 324.42 cv
264.676 324.658 264.48 325.05 264.48 325.61 cv
264.48 326.058 264.62 326.422 264.914 326.674 cv
265.208 326.94 265.614 327.066 266.118 327.066 cv
266.818 327.066 267.378 326.828 267.798 326.324 cv
268.218 325.834 268.428 325.176 268.428 324.35 cv
268.428 324.07 li
267.182 324.07 li
269.688 323.552 mo
269.688 327.92 li
268.428 327.92 li
268.428 326.758 li
268.134 327.234 267.77 327.57 267.35 327.78 cv
266.93 327.99 266.398 328.102 265.782 328.102 cv
264.998 328.102 264.368 327.892 263.906 327.458 cv
263.444 327.024 263.22 326.436 263.22 325.694 cv
263.22 324.84 263.5 324.196 264.088 323.748 cv
264.662 323.314 265.516 323.09 266.664 323.09 cv
268.428 323.09 li
268.428 322.964 li
268.428 322.39 268.232 321.942 267.854 321.62 cv
267.476 321.312 266.944 321.144 266.258 321.144 cv
265.81 321.144 265.39 321.2 264.97 321.312 cv
264.55 321.424 264.158 321.578 263.78 321.774 cv
263.78 320.612 li
264.228 320.444 264.676 320.304 265.11 320.22 cv
265.544 320.136 265.964 320.08 266.384 320.08 cv
267.49 320.08 268.316 320.374 268.862 320.948 cv
269.408 321.522 269.688 322.39 269.688 323.552 cv
ef
277.376 321.424 mo
277.376 317.28 li
278.636 317.28 li
278.636 327.92 li
277.376 327.92 li
277.376 326.772 li
277.11 327.234 276.774 327.57 276.368 327.78 cv
275.962 327.99 275.486 328.102 274.926 328.102 cv
274.002 328.102 273.246 327.738 272.658 327.01 cv
272.07 326.282 271.79 325.302 271.79 324.098 cv
271.79 322.894 272.07 321.928 272.658 321.186 cv
273.246 320.458 274.002 320.08 274.926 320.08 cv
275.486 320.08 275.962 320.192 276.368 320.416 cv
276.774 320.64 277.11 320.976 277.376 321.424 cv
273.092 324.098 mo
273.092 325.022 273.274 325.75 273.652 326.282 cv
274.03 326.814 274.562 327.066 275.234 327.066 cv
275.892 327.066 276.41 326.814 276.802 326.282 cv
277.18 325.75 277.376 325.022 277.376 324.098 cv
277.376 323.174 277.18 322.46 276.802 321.928 cv
276.41 321.396 275.892 321.13 275.234 321.13 cv
274.562 321.13 274.03 321.396 273.652 321.928 cv
273.274 322.46 273.092 323.174 273.092 324.098 cv
ef
286.102 320.486 mo
286.102 321.676 li
285.738 321.508 285.374 321.368 284.996 321.27 cv
284.604 321.186 284.212 321.13 283.806 321.13 cv
283.176 321.13 282.7 321.228 282.392 321.424 cv
282.084 321.62 281.93 321.9 281.93 322.278 cv
281.93 322.572 282.042 322.796 282.266 322.964 cv
282.49 323.132 282.938 323.3 283.61 323.44 cv
284.044 323.538 li
284.94 323.734 285.57 324.014 285.948 324.35 cv
286.312 324.7 286.508 325.19 286.508 325.806 cv
286.508 326.52 286.228 327.08 285.668 327.486 cv
285.108 327.906 284.324 328.102 283.344 328.102 cv
282.924 328.102 282.504 328.06 282.056 327.99 cv
281.608 327.92 281.146 327.808 280.656 327.64 cv
280.656 326.338 li
281.118 326.59 281.58 326.772 282.028 326.884 cv
282.476 327.01 282.924 327.066 283.372 327.066 cv
283.96 327.066 284.422 326.968 284.744 326.772 cv
285.052 326.576 285.22 326.282 285.22 325.904 cv
285.22 325.568 285.094 325.302 284.87 325.12 cv
284.646 324.938 284.142 324.756 283.358 324.588 cv
282.924 324.49 li
282.14 324.322 281.566 324.07 281.23 323.734 cv
280.88 323.398 280.712 322.936 280.712 322.334 cv
280.712 321.62 280.964 321.06 281.468 320.668 cv
281.972 320.276 282.7 320.08 283.652 320.08 cv
284.114 320.08 284.548 320.122 284.968 320.192 cv
285.374 320.262 285.752 320.36 286.102 320.486 cv
ef
54.307 292.773 mo
50.807 292.773 li
f
54.307 292.773 mo
50.807 292.773 li
@
29.472 288.744 mo
28.758 288.744 28.226 289.094 27.862 289.794 cv
27.498 290.494 27.33 291.544 27.33 292.944 cv
27.33 294.344 27.498 295.394 27.862 296.094 cv
28.226 296.794 28.758 297.144 29.472 297.144 cv
30.186 297.144 30.718 296.794 31.082 296.094 cv
31.432 295.394 31.614 294.344 31.614 292.944 cv
31.614 291.544 31.432 290.494 31.082 289.794 cv
30.718 289.094 30.186 288.744 29.472 288.744 cv
29.472 287.652 mo
30.606 287.652 31.474 288.114 32.09 289.01 cv
32.692 289.92 33 291.236 33 292.944 cv
33 294.666 32.692 295.982 32.09 296.878 cv
31.474 297.774 30.606 298.222 29.472 298.222 cv
28.324 298.222 27.442 297.774 26.84 296.878 cv
26.238 295.982 25.944 294.666 25.944 292.944 cv
25.944 291.236 26.238 289.92 26.84 289.01 cv
27.442 288.114 28.324 287.652 29.472 287.652 cv
ef
35.398 298.04 mo
36.84 298.04 li
36.84 296.304 li
35.398 296.304 li
cp
f
42.792 288.744 mo
42.078 288.744 41.546 289.094 41.182 289.794 cv
40.818 290.494 40.65 291.544 40.65 292.944 cv
40.65 294.344 40.818 295.394 41.182 296.094 cv
41.546 296.794 42.078 297.144 42.792 297.144 cv
43.506 297.144 44.038 296.794 44.402 296.094 cv
44.752 295.394 44.934 294.344 44.934 292.944 cv
44.934 291.544 44.752 290.494 44.402 289.794 cv
44.038 289.094 43.506 288.744 42.792 288.744 cv
42.792 287.652 mo
43.926 287.652 44.794 288.114 45.41 289.01 cv
46.012 289.92 46.32 291.236 46.32 292.944 cv
46.32 294.666 46.012 295.982 45.41 296.878 cv
44.794 297.774 43.926 298.222 42.792 298.222 cv
41.644 298.222 40.762 297.774 40.16 296.878 cv
39.558 295.982 39.264 294.666 39.264 292.944 cv
39.264 291.236 39.558 289.92 40.16 289.01 cv
40.762 288.114 41.644 287.652 42.792 287.652 cv
ef
54.307 238.366 mo
50.807 238.366 li
f
54.307 238.366 mo
50.807 238.366 li
@
29.472 234.384 mo
28.758 234.384 28.226 234.734 27.862 235.434 cv
27.498 236.134 27.33 237.184 27.33 238.584 cv
27.33 239.984 27.498 241.034 27.862 241.734 cv
28.226 242.434 28.758 242.784 29.472 242.784 cv
30.186 242.784 30.718 242.434 31.082 241.734 cv
31.432 241.034 31.614 239.984 31.614 238.584 cv
31.614 237.184 31.432 236.134 31.082 235.434 cv
30.718 234.734 30.186 234.384 29.472 234.384 cv
29.472 233.292 mo
30.606 233.292 31.474 233.754 32.09 234.65 cv
32.692 235.56 33 236.876 33 238.584 cv
33 240.306 32.692 241.622 32.09 242.518 cv
31.474 243.414 30.606 243.862 29.472 243.862 cv
28.324 243.862 27.442 243.414 26.84 242.518 cv
26.238 241.622 25.944 240.306 25.944 238.584 cv
25.944 236.876 26.238 235.56 26.84 234.65 cv
27.442 233.754 28.324 233.292 29.472 233.292 cv
ef
35.398 243.68 mo
36.84 243.68 li
36.84 241.944 li
35.398 241.944 li
cp
f
41.028 242.518 mo
45.844 242.518 li
45.844 243.68 li
39.362 243.68 li
39.362 242.518 li
39.88 241.986 40.594 241.258 41.504 240.334 cv
42.4 239.424 42.974 238.836 43.212 238.57 cv
43.66 238.08 43.968 237.66 44.136 237.31 cv
44.304 236.974 44.402 236.624 44.402 236.288 cv
44.402 235.756 44.206 235.308 43.828 234.972 cv
43.45 234.636 42.96 234.454 42.344 234.454 cv
41.91 234.454 41.448 234.538 40.972 234.678 cv
40.496 234.832 39.978 235.056 39.432 235.364 cv
39.432 233.964 li
39.992 233.74 40.51 233.572 40.986 233.46 cv
41.462 233.348 41.91 233.292 42.316 233.292 cv
43.366 233.292 44.206 233.558 44.836 234.09 cv
45.466 234.622 45.788 235.322 45.788 236.204 cv
45.788 236.624 45.704 237.03 45.55 237.394 cv
45.396 237.772 45.116 238.22 44.696 238.724 cv
44.584 238.864 44.22 239.242 43.604 239.872 cv
42.988 240.502 42.134 241.384 41.028 242.518 cv
ef
54.307 183.958 mo
50.807 183.958 li
f
54.307 183.958 mo
50.807 183.958 li
@
29.472 180.024 mo
28.758 180.024 28.226 180.374 27.862 181.074 cv
27.498 181.774 27.33 182.824 27.33 184.224 cv
27.33 185.624 27.498 186.674 27.862 187.374 cv
28.226 188.074 28.758 188.424 29.472 188.424 cv
30.186 188.424 30.718 188.074 31.082 187.374 cv
31.432 186.674 31.614 185.624 31.614 184.224 cv
31.614 182.824 31.432 181.774 31.082 181.074 cv
30.718 180.374 30.186 180.024 29.472 180.024 cv
29.472 178.932 mo
30.606 178.932 31.474 179.394 32.09 180.29 cv
32.692 181.2 33 182.516 33 184.224 cv
33 185.946 32.692 187.262 32.09 188.158 cv
31.474 189.054 30.606 189.502 29.472 189.502 cv
28.324 189.502 27.442 189.054 26.84 188.158 cv
26.238 187.262 25.944 185.946 25.944 184.224 cv
25.944 182.516 26.238 181.2 26.84 180.29 cv
27.442 179.394 28.324 178.932 29.472 178.932 cv
ef
35.398 189.32 mo
36.84 189.32 li
36.84 187.584 li
35.398 187.584 li
cp
f
43.632 180.318 mo
40.146 185.764 li
43.632 185.764 li
43.632 180.318 li
43.268 179.114 mo
45.004 179.114 li
45.004 185.764 li
46.46 185.764 li
46.46 186.912 li
45.004 186.912 li
45.004 189.32 li
43.632 189.32 li
43.632 186.912 li
39.026 186.912 li
39.026 185.582 li
43.268 179.114 li
ef
54.307 129.55 mo
50.807 129.55 li
f
54.307 129.55 mo
50.807 129.55 li
@
29.472 125.544 mo
28.758 125.544 28.226 125.894 27.862 126.594 cv
27.498 127.294 27.33 128.344 27.33 129.744 cv
27.33 131.144 27.498 132.194 27.862 132.894 cv
28.226 133.594 28.758 133.944 29.472 133.944 cv
30.186 133.944 30.718 133.594 31.082 132.894 cv
31.432 132.194 31.614 131.144 31.614 129.744 cv
31.614 128.344 31.432 127.294 31.082 126.594 cv
30.718 125.894 30.186 125.544 29.472 125.544 cv
29.472 124.452 mo
30.606 124.452 31.474 124.914 32.09 125.81 cv
32.692 126.72 33 128.036 33 129.744 cv
33 131.466 32.692 132.782 32.09 133.678 cv
31.474 134.574 30.606 135.022 29.472 135.022 cv
28.324 135.022 27.442 134.574 26.84 133.678 cv
26.238 132.782 25.944 131.466 25.944 129.744 cv
25.944 128.036 26.238 126.72 26.84 125.81 cv
27.442 124.914 28.324 124.452 29.472 124.452 cv
ef
35.398 134.84 mo
36.84 134.84 li
36.84 133.104 li
35.398 133.104 li
cp
f
42.96 129.184 mo
42.344 129.184 41.854 129.408 41.49 129.828 cv
41.126 130.248 40.944 130.836 40.944 131.564 cv
40.944 132.306 41.126 132.894 41.49 133.314 cv
41.854 133.734 42.344 133.944 42.96 133.944 cv
43.576 133.944 44.066 133.734 44.43 133.314 cv
44.794 132.894 44.976 132.306 44.976 131.564 cv
44.976 130.836 44.794 130.248 44.43 129.828 cv
44.066 129.408 43.576 129.184 42.96 129.184 cv
45.704 124.858 mo
45.704 126.118 li
45.354 125.95 45.004 125.824 44.654 125.74 cv
44.29 125.656 43.94 125.614 43.604 125.614 cv
42.68 125.614 41.98 125.922 41.504 126.538 cv
41.028 127.154 40.748 128.092 40.692 129.324 cv
40.958 128.932 41.294 128.624 41.7 128.414 cv
42.106 128.204 42.554 128.092 43.044 128.092 cv
44.066 128.092 44.878 128.414 45.466 129.03 cv
46.054 129.646 46.362 130.5 46.362 131.564 cv
46.362 132.614 46.04 133.454 45.424 134.084 cv
44.808 134.714 43.982 135.022 42.96 135.022 cv
41.784 135.022 40.874 134.574 40.258 133.678 cv
39.628 132.782 39.32 131.466 39.32 129.744 cv
39.32 128.134 39.698 126.846 40.468 125.894 cv
41.224 124.942 42.26 124.452 43.548 124.452 cv
43.884 124.452 44.234 124.494 44.598 124.55 cv
44.948 124.62 45.312 124.718 45.704 124.858 cv
ef
54.307 75.143 mo
50.807 75.143 li
f
54.307 75.143 mo
50.807 75.143 li
@
29.472 71.184 mo
28.758 71.184 28.226 71.534 27.862 72.234 cv
27.498 72.934 27.33 73.984 27.33 75.384 cv
27.33 76.784 27.498 77.834 27.862 78.534 cv
28.226 79.234 28.758 79.584 29.472 79.584 cv
30.186 79.584 30.718 79.234 31.082 78.534 cv
31.432 77.834 31.614 76.784 31.614 75.384 cv
31.614 73.984 31.432 72.934 31.082 72.234 cv
30.718 71.534 30.186 71.184 29.472 71.184 cv
29.472 70.092 mo
30.606 70.092 31.474 70.554 32.09 71.45 cv
32.692 72.36 33 73.676 33 75.384 cv
33 77.106 32.692 78.422 32.09 79.318 cv
31.474 80.214 30.606 80.662 29.472 80.662 cv
28.324 80.662 27.442 80.214 26.84 79.318 cv
26.238 78.422 25.944 77.106 25.944 75.384 cv
25.944 73.676 26.238 72.36 26.84 71.45 cv
27.442 70.554 28.324 70.092 29.472 70.092 cv
ef
35.398 80.48 mo
36.84 80.48 li
36.84 78.744 li
35.398 78.744 li
cp
f
42.792 75.636 mo
42.134 75.636 41.616 75.818 41.238 76.168 cv
40.86 76.518 40.678 76.994 40.678 77.61 cv
40.678 78.226 40.86 78.716 41.238 79.066 cv
41.616 79.416 42.134 79.584 42.792 79.584 cv
43.436 79.584 43.954 79.416 44.332 79.052 cv
44.71 78.702 44.906 78.226 44.906 77.61 cv
44.906 76.994 44.71 76.518 44.346 76.168 cv
43.968 75.818 43.45 75.636 42.792 75.636 cv
41.406 75.048 mo
40.818 74.908 40.356 74.628 40.02 74.222 cv
39.684 73.816 39.53 73.326 39.53 72.738 cv
39.53 71.926 39.81 71.282 40.398 70.806 cv
40.972 70.33 41.77 70.092 42.792 70.092 cv
43.8 70.092 44.598 70.33 45.186 70.806 cv
45.76 71.282 46.054 71.926 46.054 72.738 cv
46.054 73.326 45.886 73.816 45.55 74.222 cv
45.214 74.628 44.766 74.908 44.178 75.048 cv
44.836 75.202 45.354 75.51 45.732 75.958 cv
46.096 76.406 46.292 76.966 46.292 77.61 cv
46.292 78.604 45.984 79.36 45.382 79.878 cv
44.766 80.41 43.912 80.662 42.792 80.662 cv
41.658 80.662 40.79 80.41 40.188 79.878 cv
39.586 79.36 39.292 78.604 39.292 77.61 cv
39.292 76.966 39.474 76.406 39.852 75.958 cv
40.216 75.51 40.734 75.202 41.406 75.048 cv
40.902 72.864 mo
40.902 73.396 41.056 73.816 41.392 74.11 cv
41.728 74.404 42.19 74.544 42.792 74.544 cv
43.38 74.544 43.842 74.404 44.178 74.11 cv
44.514 73.816 44.682 73.396 44.682 72.864 cv
44.682 72.332 44.514 71.926 44.178 71.632 cv
43.842 71.338 43.38 71.184 42.792 71.184 cv
42.19 71.184 41.728 71.338 41.392 71.632 cv
41.056 71.926 40.902 72.332 40.902 72.864 cv
ef
54.307 20.735 mo
50.807 20.735 li
f
54.307 20.735 mo
50.807 20.735 li
@
26.756 24.838 mo
29.01 24.838 li
29.01 17.054 li
26.56 17.544 li
26.56 16.284 li
28.996 15.794 li
30.382 15.794 li
30.382 24.838 li
32.636 24.838 li
32.636 26 li
26.756 26 li
26.756 24.838 li
ef
35.398 26 mo
36.84 26 li
36.84 24.264 li
35.398 24.264 li
cp
f
42.792 16.704 mo
42.078 16.704 41.546 17.054 41.182 17.754 cv
40.818 18.454 40.65 19.504 40.65 20.904 cv
40.65 22.304 40.818 23.354 41.182 24.054 cv
41.546 24.754 42.078 25.104 42.792 25.104 cv
43.506 25.104 44.038 24.754 44.402 24.054 cv
44.752 23.354 44.934 22.304 44.934 20.904 cv
44.934 19.504 44.752 18.454 44.402 17.754 cv
44.038 17.054 43.506 16.704 42.792 16.704 cv
42.792 15.612 mo
43.926 15.612 44.794 16.074 45.41 16.97 cv
46.012 17.88 46.32 19.196 46.32 20.904 cv
46.32 22.626 46.012 23.942 45.41 24.838 cv
44.794 25.734 43.926 26.182 42.792 26.182 cv
41.644 26.182 40.762 25.734 40.16 24.838 cv
39.558 23.942 39.264 22.626 39.264 20.904 cv
39.264 19.196 39.558 17.88 40.16 16.97 cv
40.762 16.074 41.644 15.612 42.792 15.612 cv
ef
7.974 238.948 mo
7.974 237.086 li
16.514 232.564 li
7.974 232.564 li
7.974 231.22 li
18.18 231.22 li
18.18 233.082 li
9.64 237.604 li
18.18 237.604 li
18.18 238.948 li
7.974 238.948 li
ef
11.404 225.596 mo
11.404 226.268 11.67 226.8 12.202 227.192 cv
12.734 227.584 13.448 227.78 14.358 227.78 cv
15.282 227.78 15.996 227.598 16.528 227.206 cv
17.06 226.814 17.312 226.282 17.312 225.596 cv
17.312 224.924 17.06 224.392 16.528 224 cv
15.996 223.608 15.282 223.412 14.358 223.412 cv
13.462 223.412 12.734 223.608 12.202 224 cv
11.67 224.392 11.404 224.924 11.404 225.596 cv
10.34 225.596 mo
10.34 224.504 10.704 223.65 11.404 223.02 cv
12.118 222.404 13.098 222.082 14.358 222.082 cv
15.618 222.082 16.598 222.404 17.298 223.02 cv
18.012 223.65 18.362 224.504 18.362 225.596 cv
18.362 226.702 18.012 227.57 17.298 228.186 cv
16.598 228.802 15.618 229.11 14.358 229.11 cv
13.098 229.11 12.118 228.802 11.404 228.186 cv
10.704 227.57 10.34 226.702 10.34 225.596 cv
ef
11.698 215.486 mo
11.614 215.626 11.558 215.78 11.516 215.948 cv
11.488 216.116 11.46 216.298 11.46 216.494 cv
11.46 217.208 11.698 217.754 12.16 218.132 cv
12.622 218.524 13.28 218.706 14.148 218.706 cv
18.18 218.706 li
18.18 219.966 li
10.522 219.966 li
10.522 218.706 li
11.712 218.706 li
11.25 218.454 10.9 218.104 10.676 217.684 cv
10.452 217.264 10.34 216.746 10.34 216.13 cv
10.34 216.046 10.354 215.948 10.354 215.836 cv
10.368 215.738 10.382 215.626 10.41 215.486 cv
11.698 215.486 li
ef
11.992 208.2 mo
11.432 207.892 11.026 207.514 10.746 207.08 cv
10.48 206.646 10.34 206.128 10.34 205.526 cv
10.34 204.742 10.62 204.126 11.18 203.692 cv
11.74 203.258 12.538 203.034 13.56 203.034 cv
18.18 203.034 li
18.18 204.294 li
13.602 204.294 li
12.874 204.294 12.328 204.434 11.964 204.686 cv
11.614 204.952 11.432 205.344 11.432 205.876 cv
11.432 206.534 11.656 207.052 12.09 207.43 cv
12.524 207.808 13.112 207.99 13.854 207.99 cv
18.18 207.99 li
18.18 209.25 li
13.602 209.25 li
12.874 209.25 12.328 209.39 11.964 209.642 cv
11.614 209.908 11.432 210.314 11.432 210.846 cv
11.432 211.49 11.656 212.008 12.09 212.386 cv
12.524 212.764 13.112 212.946 13.854 212.946 cv
18.18 212.946 li
18.18 214.206 li
10.522 214.206 li
10.522 212.946 li
11.712 212.946 li
11.25 212.666 10.9 212.316 10.676 211.91 cv
10.452 211.518 10.34 211.042 10.34 210.482 cv
10.34 209.922 10.48 209.46 10.76 209.068 cv
11.04 208.676 11.46 208.396 11.992 208.2 cv
ef
14.33 197.118 mo
14.33 198.14 14.456 198.84 14.68 199.232 cv
14.918 199.624 15.31 199.82 15.87 199.82 cv
16.318 199.82 16.682 199.68 16.934 199.386 cv
17.2 199.092 17.326 198.686 17.326 198.182 cv
17.326 197.482 17.088 196.922 16.584 196.502 cv
16.094 196.082 15.436 195.872 14.61 195.872 cv
14.33 195.872 li
14.33 197.118 li
13.812 194.612 mo
18.18 194.612 li
18.18 195.872 li
17.018 195.872 li
17.494 196.166 17.83 196.53 18.04 196.95 cv
18.25 197.37 18.362 197.902 18.362 198.518 cv
18.362 199.302 18.152 199.932 17.718 200.394 cv
17.284 200.856 16.696 201.08 15.954 201.08 cv
15.1 201.08 14.456 200.8 14.008 200.212 cv
13.574 199.638 13.35 198.784 13.35 197.636 cv
13.35 195.872 li
13.224 195.872 li
12.65 195.872 12.202 196.068 11.88 196.446 cv
11.572 196.824 11.404 197.356 11.404 198.042 cv
11.404 198.49 11.46 198.91 11.572 199.33 cv
11.684 199.75 11.838 200.142 12.034 200.52 cv
10.872 200.52 li
10.704 200.072 10.564 199.624 10.48 199.19 cv
10.396 198.756 10.34 198.336 10.34 197.916 cv
10.34 196.81 10.634 195.984 11.208 195.438 cv
11.782 194.892 12.65 194.612 13.812 194.612 cv
ef
7.54 191.964 mo
18.18 191.964 li
18.18 190.704 li
7.54 190.704 li
cp
f
10.522 188.124 mo
10.522 186.864 li
18.18 186.864 li
18.18 188.124 li
10.522 188.124 li
7.54 188.124 mo
9.136 188.124 mo
7.54 188.124 li
7.54 186.864 li
9.136 186.864 li
cp
ef
10.522 184.71 mo
10.522 178.732 li
11.67 178.732 li
17.172 183.464 li
17.172 178.732 li
18.18 178.732 li
18.18 184.878 li
17.032 184.878 li
11.53 180.146 li
11.53 184.71 li
10.522 184.71 li
ef
14.036 170.292 mo
14.652 170.292 li
14.652 176.074 li
15.52 176.018 16.192 175.766 16.64 175.29 cv
17.088 174.828 17.312 174.184 17.312 173.344 cv
17.312 172.868 17.256 172.392 17.144 171.944 cv
17.032 171.496 16.85 171.034 16.598 170.586 cv
17.788 170.586 li
17.984 171.034 18.138 171.496 18.222 171.972 cv
18.306 172.448 18.362 172.938 18.362 173.414 cv
18.362 174.646 18.012 175.612 17.312 176.326 cv
16.612 177.04 15.646 177.39 14.428 177.39 cv
13.182 177.39 12.188 177.054 11.446 176.382 cv
10.718 175.71 10.34 174.786 10.34 173.638 cv
10.34 172.602 10.676 171.79 11.334 171.188 cv
12.006 170.6 12.902 170.292 14.036 170.292 cv
13.672 171.552 mo
12.986 171.566 12.44 171.762 12.02 172.126 cv
11.614 172.504 11.404 173.008 11.404 173.624 cv
11.404 174.324 11.614 174.884 12.006 175.304 cv
12.398 175.724 12.958 175.976 13.672 176.032 cv
13.672 171.552 li
ef
11.684 163.164 mo
7.54 163.164 li
7.54 161.904 li
18.18 161.904 li
18.18 163.164 li
17.032 163.164 li
17.494 163.43 17.83 163.766 18.04 164.172 cv
18.25 164.578 18.362 165.054 18.362 165.614 cv
18.362 166.538 17.998 167.294 17.27 167.882 cv
16.542 168.47 15.562 168.75 14.358 168.75 cv
13.154 168.75 12.188 168.47 11.446 167.882 cv
10.718 167.294 10.34 166.538 10.34 165.614 cv
10.34 165.054 10.452 164.578 10.676 164.172 cv
10.9 163.766 11.236 163.43 11.684 163.164 cv
14.358 167.448 mo
15.282 167.448 16.01 167.266 16.542 166.888 cv
17.074 166.51 17.326 165.978 17.326 165.306 cv
17.326 164.648 17.074 164.13 16.542 163.738 cv
16.01 163.36 15.282 163.164 14.358 163.164 cv
13.434 163.164 12.72 163.36 12.188 163.738 cv
11.656 164.13 11.39 164.648 11.39 165.306 cv
11.39 165.978 11.656 166.51 12.188 166.888 cv
12.72 167.266 13.434 167.448 14.358 167.448 cv
ef
13.392 149.984 mo
13.504 149.69 13.714 149.396 14.036 149.116 cv
14.372 148.836 14.82 148.556 15.394 148.276 cv
18.18 146.876 li
18.18 148.36 li
15.562 149.662 li
14.89 149.998 14.428 150.334 14.204 150.642 cv
13.98 150.964 13.868 151.398 13.868 151.944 cv
13.868 153.442 li
18.18 153.442 li
18.18 154.828 li
7.974 154.828 li
7.974 151.706 li
7.974 150.544 8.226 149.676 8.702 149.102 cv
9.192 148.528 9.934 148.234 10.914 148.234 cv
11.558 148.234 12.104 148.388 12.524 148.682 cv
12.944 148.99 13.238 149.424 13.392 149.984 cv
9.108 153.442 mo
12.734 153.442 li
12.734 151.706 li
12.734 151.048 12.58 150.544 12.272 150.208 cv
11.964 149.872 11.516 149.69 10.914 149.69 cv
10.326 149.69 9.878 149.872 9.57 150.208 cv
9.262 150.544 9.108 151.048 9.108 151.706 cv
9.108 153.442 li
ef
14.036 138.612 mo
14.652 138.612 li
14.652 144.394 li
15.52 144.338 16.192 144.086 16.64 143.61 cv
17.088 143.148 17.312 142.504 17.312 141.664 cv
17.312 141.188 17.256 140.712 17.144 140.264 cv
17.032 139.816 16.85 139.354 16.598 138.906 cv
17.788 138.906 li
17.984 139.354 18.138 139.816 18.222 140.292 cv
18.306 140.768 18.362 141.258 18.362 141.734 cv
18.362 142.966 18.012 143.932 17.312 144.646 cv
16.612 145.36 15.646 145.71 14.428 145.71 cv
13.182 145.71 12.188 145.374 11.446 144.702 cv
10.718 144.03 10.34 143.106 10.34 141.958 cv
10.34 140.922 10.676 140.11 11.334 139.508 cv
12.006 138.92 12.902 138.612 14.036 138.612 cv
13.672 139.872 mo
12.986 139.886 12.44 140.082 12.02 140.446 cv
11.614 140.824 11.404 141.328 11.404 141.944 cv
11.404 142.644 11.614 143.204 12.006 143.624 cv
12.398 144.044 12.958 144.296 13.672 144.352 cv
13.672 139.872 li
ef
14.33 133.038 mo
14.33 134.06 14.456 134.76 14.68 135.152 cv
14.918 135.544 15.31 135.74 15.87 135.74 cv
16.318 135.74 16.682 135.6 16.934 135.306 cv
17.2 135.012 17.326 134.606 17.326 134.102 cv
17.326 133.402 17.088 132.842 16.584 132.422 cv
16.094 132.002 15.436 131.792 14.61 131.792 cv
14.33 131.792 li
14.33 133.038 li
13.812 130.532 mo
18.18 130.532 li
18.18 131.792 li
17.018 131.792 li
17.494 132.086 17.83 132.45 18.04 132.87 cv
18.25 133.29 18.362 133.822 18.362 134.438 cv
18.362 135.222 18.152 135.852 17.718 136.314 cv
17.284 136.776 16.696 137 15.954 137 cv
15.1 137 14.456 136.72 14.008 136.132 cv
13.574 135.558 13.35 134.704 13.35 133.556 cv
13.35 131.792 li
13.224 131.792 li
12.65 131.792 12.202 131.988 11.88 132.366 cv
11.572 132.744 11.404 133.276 11.404 133.962 cv
11.404 134.41 11.46 134.83 11.572 135.25 cv
11.684 135.67 11.838 136.062 12.034 136.44 cv
10.872 136.44 li
10.704 135.992 10.564 135.544 10.48 135.11 cv
10.396 134.676 10.34 134.256 10.34 133.836 cv
10.34 132.73 10.634 131.904 11.208 131.358 cv
11.782 130.812 12.65 130.532 13.812 130.532 cv
ef
11.684 122.964 mo
7.54 122.964 li
7.54 121.704 li
18.18 121.704 li
18.18 122.964 li
17.032 122.964 li
17.494 123.23 17.83 123.566 18.04 123.972 cv
18.25 124.378 18.362 124.854 18.362 125.414 cv
18.362 126.338 17.998 127.094 17.27 127.682 cv
16.542 128.27 15.562 128.55 14.358 128.55 cv
13.154 128.55 12.188 128.27 11.446 127.682 cv
10.718 127.094 10.34 126.338 10.34 125.414 cv
10.34 124.854 10.452 124.378 10.676 123.972 cv
10.9 123.566 11.236 123.23 11.684 122.964 cv
14.358 127.248 mo
15.282 127.248 16.01 127.066 16.542 126.688 cv
17.074 126.31 17.326 125.778 17.326 125.106 cv
17.326 124.448 17.074 123.93 16.542 123.538 cv
16.01 123.16 15.282 122.964 14.358 122.964 cv
13.434 122.964 12.72 123.16 12.188 123.538 cv
11.656 123.93 11.39 124.448 11.39 125.106 cv
11.39 125.778 11.656 126.31 12.188 126.688 cv
12.72 127.066 13.434 127.248 14.358 127.248 cv
ef
10.522 119.124 mo
10.522 117.864 li
18.18 117.864 li
18.18 119.124 li
10.522 119.124 li
7.54 119.124 mo
9.136 119.124 mo
7.54 119.124 li
7.54 117.864 li
9.136 117.864 li
cp
ef
13.56 108.794 mo
18.18 108.794 li
18.18 110.054 li
13.602 110.054 li
12.874 110.054 12.342 110.208 11.978 110.488 cv
11.614 110.768 11.432 111.188 11.432 111.748 cv
11.432 112.434 11.656 112.966 12.09 113.358 cv
12.524 113.75 13.112 113.946 13.854 113.946 cv
18.18 113.946 li
18.18 115.206 li
10.522 115.206 li
10.522 113.946 li
11.712 113.946 li
11.264 113.652 10.914 113.302 10.69 112.882 cv
10.466 112.476 10.34 112 10.34 111.468 cv
10.34 110.6 10.62 109.928 11.166 109.48 cv
11.712 109.032 12.51 108.794 13.56 108.794 cv
ef
14.26 101.244 mo
13.364 101.244 12.65 101.44 12.146 101.804 cv
11.642 102.182 11.39 102.714 11.39 103.386 cv
11.39 104.058 11.642 104.59 12.146 104.968 cv
12.65 105.346 13.364 105.528 14.26 105.528 cv
15.17 105.528 15.87 105.346 16.374 104.968 cv
16.878 104.59 17.13 104.058 17.13 103.386 cv
17.13 102.714 16.878 102.182 16.374 101.804 cv
15.87 101.44 15.17 101.244 14.26 101.244 cv
17.228 99.984 mo
18.516 99.984 19.482 100.278 20.126 100.852 cv
20.756 101.44 21.078 102.322 21.078 103.512 cv
21.078 103.96 21.036 104.366 20.98 104.758 cv
20.91 105.15 20.812 105.542 20.672 105.906 cv
19.454 105.906 li
19.65 105.542 19.79 105.178 19.888 104.814 cv
19.986 104.45 20.042 104.086 20.042 103.708 cv
20.042 102.896 19.818 102.28 19.398 101.86 cv
18.964 101.454 18.32 101.244 17.452 101.244 cv
16.836 101.244 li
17.284 101.51 17.62 101.846 17.844 102.252 cv
18.068 102.658 18.18 103.134 18.18 103.694 cv
18.18 104.646 17.83 105.402 17.116 105.976 cv
16.402 106.55 15.45 106.83 14.26 106.83 cv
13.084 106.83 12.132 106.55 11.418 105.976 cv
10.704 105.402 10.34 104.646 10.34 103.694 cv
10.34 103.134 10.452 102.658 10.676 102.252 cv
10.9 101.846 11.236 101.51 11.684 101.244 cv
10.522 101.244 li
10.522 99.984 li
17.228 99.984 li
ef
7.974 94.308 mo
7.974 85.684 li
9.136 85.684 li
9.136 89.31 li
18.18 89.31 li
18.18 90.696 li
9.136 90.696 li
9.136 94.308 li
7.974 94.308 li
ef
10.522 84.444 mo
10.522 83.184 li
18.18 83.184 li
18.18 84.444 li
10.522 84.444 li
7.54 84.444 mo
9.136 84.444 mo
7.54 84.444 li
7.54 83.184 li
9.136 83.184 li
cp
ef
11.992 74.64 mo
11.432 74.332 11.026 73.954 10.746 73.52 cv
10.48 73.086 10.34 72.568 10.34 71.966 cv
10.34 71.182 10.62 70.566 11.18 70.132 cv
11.74 69.698 12.538 69.474 13.56 69.474 cv
18.18 69.474 li
18.18 70.734 li
13.602 70.734 li
12.874 70.734 12.328 70.874 11.964 71.126 cv
11.614 71.392 11.432 71.784 11.432 72.316 cv
11.432 72.974 11.656 73.492 12.09 73.87 cv
12.524 74.248 13.112 74.43 13.854 74.43 cv
18.18 74.43 li
18.18 75.69 li
13.602 75.69 li
12.874 75.69 12.328 75.83 11.964 76.082 cv
11.614 76.348 11.432 76.754 11.432 77.286 cv
11.432 77.93 11.656 78.448 12.09 78.826 cv
12.524 79.204 13.112 79.386 13.854 79.386 cv
18.18 79.386 li
18.18 80.646 li
10.522 80.646 li
10.522 79.386 li
11.712 79.386 li
11.25 79.106 10.9 78.756 10.676 78.35 cv
10.452 77.958 10.34 77.482 10.34 76.922 cv
10.34 76.362 10.48 75.9 10.76 75.508 cv
11.04 75.116 11.46 74.836 11.992 74.64 cv
ef
14.036 60.372 mo
14.652 60.372 li
14.652 66.154 li
15.52 66.098 16.192 65.846 16.64 65.37 cv
17.088 64.908 17.312 64.264 17.312 63.424 cv
17.312 62.948 17.256 62.472 17.144 62.024 cv
17.032 61.576 16.85 61.114 16.598 60.666 cv
17.788 60.666 li
17.984 61.114 18.138 61.576 18.222 62.052 cv
18.306 62.528 18.362 63.018 18.362 63.494 cv
18.362 64.726 18.012 65.692 17.312 66.406 cv
16.612 67.12 15.646 67.47 14.428 67.47 cv
13.182 67.47 12.188 67.134 11.446 66.462 cv
10.718 65.79 10.34 64.866 10.34 63.718 cv
10.34 62.682 10.676 61.87 11.334 61.268 cv
12.006 60.68 12.902 60.372 14.036 60.372 cv
13.672 61.632 mo
12.986 61.646 12.44 61.842 12.02 62.206 cv
11.614 62.584 11.404 63.088 11.404 63.704 cv
11.404 64.404 11.614 64.964 12.006 65.384 cv
12.398 65.804 12.958 66.056 13.672 66.112 cv
13.672 61.632 li
ef
2 lc
0 lj
54.307 292.773 mo
54.307 7.133 li
@
446.507 292.773 mo
446.507 7.133 li
@
54.307 292.773 mo
446.507 292.773 li
@
54.307 7.133 mo
446.507 7.133 li
@
61.307 59.149 mo
170.682 59.149 li
172.015 59.149 172.682 58.482 172.682 57.149 cv
172.682 14.133 li
172.682 12.8 172.015 12.133 170.682 12.133 cv
61.307 12.133 li
59.974 12.133 59.307 12.8 59.307 14.133 cv
59.307 57.149 li
59.307 58.482 59.974 59.149 61.307 59.149 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
61.307 59.149 mo
170.682 59.149 li
172.015 59.149 172.682 58.482 172.682 57.149 cv
172.682 14.133 li
172.682 12.8 172.015 12.133 170.682 12.133 cv
61.307 12.133 li
59.974 12.133 59.307 12.8 59.307 14.133 cv
59.307 57.149 li
59.307 58.482 59.974 59.149 61.307 59.149 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
63.307 23.727 mo
83.307 23.727 li
83.307 16.727 li
63.307 16.727 li
cp
.175418 .676722 .898802 0 cmyk
f
63.307 23.727 mo
83.307 23.727 li
83.307 16.727 li
63.307 16.727 li
cp
gsave
grestore
/283952684.0 
<<
/ID /283952684.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/283952684.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
92.24 16.43 mo
93.23 16.43 li
93.23 19.42 li
96.81 19.42 li
96.81 16.43 li
97.8 16.43 li
97.8 23.72 li
96.81 23.72 li
96.81 20.25 li
93.23 20.25 li
93.23 23.72 li
92.24 23.72 li
92.24 16.43 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
102.25 20.97 mo
101.52 20.97 101.02 21.06 100.74 21.22 cv
100.46 21.39 100.32 21.67 100.32 22.07 cv
100.32 22.39 100.42 22.65 100.63 22.83 cv
100.84 23.02 101.13 23.11 101.49 23.11 cv
101.99 23.11 102.39 22.94 102.69 22.58 cv
102.99 22.23 103.14 21.76 103.14 21.17 cv
103.14 20.97 li
102.25 20.97 li
104.04 20.6 mo
104.04 23.72 li
103.14 23.72 li
103.14 22.89 li
102.93 23.23 102.67 23.47 102.37 23.62 cv
102.07 23.77 101.69 23.85 101.25 23.85 cv
100.69 23.85 100.24 23.7 99.91 23.39 cv
99.58 23.08 99.42 22.66 99.42 22.13 cv
99.42 21.52 99.62 21.06 100.04 20.74 cv
100.45 20.43 101.06 20.27 101.88 20.27 cv
103.14 20.27 li
103.14 20.18 li
103.14 19.77 103 19.45 102.73 19.22 cv
102.46 19 102.08 18.88 101.59 18.88 cv
101.27 18.88 100.97 18.92 100.67 19 cv
100.37 19.08 100.09 19.19 99.82 19.33 cv
99.82 18.5 li
100.14 18.38 100.46 18.28 100.77 18.22 cv
101.08 18.16 101.38 18.12 101.68 18.12 cv
102.47 18.12 103.06 18.33 103.45 18.74 cv
103.84 19.15 104.04 19.77 104.04 20.6 cv
ef
109.48 19.08 mo
109.48 16.12 li
110.38 16.12 li
110.38 23.72 li
109.48 23.72 li
109.48 22.9 li
109.29 23.23 109.05 23.47 108.76 23.62 cv
108.47 23.77 108.13 23.85 107.73 23.85 cv
107.07 23.85 106.53 23.59 106.11 23.07 cv
105.69 22.55 105.49 21.85 105.49 20.99 cv
105.49 20.13 105.69 19.44 106.11 18.91 cv
106.53 18.39 107.07 18.12 107.73 18.12 cv
108.13 18.12 108.47 18.2 108.76 18.36 cv
109.05 18.52 109.29 18.76 109.48 19.08 cv
106.42 20.99 mo
106.42 21.65 106.55 22.17 106.82 22.55 cv
107.09 22.93 107.47 23.11 107.95 23.11 cv
108.42 23.11 108.79 22.93 109.07 22.55 cv
109.34 22.17 109.48 21.65 109.48 20.99 cv
109.48 20.33 109.34 19.82 109.07 19.44 cv
108.79 19.06 108.42 18.87 107.95 18.87 cv
107.47 18.87 107.09 19.06 106.82 19.44 cv
106.55 19.82 106.42 20.33 106.42 20.99 cv
ef
114.36 18.88 mo
113.88 18.88 113.5 19.07 113.22 19.45 cv
112.94 19.83 112.8 20.34 112.8 20.99 cv
112.8 21.65 112.93 22.16 113.21 22.54 cv
113.49 22.92 113.87 23.1 114.36 23.1 cv
114.84 23.1 115.22 22.92 115.5 22.54 cv
115.78 22.16 115.92 21.65 115.92 20.99 cv
115.92 20.35 115.78 19.83 115.5 19.45 cv
115.22 19.07 114.84 18.88 114.36 18.88 cv
114.36 18.12 mo
115.14 18.12 115.75 18.38 116.2 18.88 cv
116.64 19.39 116.87 20.09 116.87 20.99 cv
116.87 21.89 116.64 22.59 116.2 23.09 cv
115.75 23.6 115.14 23.85 114.36 23.85 cv
113.57 23.85 112.95 23.6 112.51 23.09 cv
112.07 22.59 111.85 21.89 111.85 20.99 cv
111.85 20.09 112.07 19.39 112.51 18.88 cv
112.95 18.38 113.57 18.12 114.36 18.12 cv
ef
120.48 18.88 mo
120 18.88 119.62 19.07 119.34 19.45 cv
119.06 19.83 118.92 20.34 118.92 20.99 cv
118.92 21.65 119.05 22.16 119.33 22.54 cv
119.61 22.92 119.99 23.1 120.48 23.1 cv
120.96 23.1 121.34 22.92 121.62 22.54 cv
121.9 22.16 122.04 21.65 122.04 20.99 cv
122.04 20.35 121.9 19.83 121.62 19.45 cv
121.34 19.07 120.96 18.88 120.48 18.88 cv
120.48 18.12 mo
121.26 18.12 121.87 18.38 122.32 18.88 cv
122.76 19.39 122.99 20.09 122.99 20.99 cv
122.99 21.89 122.76 22.59 122.32 23.09 cv
121.87 23.6 121.26 23.85 120.48 23.85 cv
119.69 23.85 119.07 23.6 118.63 23.09 cv
118.19 22.59 117.97 21.89 117.97 20.99 cv
117.97 20.09 118.19 19.39 118.63 18.88 cv
119.07 18.38 119.69 18.12 120.48 18.12 cv
ef
125.35 22.9 mo
125.35 25.79 li
124.45 25.79 li
124.45 18.25 li
125.35 18.25 li
125.35 19.08 li
125.53 18.76 125.77 18.52 126.06 18.36 cv
126.35 18.2 126.7 18.12 127.1 18.12 cv
127.76 18.12 128.3 18.39 128.72 18.91 cv
129.13 19.44 129.34 20.13 129.34 20.99 cv
129.34 21.85 129.13 22.55 128.72 23.07 cv
128.3 23.59 127.76 23.85 127.1 23.85 cv
126.7 23.85 126.35 23.77 126.06 23.62 cv
125.77 23.47 125.53 23.23 125.35 22.9 cv
128.41 20.99 mo
128.41 20.33 128.27 19.82 128 19.44 cv
127.72 19.06 127.35 18.87 126.88 18.87 cv
126.4 18.87 126.03 19.06 125.76 19.44 cv
125.48 19.82 125.35 20.33 125.35 20.99 cv
125.35 21.65 125.48 22.17 125.76 22.55 cv
126.03 22.93 126.4 23.11 126.88 23.11 cv
127.35 23.11 127.72 22.93 128 22.55 cv
128.27 22.17 128.41 21.65 128.41 20.99 cv
ef
130.39 21.38 mo
133.02 21.38 li
133.02 20.58 li
130.39 20.58 li
cp
f
138.04 19.08 mo
138.04 16.12 li
138.94 16.12 li
138.94 23.72 li
138.04 23.72 li
138.04 22.9 li
137.85 23.23 137.61 23.47 137.32 23.62 cv
137.03 23.77 136.69 23.85 136.29 23.85 cv
135.63 23.85 135.09 23.59 134.67 23.07 cv
134.25 22.55 134.05 21.85 134.05 20.99 cv
134.05 20.13 134.25 19.44 134.67 18.91 cv
135.09 18.39 135.63 18.12 136.29 18.12 cv
136.69 18.12 137.03 18.2 137.32 18.36 cv
137.61 18.52 137.85 18.76 138.04 19.08 cv
134.98 20.99 mo
134.98 21.65 135.11 22.17 135.38 22.55 cv
135.65 22.93 136.03 23.11 136.51 23.11 cv
136.98 23.11 137.35 22.93 137.63 22.55 cv
137.9 22.17 138.04 21.65 138.04 20.99 cv
138.04 20.33 137.9 19.82 137.63 19.44 cv
137.35 19.06 136.98 18.87 136.51 18.87 cv
136.03 18.87 135.65 19.06 135.38 19.44 cv
135.11 19.82 134.98 20.33 134.98 20.99 cv
ef
145.48 20.76 mo
145.48 21.2 li
141.35 21.2 li
141.39 21.82 141.57 22.3 141.91 22.62 cv
142.24 22.94 142.7 23.1 143.3 23.1 cv
143.64 23.1 143.98 23.06 144.3 22.98 cv
144.62 22.9 144.95 22.77 145.27 22.59 cv
145.27 23.44 li
144.95 23.58 144.62 23.69 144.28 23.75 cv
143.94 23.81 143.59 23.85 143.25 23.85 cv
142.37 23.85 141.68 23.6 141.17 23.1 cv
140.66 22.6 140.41 21.91 140.41 21.04 cv
140.41 20.15 140.65 19.44 141.13 18.91 cv
141.61 18.39 142.27 18.12 143.09 18.12 cv
143.83 18.12 144.41 18.36 144.84 18.83 cv
145.26 19.31 145.48 19.95 145.48 20.76 cv
144.58 20.5 mo
144.57 20.01 144.43 19.62 144.17 19.32 cv
143.9 19.03 143.54 18.88 143.1 18.88 cv
142.6 18.88 142.2 19.03 141.9 19.31 cv
141.6 19.59 141.42 19.99 141.38 20.5 cv
144.58 20.5 li
ef
149.69 16.12 mo
149.69 16.87 li
148.83 16.87 li
148.51 16.87 148.28 16.94 148.16 17.07 cv
148.03 17.2 147.97 17.43 147.97 17.77 cv
147.97 18.25 li
149.45 18.25 li
149.45 18.95 li
147.97 18.95 li
147.97 23.72 li
147.07 23.72 li
147.07 18.95 li
146.21 18.95 li
146.21 18.25 li
147.07 18.25 li
147.07 17.87 li
147.07 17.27 147.21 16.82 147.49 16.54 cv
147.77 16.26 148.22 16.12 148.84 16.12 cv
149.69 16.12 li
ef
152.89 20.97 mo
152.16 20.97 151.66 21.06 151.38 21.22 cv
151.1 21.39 150.96 21.67 150.96 22.07 cv
150.96 22.39 151.06 22.65 151.27 22.83 cv
151.48 23.02 151.77 23.11 152.13 23.11 cv
152.63 23.11 153.03 22.94 153.33 22.58 cv
153.63 22.23 153.78 21.76 153.78 21.17 cv
153.78 20.97 li
152.89 20.97 li
154.68 20.6 mo
154.68 23.72 li
153.78 23.72 li
153.78 22.89 li
153.57 23.23 153.31 23.47 153.01 23.62 cv
152.71 23.77 152.33 23.85 151.89 23.85 cv
151.33 23.85 150.88 23.7 150.55 23.39 cv
150.22 23.08 150.06 22.66 150.06 22.13 cv
150.06 21.52 150.26 21.06 150.68 20.74 cv
151.09 20.43 151.7 20.27 152.52 20.27 cv
153.78 20.27 li
153.78 20.18 li
153.78 19.77 153.64 19.45 153.37 19.22 cv
153.1 19 152.72 18.88 152.23 18.88 cv
151.91 18.88 151.61 18.92 151.31 19 cv
151.01 19.08 150.73 19.19 150.46 19.33 cv
150.46 18.5 li
150.78 18.38 151.1 18.28 151.41 18.22 cv
151.72 18.16 152.02 18.12 152.32 18.12 cv
153.11 18.12 153.7 18.33 154.09 18.74 cv
154.48 19.15 154.68 19.77 154.68 20.6 cv
ef
156.55 21.56 mo
156.55 18.25 li
157.45 18.25 li
157.45 21.53 li
157.45 22.05 157.55 22.43 157.75 22.69 cv
157.95 22.95 158.25 23.08 158.66 23.08 cv
159.14 23.08 159.53 22.93 159.81 22.62 cv
160.09 22.31 160.23 21.89 160.23 21.35 cv
160.23 18.25 li
161.13 18.25 li
161.13 23.72 li
160.23 23.72 li
160.23 22.88 li
160.01 23.22 159.75 23.46 159.47 23.62 cv
159.18 23.77 158.85 23.85 158.47 23.85 cv
157.84 23.85 157.36 23.66 157.04 23.27 cv
156.71 22.89 156.55 22.32 156.55 21.56 cv
158.81 18.12 mo
158.81 18.12 li
ef
162.88 23.72 mo
163.78 23.72 li
163.78 16.12 li
162.88 16.12 li
cp
f
166.53 16.7 mo
166.53 18.25 li
168.38 18.25 li
168.38 18.95 li
166.53 18.95 li
166.53 21.92 li
166.53 22.37 166.59 22.66 166.71 22.78 cv
166.83 22.91 167.08 22.97 167.46 22.97 cv
168.38 22.97 li
168.38 23.72 li
167.46 23.72 li
166.76 23.72 166.28 23.59 166.02 23.33 cv
165.76 23.07 165.63 22.6 165.63 21.92 cv
165.63 18.95 li
164.97 18.95 li
164.97 18.25 li
165.63 18.25 li
165.63 16.7 li
166.53 16.7 li
ef
63.307 38.399 mo
83.307 38.399 li
83.307 31.399 li
63.307 31.399 li
cp
0 .644831 .344976 0 cmyk
f
63.307 38.399 mo
83.307 38.399 li
83.307 31.399 li
63.307 31.399 li
cp
gsave
grestore
/283952880.0 
<<
/ID /283952880.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/283952880.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
91.59 31.07 mo
92.59 31.07 li
94.12 37.23 li
95.65 31.07 li
96.76 31.07 li
98.29 37.23 li
99.82 31.07 li
100.82 31.07 li
98.99 38.36 li
97.75 38.36 li
96.21 32.03 li
94.66 38.36 li
93.42 38.36 li
91.59 31.07 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
104.64 32.04 mo
103.3 35.67 li
105.98 35.67 li
104.64 32.04 li
104.08 31.07 mo
105.2 31.07 li
107.98 38.36 li
106.95 38.36 li
106.29 36.49 li
103 36.49 li
102.34 38.36 li
101.3 38.36 li
104.08 31.07 li
ef
113.41 31.31 mo
113.41 32.27 li
113.03 32.09 112.68 31.96 112.35 31.87 cv
112.01 31.79 111.69 31.74 111.39 31.74 cv
110.85 31.74 110.43 31.85 110.14 32.05 cv
109.85 32.26 109.71 32.56 109.71 32.94 cv
109.71 33.26 109.8 33.51 110 33.67 cv
110.19 33.84 110.56 33.97 111.1 34.07 cv
111.7 34.19 li
112.43 34.33 112.97 34.58 113.32 34.93 cv
113.67 35.29 113.85 35.76 113.85 36.35 cv
113.85 37.06 113.61 37.59 113.14 37.95 cv
112.66 38.31 111.97 38.49 111.06 38.49 cv
110.71 38.49 110.34 38.45 109.95 38.38 cv
109.56 38.31 109.16 38.2 108.75 38.04 cv
108.75 37.02 li
109.15 37.25 109.54 37.42 109.92 37.53 cv
110.3 37.65 110.68 37.7 111.06 37.7 cv
111.62 37.7 112.05 37.59 112.36 37.37 cv
112.66 37.15 112.82 36.84 112.82 36.42 cv
112.82 36.06 112.71 35.78 112.49 35.58 cv
112.27 35.38 111.91 35.23 111.41 35.13 cv
110.81 35.01 li
110.07 34.87 109.54 34.64 109.21 34.32 cv
108.88 34.01 108.72 33.58 108.72 33.02 cv
108.72 32.38 108.94 31.87 109.4 31.5 cv
109.85 31.13 110.48 30.94 111.28 30.94 cv
111.62 30.94 111.96 30.97 112.32 31.03 cv
112.67 31.09 113.03 31.19 113.41 31.31 cv
ef
115.4 31.07 mo
116.39 31.07 li
116.39 34.06 li
119.97 34.06 li
119.97 31.07 li
120.96 31.07 li
120.96 38.36 li
119.97 38.36 li
119.97 34.89 li
116.39 34.89 li
116.39 38.36 li
115.4 38.36 li
115.4 31.07 li
ef
122.35 36.02 mo
124.98 36.02 li
124.98 35.22 li
122.35 35.22 li
cp
f
130 35.56 mo
130 34.92 129.86 34.41 129.6 34.05 cv
129.33 33.69 128.95 33.51 128.47 33.51 cv
127.99 33.51 127.61 33.69 127.34 34.05 cv
127.07 34.41 126.94 34.92 126.94 35.56 cv
126.94 36.21 127.07 36.71 127.34 37.07 cv
127.61 37.43 127.99 37.61 128.47 37.61 cv
128.95 37.61 129.33 37.43 129.6 37.07 cv
129.86 36.71 130 36.21 130 35.56 cv
130.9 37.68 mo
130.9 38.6 130.69 39.29 130.28 39.75 cv
129.86 40.2 129.23 40.43 128.38 40.43 cv
128.06 40.43 127.77 40.4 127.49 40.36 cv
127.21 40.31 126.93 40.24 126.67 40.14 cv
126.67 39.27 li
126.93 39.41 127.19 39.51 127.45 39.58 cv
127.71 39.65 127.97 39.69 128.24 39.69 cv
128.82 39.69 129.26 39.53 129.56 39.23 cv
129.85 38.92 130 38.46 130 37.84 cv
130 37.4 li
129.81 37.72 129.57 37.96 129.28 38.12 cv
128.99 38.28 128.65 38.36 128.25 38.36 cv
127.57 38.36 127.03 38.11 126.62 37.6 cv
126.21 37.09 126.01 36.41 126.01 35.56 cv
126.01 34.72 126.21 34.04 126.62 33.53 cv
127.03 33.02 127.57 32.76 128.25 32.76 cv
128.65 32.76 128.99 32.84 129.28 33 cv
129.57 33.16 129.81 33.4 130 33.72 cv
130 32.89 li
130.9 32.89 li
130.9 37.68 li
ef
135.93 33.73 mo
135.83 33.67 135.72 33.63 135.6 33.6 cv
135.48 33.58 135.35 33.56 135.21 33.56 cv
134.7 33.56 134.31 33.73 134.04 34.06 cv
133.76 34.39 133.63 34.86 133.63 35.48 cv
133.63 38.36 li
132.73 38.36 li
132.73 32.89 li
133.63 32.89 li
133.63 33.74 li
133.81 33.41 134.06 33.16 134.36 33 cv
134.66 32.84 135.03 32.76 135.47 32.76 cv
135.53 32.76 135.6 32.77 135.68 32.77 cv
135.75 32.78 135.83 32.79 135.93 32.81 cv
135.93 33.73 li
ef
141.64 35.4 mo
141.64 35.84 li
137.51 35.84 li
137.55 36.46 137.73 36.94 138.07 37.26 cv
138.4 37.58 138.86 37.74 139.46 37.74 cv
139.8 37.74 140.14 37.7 140.46 37.62 cv
140.78 37.54 141.11 37.41 141.43 37.23 cv
141.43 38.08 li
141.11 38.22 140.78 38.33 140.44 38.39 cv
140.1 38.45 139.75 38.49 139.41 38.49 cv
138.53 38.49 137.84 38.24 137.33 37.74 cv
136.82 37.24 136.57 36.55 136.57 35.68 cv
136.57 34.79 136.81 34.08 137.29 33.55 cv
137.77 33.03 138.43 32.76 139.25 32.76 cv
139.99 32.76 140.57 33 141 33.47 cv
141.42 33.95 141.64 34.59 141.64 35.4 cv
140.74 35.14 mo
140.73 34.65 140.59 34.26 140.33 33.96 cv
140.06 33.67 139.7 33.52 139.26 33.52 cv
138.76 33.52 138.36 33.67 138.06 33.95 cv
137.76 34.23 137.58 34.63 137.54 35.14 cv
140.74 35.14 li
ef
147.76 35.4 mo
147.76 35.84 li
143.63 35.84 li
143.67 36.46 143.85 36.94 144.19 37.26 cv
144.52 37.58 144.98 37.74 145.58 37.74 cv
145.92 37.74 146.26 37.7 146.58 37.62 cv
146.9 37.54 147.23 37.41 147.55 37.23 cv
147.55 38.08 li
147.23 38.22 146.9 38.33 146.56 38.39 cv
146.22 38.45 145.87 38.49 145.53 38.49 cv
144.65 38.49 143.96 38.24 143.45 37.74 cv
142.94 37.24 142.69 36.55 142.69 35.68 cv
142.69 34.79 142.93 34.08 143.41 33.55 cv
143.89 33.03 144.55 32.76 145.37 32.76 cv
146.11 32.76 146.69 33 147.12 33.47 cv
147.54 33.95 147.76 34.59 147.76 35.4 cv
146.86 35.14 mo
146.85 34.65 146.71 34.26 146.45 33.96 cv
146.18 33.67 145.82 33.52 145.38 33.52 cv
144.88 33.52 144.48 33.67 144.18 33.95 cv
143.88 34.23 143.7 34.63 143.66 35.14 cv
146.86 35.14 li
ef
152.8 33.72 mo
152.8 30.76 li
153.7 30.76 li
153.7 38.36 li
152.8 38.36 li
152.8 37.54 li
152.61 37.87 152.37 38.11 152.08 38.26 cv
151.79 38.41 151.45 38.49 151.05 38.49 cv
150.39 38.49 149.85 38.23 149.43 37.71 cv
149.01 37.19 148.81 36.49 148.81 35.63 cv
148.81 34.77 149.01 34.08 149.43 33.55 cv
149.85 33.03 150.39 32.76 151.05 32.76 cv
151.45 32.76 151.79 32.84 152.08 33 cv
152.37 33.16 152.61 33.4 152.8 33.72 cv
149.74 35.63 mo
149.74 36.29 149.87 36.81 150.14 37.19 cv
150.41 37.57 150.79 37.75 151.27 37.75 cv
151.74 37.75 152.11 37.57 152.39 37.19 cv
152.66 36.81 152.8 36.29 152.8 35.63 cv
152.8 34.97 152.66 34.46 152.39 34.08 cv
152.11 33.7 151.74 33.51 151.27 33.51 cv
150.79 33.51 150.41 33.7 150.14 34.08 cv
149.87 34.46 149.74 34.97 149.74 35.63 cv
ef
157.84 38.86 mo
157.58 39.5 157.33 39.93 157.09 40.13 cv
156.85 40.33 156.53 40.43 156.13 40.43 cv
155.41 40.43 li
155.41 39.68 li
155.94 39.68 li
156.18 39.68 156.37 39.62 156.51 39.5 cv
156.65 39.38 156.8 39.11 156.97 38.67 cv
157.13 38.27 li
154.92 32.89 li
155.87 32.89 li
157.58 37.17 li
159.29 32.89 li
160.24 32.89 li
157.84 38.86 li
ef
63.307 53.071 mo
83.307 53.071 li
83.307 46.071 li
63.307 46.071 li
cp
.609064 .118654 .887358 0 cmyk
f
63.307 53.071 mo
83.307 53.071 li
83.307 46.071 li
63.307 46.071 li
cp
gsave
grestore
/283953076.0 
<<
/ID /283953076.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/283953076.0 /Pattern get_res
[1 0 0 -1 .294006 -.0667725 ]make_pattern set_pattern
f
2 vmreclaim
91.59 45.83 mo
92.59 45.83 li
94.12 51.99 li
95.65 45.83 li
96.76 45.83 li
98.29 51.99 li
99.82 45.83 li
100.82 45.83 li
98.99 53.12 li
97.75 53.12 li
96.21 46.79 li
94.66 53.12 li
93.42 53.12 li
91.59 45.83 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
104.64 46.8 mo
103.3 50.43 li
105.98 50.43 li
104.64 46.8 li
104.08 45.83 mo
105.2 45.83 li
107.98 53.12 li
106.95 53.12 li
106.29 51.25 li
103 51.25 li
102.34 53.12 li
101.3 53.12 li
104.08 45.83 li
ef
113.41 46.07 mo
113.41 47.03 li
113.03 46.85 112.68 46.72 112.35 46.63 cv
112.01 46.55 111.69 46.5 111.39 46.5 cv
110.85 46.5 110.43 46.61 110.14 46.81 cv
109.85 47.02 109.71 47.32 109.71 47.7 cv
109.71 48.02 109.8 48.27 110 48.43 cv
110.19 48.6 110.56 48.73 111.1 48.83 cv
111.7 48.95 li
112.43 49.09 112.97 49.34 113.32 49.69 cv
113.67 50.05 113.85 50.52 113.85 51.11 cv
113.85 51.82 113.61 52.35 113.14 52.71 cv
112.66 53.07 111.97 53.25 111.06 53.25 cv
110.71 53.25 110.34 53.21 109.95 53.14 cv
109.56 53.07 109.16 52.96 108.75 52.8 cv
108.75 51.78 li
109.15 52.01 109.54 52.18 109.92 52.29 cv
110.3 52.41 110.68 52.46 111.06 52.46 cv
111.62 52.46 112.05 52.35 112.36 52.13 cv
112.66 51.91 112.82 51.6 112.82 51.18 cv
112.82 50.82 112.71 50.54 112.49 50.34 cv
112.27 50.14 111.91 49.99 111.41 49.89 cv
110.81 49.77 li
110.07 49.63 109.54 49.4 109.21 49.08 cv
108.88 48.77 108.72 48.34 108.72 47.78 cv
108.72 47.14 108.94 46.63 109.4 46.26 cv
109.85 45.89 110.48 45.7 111.28 45.7 cv
111.62 45.7 111.96 45.73 112.32 45.79 cv
112.67 45.85 113.03 45.95 113.41 46.07 cv
ef
115.4 45.83 mo
116.39 45.83 li
116.39 48.82 li
119.97 48.82 li
119.97 45.83 li
120.96 45.83 li
120.96 53.12 li
119.97 53.12 li
119.97 49.65 li
116.39 49.65 li
116.39 53.12 li
115.4 53.12 li
115.4 45.83 li
ef
122.35 50.78 mo
124.98 50.78 li
124.98 49.98 li
122.35 49.98 li
cp
f
129.57 48.49 mo
129.47 48.43 129.36 48.39 129.24 48.36 cv
129.12 48.34 128.99 48.32 128.85 48.32 cv
128.34 48.32 127.95 48.49 127.68 48.82 cv
127.4 49.15 127.27 49.62 127.27 50.24 cv
127.27 53.12 li
126.37 53.12 li
126.37 47.65 li
127.27 47.65 li
127.27 48.5 li
127.45 48.17 127.7 47.92 128 47.76 cv
128.3 47.6 128.67 47.52 129.11 47.52 cv
129.17 47.52 129.24 47.53 129.32 47.53 cv
129.39 47.54 129.47 47.55 129.57 47.57 cv
129.57 48.49 li
ef
134.2 48.48 mo
134.2 45.52 li
135.1 45.52 li
135.1 53.12 li
134.2 53.12 li
134.2 52.3 li
134.01 52.63 133.77 52.87 133.48 53.02 cv
133.19 53.17 132.85 53.25 132.45 53.25 cv
131.79 53.25 131.25 52.99 130.83 52.47 cv
130.41 51.95 130.21 51.25 130.21 50.39 cv
130.21 49.53 130.41 48.84 130.83 48.31 cv
131.25 47.79 131.79 47.52 132.45 47.52 cv
132.85 47.52 133.19 47.6 133.48 47.76 cv
133.77 47.92 134.01 48.16 134.2 48.48 cv
131.14 50.39 mo
131.14 51.05 131.27 51.57 131.54 51.95 cv
131.81 52.33 132.19 52.51 132.67 52.51 cv
133.14 52.51 133.51 52.33 133.79 51.95 cv
134.06 51.57 134.2 51.05 134.2 50.39 cv
134.2 49.73 134.06 49.22 133.79 48.84 cv
133.51 48.46 133.14 48.27 132.67 48.27 cv
132.19 48.27 131.81 48.46 131.54 48.84 cv
131.27 49.22 131.14 49.73 131.14 50.39 cv
ef
141.22 48.7 mo
141.44 48.3 141.71 48.01 142.02 47.81 cv
142.33 47.62 142.7 47.52 143.13 47.52 cv
143.69 47.52 144.13 47.72 144.44 48.12 cv
144.75 48.52 144.91 49.09 144.91 49.82 cv
144.91 53.12 li
144.01 53.12 li
144.01 49.85 li
144.01 49.33 143.91 48.94 143.73 48.68 cv
143.54 48.43 143.26 48.3 142.88 48.3 cv
142.41 48.3 142.04 48.46 141.77 48.77 cv
141.5 49.08 141.37 49.5 141.37 50.03 cv
141.37 53.12 li
140.47 53.12 li
140.47 49.85 li
140.47 49.33 140.37 48.94 140.19 48.68 cv
140 48.43 139.71 48.3 139.33 48.3 cv
138.87 48.3 138.5 48.46 138.23 48.77 cv
137.96 49.08 137.83 49.5 137.83 50.03 cv
137.83 53.12 li
136.93 53.12 li
136.93 47.65 li
137.83 47.65 li
137.83 48.5 li
138.03 48.17 138.28 47.92 138.57 47.76 cv
138.85 47.6 139.19 47.52 139.59 47.52 cv
139.99 47.52 140.32 47.62 140.6 47.82 cv
140.88 48.02 141.08 48.32 141.22 48.7 cv
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/208410220.0 /208410024.0 /208409632.0 /208409436.0 /208409240.0 
/208408848.0 /208377716.0 /208377520.0 /283952488.0 /283952684.0 
/283952880.0 /283953076.0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
