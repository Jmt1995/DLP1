%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPA2A4.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/29 ÐÇÆÚËÄ, ÉÏÎç 8:31:19
%%BoundingBox: 0 0 440 318
%%HiResBoundingBox: 0 0 440 318
%%CropBox: 0 0 440 318
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 965 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2019-08-29T08:30:56+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-29T08:30:56+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:9f95e287-bccd-4c2b-b245-bf17196a68d8"
   xmpMM:InstanceID="uuid:9b9a9150-7648-48f4-8ddf-6596e4c5c777">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_unbanlancedata3_1.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -318 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 318 li
440 318 li
440 0 li
cp
clp
.059998 317.94 mo
440.1 317.94 li
440.1 -.0600281 li
.059998 -.0600281 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
75.979 273.009 mo
433.099 273.009 li
433.099 6.897 li
75.979 6.897 li
cp
f
92.212 273.009 mo
92.212 276.509 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
92.212 273.009 mo
92.212 276.509 li
@
92.232 281.404 mo
91.518 281.404 90.986 281.754 90.622 282.454 cv
90.258 283.154 90.09 284.204 90.09 285.604 cv
90.09 287.004 90.258 288.054 90.622 288.754 cv
90.986 289.454 91.518 289.804 92.232 289.804 cv
92.946 289.804 93.478 289.454 93.842 288.754 cv
94.192 288.054 94.374 287.004 94.374 285.604 cv
94.374 284.204 94.192 283.154 93.842 282.454 cv
93.478 281.754 92.946 281.404 92.232 281.404 cv
92.232 280.312 mo
93.366 280.312 94.234 280.774 94.85 281.67 cv
95.452 282.58 95.76 283.896 95.76 285.604 cv
95.76 287.326 95.452 288.642 94.85 289.538 cv
94.234 290.434 93.366 290.882 92.232 290.882 cv
91.084 290.882 90.202 290.434 89.6 289.538 cv
88.998 288.642 88.704 287.326 88.704 285.604 cv
88.704 283.896 88.998 282.58 89.6 281.67 cv
90.202 280.774 91.084 280.312 92.232 280.312 cv
ef
158.468 273.009 mo
158.468 276.509 li
f
158.468 273.009 mo
158.468 276.509 li
@
151.316 289.538 mo
153.57 289.538 li
153.57 281.754 li
151.12 282.244 li
151.12 280.984 li
153.556 280.494 li
154.942 280.494 li
154.942 289.538 li
157.196 289.538 li
157.196 290.7 li
151.316 290.7 li
151.316 289.538 li
ef
162.912 281.404 mo
162.198 281.404 161.666 281.754 161.302 282.454 cv
160.938 283.154 160.77 284.204 160.77 285.604 cv
160.77 287.004 160.938 288.054 161.302 288.754 cv
161.666 289.454 162.198 289.804 162.912 289.804 cv
163.626 289.804 164.158 289.454 164.522 288.754 cv
164.872 288.054 165.054 287.004 165.054 285.604 cv
165.054 284.204 164.872 283.154 164.522 282.454 cv
164.158 281.754 163.626 281.404 162.912 281.404 cv
162.912 280.312 mo
164.046 280.312 164.914 280.774 165.53 281.67 cv
166.132 282.58 166.44 283.896 166.44 285.604 cv
166.44 287.326 166.132 288.642 165.53 289.538 cv
164.914 290.434 164.046 290.882 162.912 290.882 cv
161.764 290.882 160.882 290.434 160.28 289.538 cv
159.678 288.642 159.384 287.326 159.384 285.604 cv
159.384 283.896 159.678 282.58 160.28 281.67 cv
160.882 280.774 161.764 280.312 162.912 280.312 cv
ef
224.724 273.009 mo
224.724 276.509 li
f
224.724 273.009 mo
224.724 276.509 li
@
218.508 289.538 mo
223.324 289.538 li
223.324 290.7 li
216.842 290.7 li
216.842 289.538 li
217.36 289.006 218.074 288.278 218.984 287.354 cv
219.88 286.444 220.454 285.856 220.692 285.59 cv
221.14 285.1 221.448 284.68 221.616 284.33 cv
221.784 283.994 221.882 283.644 221.882 283.308 cv
221.882 282.776 221.686 282.328 221.308 281.992 cv
220.93 281.656 220.44 281.474 219.824 281.474 cv
219.39 281.474 218.928 281.558 218.452 281.698 cv
217.976 281.852 217.458 282.076 216.912 282.384 cv
216.912 280.984 li
217.472 280.76 217.99 280.592 218.466 280.48 cv
218.942 280.368 219.39 280.312 219.796 280.312 cv
220.846 280.312 221.686 280.578 222.316 281.11 cv
222.946 281.642 223.268 282.342 223.268 283.224 cv
223.268 283.644 223.184 284.05 223.03 284.414 cv
222.876 284.792 222.596 285.24 222.176 285.744 cv
222.064 285.884 221.7 286.262 221.084 286.892 cv
220.468 287.522 219.614 288.404 218.508 289.538 cv
ef
229.152 281.404 mo
228.438 281.404 227.906 281.754 227.542 282.454 cv
227.178 283.154 227.01 284.204 227.01 285.604 cv
227.01 287.004 227.178 288.054 227.542 288.754 cv
227.906 289.454 228.438 289.804 229.152 289.804 cv
229.866 289.804 230.398 289.454 230.762 288.754 cv
231.112 288.054 231.294 287.004 231.294 285.604 cv
231.294 284.204 231.112 283.154 230.762 282.454 cv
230.398 281.754 229.866 281.404 229.152 281.404 cv
229.152 280.312 mo
230.286 280.312 231.154 280.774 231.77 281.67 cv
232.372 282.58 232.68 283.896 232.68 285.604 cv
232.68 287.326 232.372 288.642 231.77 289.538 cv
231.154 290.434 230.286 290.882 229.152 290.882 cv
228.004 290.882 227.122 290.434 226.52 289.538 cv
225.918 288.642 225.624 287.326 225.624 285.604 cv
225.624 283.896 225.918 282.58 226.52 281.67 cv
227.122 280.774 228.004 280.312 229.152 280.312 cv
ef
290.98 273.009 mo
290.98 276.509 li
f
290.98 273.009 mo
290.98 276.509 li
@
287.744 285.198 mo
288.402 285.338 288.92 285.632 289.284 286.08 cv
289.648 286.528 289.844 287.088 289.844 287.732 cv
289.844 288.74 289.494 289.524 288.808 290.07 cv
288.108 290.616 287.128 290.882 285.854 290.882 cv
285.42 290.882 284.972 290.84 284.524 290.756 cv
284.076 290.686 283.6 290.56 283.124 290.392 cv
283.124 289.062 li
283.502 289.286 283.922 289.454 284.384 289.566 cv
284.832 289.678 285.308 289.734 285.812 289.734 cv
286.68 289.734 287.338 289.566 287.786 289.23 cv
288.234 288.894 288.472 288.39 288.472 287.732 cv
288.472 287.144 288.262 286.668 287.842 286.332 cv
287.422 285.996 286.834 285.814 286.078 285.814 cv
284.888 285.814 li
284.888 284.68 li
286.134 284.68 li
286.806 284.68 287.324 284.554 287.688 284.274 cv
288.052 284.008 288.234 283.616 288.234 283.098 cv
288.234 282.58 288.038 282.174 287.674 281.894 cv
287.296 281.614 286.764 281.474 286.078 281.474 cv
285.7 281.474 285.294 281.516 284.86 281.6 cv
284.426 281.684 283.95 281.81 283.432 281.978 cv
283.432 280.746 li
283.95 280.606 284.44 280.494 284.902 280.424 cv
285.35 280.354 285.784 280.312 286.204 280.312 cv
287.24 280.312 288.066 280.55 288.682 281.026 cv
289.298 281.502 289.606 282.146 289.606 282.958 cv
289.606 283.518 289.438 283.994 289.116 284.386 cv
288.794 284.778 288.332 285.058 287.744 285.198 cv
ef
295.392 281.404 mo
294.678 281.404 294.146 281.754 293.782 282.454 cv
293.418 283.154 293.25 284.204 293.25 285.604 cv
293.25 287.004 293.418 288.054 293.782 288.754 cv
294.146 289.454 294.678 289.804 295.392 289.804 cv
296.106 289.804 296.638 289.454 297.002 288.754 cv
297.352 288.054 297.534 287.004 297.534 285.604 cv
297.534 284.204 297.352 283.154 297.002 282.454 cv
296.638 281.754 296.106 281.404 295.392 281.404 cv
295.392 280.312 mo
296.526 280.312 297.394 280.774 298.01 281.67 cv
298.612 282.58 298.92 283.896 298.92 285.604 cv
298.92 287.326 298.612 288.642 298.01 289.538 cv
297.394 290.434 296.526 290.882 295.392 290.882 cv
294.244 290.882 293.362 290.434 292.76 289.538 cv
292.158 288.642 291.864 287.326 291.864 285.604 cv
291.864 283.896 292.158 282.58 292.76 281.67 cv
293.362 280.774 294.244 280.312 295.392 280.312 cv
ef
357.236 273.009 mo
357.236 276.509 li
f
357.236 273.009 mo
357.236 276.509 li
@
353.592 281.698 mo
350.106 287.144 li
353.592 287.144 li
353.592 281.698 li
353.228 280.494 mo
354.964 280.494 li
354.964 287.144 li
356.42 287.144 li
356.42 288.292 li
354.964 288.292 li
354.964 290.7 li
353.592 290.7 li
353.592 288.292 li
348.986 288.292 li
348.986 286.962 li
353.228 280.494 li
ef
361.632 281.404 mo
360.918 281.404 360.386 281.754 360.022 282.454 cv
359.658 283.154 359.49 284.204 359.49 285.604 cv
359.49 287.004 359.658 288.054 360.022 288.754 cv
360.386 289.454 360.918 289.804 361.632 289.804 cv
362.346 289.804 362.878 289.454 363.242 288.754 cv
363.592 288.054 363.774 287.004 363.774 285.604 cv
363.774 284.204 363.592 283.154 363.242 282.454 cv
362.878 281.754 362.346 281.404 361.632 281.404 cv
361.632 280.312 mo
362.766 280.312 363.634 280.774 364.25 281.67 cv
364.852 282.58 365.16 283.896 365.16 285.604 cv
365.16 287.326 364.852 288.642 364.25 289.538 cv
363.634 290.434 362.766 290.882 361.632 290.882 cv
360.484 290.882 359.602 290.434 359 289.538 cv
358.398 288.642 358.104 287.326 358.104 285.604 cv
358.104 283.896 358.398 282.58 359 281.67 cv
359.602 280.774 360.484 280.312 361.632 280.312 cv
ef
423.492 273.009 mo
423.492 276.509 li
f
423.492 273.009 mo
423.492 276.509 li
@
416.052 280.494 mo
421.47 280.494 li
421.47 281.656 li
417.312 281.656 li
417.312 284.162 li
417.508 284.092 417.718 284.036 417.914 284.008 cv
418.11 283.98 418.32 283.952 418.516 283.952 cv
419.65 283.952 420.546 284.274 421.218 284.89 cv
421.89 285.52 422.226 286.36 422.226 287.424 cv
422.226 288.53 421.876 289.384 421.19 289.986 cv
420.504 290.588 419.538 290.882 418.306 290.882 cv
417.872 290.882 417.438 290.84 416.99 290.784 cv
416.542 290.714 416.094 290.616 415.618 290.462 cv
415.618 289.076 li
416.024 289.3 416.444 289.468 416.892 289.58 cv
417.326 289.692 417.788 289.734 418.278 289.734 cv
419.062 289.734 419.692 289.538 420.154 289.118 cv
420.602 288.698 420.84 288.138 420.84 287.424 cv
420.84 286.724 420.602 286.164 420.154 285.744 cv
419.692 285.324 419.062 285.114 418.278 285.114 cv
417.914 285.114 417.536 285.156 417.172 285.24 cv
416.808 285.324 416.43 285.45 416.052 285.618 cv
416.052 280.494 li
ef
427.992 281.404 mo
427.278 281.404 426.746 281.754 426.382 282.454 cv
426.018 283.154 425.85 284.204 425.85 285.604 cv
425.85 287.004 426.018 288.054 426.382 288.754 cv
426.746 289.454 427.278 289.804 427.992 289.804 cv
428.706 289.804 429.238 289.454 429.602 288.754 cv
429.952 288.054 430.134 287.004 430.134 285.604 cv
430.134 284.204 429.952 283.154 429.602 282.454 cv
429.238 281.754 428.706 281.404 427.992 281.404 cv
427.992 280.312 mo
429.126 280.312 429.994 280.774 430.61 281.67 cv
431.212 282.58 431.52 283.896 431.52 285.604 cv
431.52 287.326 431.212 288.642 430.61 289.538 cv
429.994 290.434 429.126 290.882 427.992 290.882 cv
426.844 290.882 425.962 290.434 425.36 289.538 cv
424.758 288.642 424.464 287.326 424.464 285.604 cv
424.464 283.896 424.758 282.58 425.36 281.67 cv
425.962 280.774 426.844 280.312 427.992 280.312 cv
ef
232.618 299.148 mo
232.618 307.086 li
234.284 307.086 li
235.684 307.086 236.72 306.778 237.378 306.134 cv
238.022 305.49 238.358 304.482 238.358 303.11 cv
238.358 301.738 238.022 300.744 237.378 300.1 cv
236.72 299.47 235.684 299.148 234.284 299.148 cv
232.618 299.148 li
231.232 298.014 mo
234.074 298.014 li
236.048 298.014 237.504 298.434 238.428 299.246 cv
239.352 300.072 239.814 301.36 239.814 303.11 cv
239.814 304.874 239.338 306.162 238.414 306.988 cv
237.49 307.814 236.034 308.22 234.074 308.22 cv
231.232 308.22 li
231.232 298.014 li
ef
241.976 300.562 mo
243.236 300.562 li
243.236 308.22 li
241.976 308.22 li
241.976 300.562 li
241.976 297.58 mo
241.976 297.58 mo
243.236 297.58 li
243.236 299.176 li
241.976 299.176 li
cp
ef
250.702 300.786 mo
250.702 301.976 li
250.338 301.808 249.974 301.668 249.596 301.57 cv
249.204 301.486 248.812 301.43 248.406 301.43 cv
247.776 301.43 247.3 301.528 246.992 301.724 cv
246.684 301.92 246.53 302.2 246.53 302.578 cv
246.53 302.872 246.642 303.096 246.866 303.264 cv
247.09 303.432 247.538 303.6 248.21 303.74 cv
248.644 303.838 li
249.54 304.034 250.17 304.314 250.548 304.65 cv
250.912 305 251.108 305.49 251.108 306.106 cv
251.108 306.82 250.828 307.38 250.268 307.786 cv
249.708 308.206 248.924 308.402 247.944 308.402 cv
247.524 308.402 247.104 308.36 246.656 308.29 cv
246.208 308.22 245.746 308.108 245.256 307.94 cv
245.256 306.638 li
245.718 306.89 246.18 307.072 246.628 307.184 cv
247.076 307.31 247.524 307.366 247.972 307.366 cv
248.56 307.366 249.022 307.268 249.344 307.072 cv
249.652 306.876 249.82 306.582 249.82 306.204 cv
249.82 305.868 249.694 305.602 249.47 305.42 cv
249.246 305.238 248.742 305.056 247.958 304.888 cv
247.524 304.79 li
246.74 304.622 246.166 304.37 245.83 304.034 cv
245.48 303.698 245.312 303.236 245.312 302.634 cv
245.312 301.92 245.564 301.36 246.068 300.968 cv
246.572 300.576 247.3 300.38 248.252 300.38 cv
248.714 300.38 249.148 300.422 249.568 300.492 cv
249.974 300.562 250.352 300.66 250.702 300.786 cv
ef
253.094 297.58 mo
254.354 297.58 li
254.354 303.866 li
258.106 300.562 li
259.716 300.562 li
255.656 304.146 li
259.884 308.22 li
258.246 308.22 li
254.354 304.482 li
254.354 308.22 li
253.094 308.22 li
253.094 297.58 li
ef
265.672 308.22 mo
267.058 308.22 li
267.058 298.014 li
265.672 298.014 li
cp
f
271.258 299.148 mo
271.258 307.086 li
272.924 307.086 li
274.324 307.086 275.36 306.778 276.018 306.134 cv
276.662 305.49 276.998 304.482 276.998 303.11 cv
276.998 301.738 276.662 300.744 276.018 300.1 cv
275.36 299.47 274.324 299.148 272.924 299.148 cv
271.258 299.148 li
269.872 298.014 mo
272.714 298.014 li
274.688 298.014 276.144 298.434 277.068 299.246 cv
277.992 300.072 278.454 301.36 278.454 303.11 cv
278.454 304.874 277.978 306.162 277.054 306.988 cv
276.13 307.814 274.674 308.22 272.714 308.22 cv
269.872 308.22 li
269.872 298.014 li
ef
75.979 264.048 mo
72.479 264.048 li
f
75.979 264.048 mo
72.479 264.048 li
@
35.988 268.178 mo
40.804 268.178 li
40.804 269.34 li
34.322 269.34 li
34.322 268.178 li
34.84 267.646 35.554 266.918 36.464 265.994 cv
37.36 265.084 37.934 264.496 38.172 264.23 cv
38.62 263.74 38.928 263.32 39.096 262.97 cv
39.264 262.634 39.362 262.284 39.362 261.948 cv
39.362 261.416 39.166 260.968 38.788 260.632 cv
38.41 260.296 37.92 260.114 37.304 260.114 cv
36.87 260.114 36.408 260.198 35.932 260.338 cv
35.456 260.492 34.938 260.716 34.392 261.024 cv
34.392 259.624 li
34.952 259.4 35.47 259.232 35.946 259.12 cv
36.422 259.008 36.87 258.952 37.276 258.952 cv
38.326 258.952 39.166 259.218 39.796 259.75 cv
40.426 260.282 40.748 260.982 40.748 261.864 cv
40.748 262.284 40.664 262.69 40.51 263.054 cv
40.356 263.432 40.076 263.88 39.656 264.384 cv
39.544 264.524 39.18 264.902 38.564 265.532 cv
37.948 266.162 37.094 267.044 35.988 268.178 cv
ef
46.752 260.044 mo
46.038 260.044 45.506 260.394 45.142 261.094 cv
44.778 261.794 44.61 262.844 44.61 264.244 cv
44.61 265.644 44.778 266.694 45.142 267.394 cv
45.506 268.094 46.038 268.444 46.752 268.444 cv
47.466 268.444 47.998 268.094 48.362 267.394 cv
48.712 266.694 48.894 265.644 48.894 264.244 cv
48.894 262.844 48.712 261.794 48.362 261.094 cv
47.998 260.394 47.466 260.044 46.752 260.044 cv
46.752 258.952 mo
47.886 258.952 48.754 259.414 49.37 260.31 cv
49.972 261.22 50.28 262.536 50.28 264.244 cv
50.28 265.966 49.972 267.282 49.37 268.178 cv
48.754 269.074 47.886 269.522 46.752 269.522 cv
45.604 269.522 44.722 269.074 44.12 268.178 cv
43.518 267.282 43.224 265.966 43.224 264.244 cv
43.224 262.536 43.518 261.22 44.12 260.31 cv
44.722 259.414 45.604 258.952 46.752 258.952 cv
ef
55.632 260.044 mo
54.918 260.044 54.386 260.394 54.022 261.094 cv
53.658 261.794 53.49 262.844 53.49 264.244 cv
53.49 265.644 53.658 266.694 54.022 267.394 cv
54.386 268.094 54.918 268.444 55.632 268.444 cv
56.346 268.444 56.878 268.094 57.242 267.394 cv
57.592 266.694 57.774 265.644 57.774 264.244 cv
57.774 262.844 57.592 261.794 57.242 261.094 cv
56.878 260.394 56.346 260.044 55.632 260.044 cv
55.632 258.952 mo
56.766 258.952 57.634 259.414 58.25 260.31 cv
58.852 261.22 59.16 262.536 59.16 264.244 cv
59.16 265.966 58.852 267.282 58.25 268.178 cv
57.634 269.074 56.766 269.522 55.632 269.522 cv
54.484 269.522 53.602 269.074 53 268.178 cv
52.398 267.282 52.104 265.966 52.104 264.244 cv
52.104 262.536 52.398 261.22 53 260.31 cv
53.602 259.414 54.484 258.952 55.632 258.952 cv
ef
64.512 260.044 mo
63.798 260.044 63.266 260.394 62.902 261.094 cv
62.538 261.794 62.37 262.844 62.37 264.244 cv
62.37 265.644 62.538 266.694 62.902 267.394 cv
63.266 268.094 63.798 268.444 64.512 268.444 cv
65.226 268.444 65.758 268.094 66.122 267.394 cv
66.472 266.694 66.654 265.644 66.654 264.244 cv
66.654 262.844 66.472 261.794 66.122 261.094 cv
65.758 260.394 65.226 260.044 64.512 260.044 cv
64.512 258.952 mo
65.646 258.952 66.514 259.414 67.13 260.31 cv
67.732 261.22 68.04 262.536 68.04 264.244 cv
68.04 265.966 67.732 267.282 67.13 268.178 cv
66.514 269.074 65.646 269.522 64.512 269.522 cv
63.364 269.522 62.482 269.074 61.88 268.178 cv
61.278 267.282 60.984 265.966 60.984 264.244 cv
60.984 262.536 61.278 261.22 61.88 260.31 cv
62.482 259.414 63.364 258.952 64.512 258.952 cv
ef
75.979 232.698 mo
72.479 232.698 li
f
75.979 232.698 mo
72.479 232.698 li
@
38.592 229.018 mo
35.106 234.464 li
38.592 234.464 li
38.592 229.018 li
38.228 227.814 mo
39.964 227.814 li
39.964 234.464 li
41.42 234.464 li
41.42 235.612 li
39.964 235.612 li
39.964 238.02 li
38.592 238.02 li
38.592 235.612 li
33.986 235.612 li
33.986 234.282 li
38.228 227.814 li
ef
46.752 228.724 mo
46.038 228.724 45.506 229.074 45.142 229.774 cv
44.778 230.474 44.61 231.524 44.61 232.924 cv
44.61 234.324 44.778 235.374 45.142 236.074 cv
45.506 236.774 46.038 237.124 46.752 237.124 cv
47.466 237.124 47.998 236.774 48.362 236.074 cv
48.712 235.374 48.894 234.324 48.894 232.924 cv
48.894 231.524 48.712 230.474 48.362 229.774 cv
47.998 229.074 47.466 228.724 46.752 228.724 cv
46.752 227.632 mo
47.886 227.632 48.754 228.094 49.37 228.99 cv
49.972 229.9 50.28 231.216 50.28 232.924 cv
50.28 234.646 49.972 235.962 49.37 236.858 cv
48.754 237.754 47.886 238.202 46.752 238.202 cv
45.604 238.202 44.722 237.754 44.12 236.858 cv
43.518 235.962 43.224 234.646 43.224 232.924 cv
43.224 231.216 43.518 229.9 44.12 228.99 cv
44.722 228.094 45.604 227.632 46.752 227.632 cv
ef
55.632 228.724 mo
54.918 228.724 54.386 229.074 54.022 229.774 cv
53.658 230.474 53.49 231.524 53.49 232.924 cv
53.49 234.324 53.658 235.374 54.022 236.074 cv
54.386 236.774 54.918 237.124 55.632 237.124 cv
56.346 237.124 56.878 236.774 57.242 236.074 cv
57.592 235.374 57.774 234.324 57.774 232.924 cv
57.774 231.524 57.592 230.474 57.242 229.774 cv
56.878 229.074 56.346 228.724 55.632 228.724 cv
55.632 227.632 mo
56.766 227.632 57.634 228.094 58.25 228.99 cv
58.852 229.9 59.16 231.216 59.16 232.924 cv
59.16 234.646 58.852 235.962 58.25 236.858 cv
57.634 237.754 56.766 238.202 55.632 238.202 cv
54.484 238.202 53.602 237.754 53 236.858 cv
52.398 235.962 52.104 234.646 52.104 232.924 cv
52.104 231.216 52.398 229.9 53 228.99 cv
53.602 228.094 54.484 227.632 55.632 227.632 cv
ef
64.512 228.724 mo
63.798 228.724 63.266 229.074 62.902 229.774 cv
62.538 230.474 62.37 231.524 62.37 232.924 cv
62.37 234.324 62.538 235.374 62.902 236.074 cv
63.266 236.774 63.798 237.124 64.512 237.124 cv
65.226 237.124 65.758 236.774 66.122 236.074 cv
66.472 235.374 66.654 234.324 66.654 232.924 cv
66.654 231.524 66.472 230.474 66.122 229.774 cv
65.758 229.074 65.226 228.724 64.512 228.724 cv
64.512 227.632 mo
65.646 227.632 66.514 228.094 67.13 228.99 cv
67.732 229.9 68.04 231.216 68.04 232.924 cv
68.04 234.646 67.732 235.962 67.13 236.858 cv
66.514 237.754 65.646 238.202 64.512 238.202 cv
63.364 238.202 62.482 237.754 61.88 236.858 cv
61.278 235.962 60.984 234.646 60.984 232.924 cv
60.984 231.216 61.278 229.9 61.88 228.99 cv
62.482 228.094 63.364 227.632 64.512 227.632 cv
ef
75.979 201.348 mo
72.479 201.348 li
f
75.979 201.348 mo
72.479 201.348 li
@
37.92 201.044 mo
37.304 201.044 36.814 201.268 36.45 201.688 cv
36.086 202.108 35.904 202.696 35.904 203.424 cv
35.904 204.166 36.086 204.754 36.45 205.174 cv
36.814 205.594 37.304 205.804 37.92 205.804 cv
38.536 205.804 39.026 205.594 39.39 205.174 cv
39.754 204.754 39.936 204.166 39.936 203.424 cv
39.936 202.696 39.754 202.108 39.39 201.688 cv
39.026 201.268 38.536 201.044 37.92 201.044 cv
40.664 196.718 mo
40.664 197.978 li
40.314 197.81 39.964 197.684 39.614 197.6 cv
39.25 197.516 38.9 197.474 38.564 197.474 cv
37.64 197.474 36.94 197.782 36.464 198.398 cv
35.988 199.014 35.708 199.952 35.652 201.184 cv
35.918 200.792 36.254 200.484 36.66 200.274 cv
37.066 200.064 37.514 199.952 38.004 199.952 cv
39.026 199.952 39.838 200.274 40.426 200.89 cv
41.014 201.506 41.322 202.36 41.322 203.424 cv
41.322 204.474 41 205.314 40.384 205.944 cv
39.768 206.574 38.942 206.882 37.92 206.882 cv
36.744 206.882 35.834 206.434 35.218 205.538 cv
34.588 204.642 34.28 203.326 34.28 201.604 cv
34.28 199.994 34.658 198.706 35.428 197.754 cv
36.184 196.802 37.22 196.312 38.508 196.312 cv
38.844 196.312 39.194 196.354 39.558 196.41 cv
39.908 196.48 40.272 196.578 40.664 196.718 cv
ef
46.752 197.404 mo
46.038 197.404 45.506 197.754 45.142 198.454 cv
44.778 199.154 44.61 200.204 44.61 201.604 cv
44.61 203.004 44.778 204.054 45.142 204.754 cv
45.506 205.454 46.038 205.804 46.752 205.804 cv
47.466 205.804 47.998 205.454 48.362 204.754 cv
48.712 204.054 48.894 203.004 48.894 201.604 cv
48.894 200.204 48.712 199.154 48.362 198.454 cv
47.998 197.754 47.466 197.404 46.752 197.404 cv
46.752 196.312 mo
47.886 196.312 48.754 196.774 49.37 197.67 cv
49.972 198.58 50.28 199.896 50.28 201.604 cv
50.28 203.326 49.972 204.642 49.37 205.538 cv
48.754 206.434 47.886 206.882 46.752 206.882 cv
45.604 206.882 44.722 206.434 44.12 205.538 cv
43.518 204.642 43.224 203.326 43.224 201.604 cv
43.224 199.896 43.518 198.58 44.12 197.67 cv
44.722 196.774 45.604 196.312 46.752 196.312 cv
ef
55.632 197.404 mo
54.918 197.404 54.386 197.754 54.022 198.454 cv
53.658 199.154 53.49 200.204 53.49 201.604 cv
53.49 203.004 53.658 204.054 54.022 204.754 cv
54.386 205.454 54.918 205.804 55.632 205.804 cv
56.346 205.804 56.878 205.454 57.242 204.754 cv
57.592 204.054 57.774 203.004 57.774 201.604 cv
57.774 200.204 57.592 199.154 57.242 198.454 cv
56.878 197.754 56.346 197.404 55.632 197.404 cv
55.632 196.312 mo
56.766 196.312 57.634 196.774 58.25 197.67 cv
58.852 198.58 59.16 199.896 59.16 201.604 cv
59.16 203.326 58.852 204.642 58.25 205.538 cv
57.634 206.434 56.766 206.882 55.632 206.882 cv
54.484 206.882 53.602 206.434 53 205.538 cv
52.398 204.642 52.104 203.326 52.104 201.604 cv
52.104 199.896 52.398 198.58 53 197.67 cv
53.602 196.774 54.484 196.312 55.632 196.312 cv
ef
64.512 197.404 mo
63.798 197.404 63.266 197.754 62.902 198.454 cv
62.538 199.154 62.37 200.204 62.37 201.604 cv
62.37 203.004 62.538 204.054 62.902 204.754 cv
63.266 205.454 63.798 205.804 64.512 205.804 cv
65.226 205.804 65.758 205.454 66.122 204.754 cv
66.472 204.054 66.654 203.004 66.654 201.604 cv
66.654 200.204 66.472 199.154 66.122 198.454 cv
65.758 197.754 65.226 197.404 64.512 197.404 cv
64.512 196.312 mo
65.646 196.312 66.514 196.774 67.13 197.67 cv
67.732 198.58 68.04 199.896 68.04 201.604 cv
68.04 203.326 67.732 204.642 67.13 205.538 cv
66.514 206.434 65.646 206.882 64.512 206.882 cv
63.364 206.882 62.482 206.434 61.88 205.538 cv
61.278 204.642 60.984 203.326 60.984 201.604 cv
60.984 199.896 61.278 198.58 61.88 197.67 cv
62.482 196.774 63.364 196.312 64.512 196.312 cv
ef
75.979 169.997 mo
72.479 169.997 li
f
75.979 169.997 mo
72.479 169.997 li
@
37.752 170.416 mo
37.094 170.416 36.576 170.598 36.198 170.948 cv
35.82 171.298 35.638 171.774 35.638 172.39 cv
35.638 173.006 35.82 173.496 36.198 173.846 cv
36.576 174.196 37.094 174.364 37.752 174.364 cv
38.396 174.364 38.914 174.196 39.292 173.832 cv
39.67 173.482 39.866 173.006 39.866 172.39 cv
39.866 171.774 39.67 171.298 39.306 170.948 cv
38.928 170.598 38.41 170.416 37.752 170.416 cv
36.366 169.828 mo
35.778 169.688 35.316 169.408 34.98 169.002 cv
34.644 168.596 34.49 168.106 34.49 167.518 cv
34.49 166.706 34.77 166.062 35.358 165.586 cv
35.932 165.11 36.73 164.872 37.752 164.872 cv
38.76 164.872 39.558 165.11 40.146 165.586 cv
40.72 166.062 41.014 166.706 41.014 167.518 cv
41.014 168.106 40.846 168.596 40.51 169.002 cv
40.174 169.408 39.726 169.688 39.138 169.828 cv
39.796 169.982 40.314 170.29 40.692 170.738 cv
41.056 171.186 41.252 171.746 41.252 172.39 cv
41.252 173.384 40.944 174.14 40.342 174.658 cv
39.726 175.19 38.872 175.442 37.752 175.442 cv
36.618 175.442 35.75 175.19 35.148 174.658 cv
34.546 174.14 34.252 173.384 34.252 172.39 cv
34.252 171.746 34.434 171.186 34.812 170.738 cv
35.176 170.29 35.694 169.982 36.366 169.828 cv
35.862 167.644 mo
35.862 168.176 36.016 168.596 36.352 168.89 cv
36.688 169.184 37.15 169.324 37.752 169.324 cv
38.34 169.324 38.802 169.184 39.138 168.89 cv
39.474 168.596 39.642 168.176 39.642 167.644 cv
39.642 167.112 39.474 166.706 39.138 166.412 cv
38.802 166.118 38.34 165.964 37.752 165.964 cv
37.15 165.964 36.688 166.118 36.352 166.412 cv
36.016 166.706 35.862 167.112 35.862 167.644 cv
ef
46.752 165.964 mo
46.038 165.964 45.506 166.314 45.142 167.014 cv
44.778 167.714 44.61 168.764 44.61 170.164 cv
44.61 171.564 44.778 172.614 45.142 173.314 cv
45.506 174.014 46.038 174.364 46.752 174.364 cv
47.466 174.364 47.998 174.014 48.362 173.314 cv
48.712 172.614 48.894 171.564 48.894 170.164 cv
48.894 168.764 48.712 167.714 48.362 167.014 cv
47.998 166.314 47.466 165.964 46.752 165.964 cv
46.752 164.872 mo
47.886 164.872 48.754 165.334 49.37 166.23 cv
49.972 167.14 50.28 168.456 50.28 170.164 cv
50.28 171.886 49.972 173.202 49.37 174.098 cv
48.754 174.994 47.886 175.442 46.752 175.442 cv
45.604 175.442 44.722 174.994 44.12 174.098 cv
43.518 173.202 43.224 171.886 43.224 170.164 cv
43.224 168.456 43.518 167.14 44.12 166.23 cv
44.722 165.334 45.604 164.872 46.752 164.872 cv
ef
55.632 165.964 mo
54.918 165.964 54.386 166.314 54.022 167.014 cv
53.658 167.714 53.49 168.764 53.49 170.164 cv
53.49 171.564 53.658 172.614 54.022 173.314 cv
54.386 174.014 54.918 174.364 55.632 174.364 cv
56.346 174.364 56.878 174.014 57.242 173.314 cv
57.592 172.614 57.774 171.564 57.774 170.164 cv
57.774 168.764 57.592 167.714 57.242 167.014 cv
56.878 166.314 56.346 165.964 55.632 165.964 cv
55.632 164.872 mo
56.766 164.872 57.634 165.334 58.25 166.23 cv
58.852 167.14 59.16 168.456 59.16 170.164 cv
59.16 171.886 58.852 173.202 58.25 174.098 cv
57.634 174.994 56.766 175.442 55.632 175.442 cv
54.484 175.442 53.602 174.994 53 174.098 cv
52.398 173.202 52.104 171.886 52.104 170.164 cv
52.104 168.456 52.398 167.14 53 166.23 cv
53.602 165.334 54.484 164.872 55.632 164.872 cv
ef
64.512 165.964 mo
63.798 165.964 63.266 166.314 62.902 167.014 cv
62.538 167.714 62.37 168.764 62.37 170.164 cv
62.37 171.564 62.538 172.614 62.902 173.314 cv
63.266 174.014 63.798 174.364 64.512 174.364 cv
65.226 174.364 65.758 174.014 66.122 173.314 cv
66.472 172.614 66.654 171.564 66.654 170.164 cv
66.654 168.764 66.472 167.714 66.122 167.014 cv
65.758 166.314 65.226 165.964 64.512 165.964 cv
64.512 164.872 mo
65.646 164.872 66.514 165.334 67.13 166.23 cv
67.732 167.14 68.04 168.456 68.04 170.164 cv
68.04 171.886 67.732 173.202 67.13 174.098 cv
66.514 174.994 65.646 175.442 64.512 175.442 cv
63.364 175.442 62.482 174.994 61.88 174.098 cv
61.278 173.202 60.984 171.886 60.984 170.164 cv
60.984 168.456 61.278 167.14 61.88 166.23 cv
62.482 165.334 63.364 164.872 64.512 164.872 cv
ef
75.979 138.647 mo
72.479 138.647 li
f
75.979 138.647 mo
72.479 138.647 li
@
26.156 142.778 mo
28.41 142.778 li
28.41 134.994 li
25.96 135.484 li
25.96 134.224 li
28.396 133.734 li
29.782 133.734 li
29.782 142.778 li
32.036 142.778 li
32.036 143.94 li
26.156 143.94 li
26.156 142.778 li
ef
37.752 134.644 mo
37.038 134.644 36.506 134.994 36.142 135.694 cv
35.778 136.394 35.61 137.444 35.61 138.844 cv
35.61 140.244 35.778 141.294 36.142 141.994 cv
36.506 142.694 37.038 143.044 37.752 143.044 cv
38.466 143.044 38.998 142.694 39.362 141.994 cv
39.712 141.294 39.894 140.244 39.894 138.844 cv
39.894 137.444 39.712 136.394 39.362 135.694 cv
38.998 134.994 38.466 134.644 37.752 134.644 cv
37.752 133.552 mo
38.886 133.552 39.754 134.014 40.37 134.91 cv
40.972 135.82 41.28 137.136 41.28 138.844 cv
41.28 140.566 40.972 141.882 40.37 142.778 cv
39.754 143.674 38.886 144.122 37.752 144.122 cv
36.604 144.122 35.722 143.674 35.12 142.778 cv
34.518 141.882 34.224 140.566 34.224 138.844 cv
34.224 137.136 34.518 135.82 35.12 134.91 cv
35.722 134.014 36.604 133.552 37.752 133.552 cv
ef
46.752 134.644 mo
46.038 134.644 45.506 134.994 45.142 135.694 cv
44.778 136.394 44.61 137.444 44.61 138.844 cv
44.61 140.244 44.778 141.294 45.142 141.994 cv
45.506 142.694 46.038 143.044 46.752 143.044 cv
47.466 143.044 47.998 142.694 48.362 141.994 cv
48.712 141.294 48.894 140.244 48.894 138.844 cv
48.894 137.444 48.712 136.394 48.362 135.694 cv
47.998 134.994 47.466 134.644 46.752 134.644 cv
46.752 133.552 mo
47.886 133.552 48.754 134.014 49.37 134.91 cv
49.972 135.82 50.28 137.136 50.28 138.844 cv
50.28 140.566 49.972 141.882 49.37 142.778 cv
48.754 143.674 47.886 144.122 46.752 144.122 cv
45.604 144.122 44.722 143.674 44.12 142.778 cv
43.518 141.882 43.224 140.566 43.224 138.844 cv
43.224 137.136 43.518 135.82 44.12 134.91 cv
44.722 134.014 45.604 133.552 46.752 133.552 cv
ef
55.632 134.644 mo
54.918 134.644 54.386 134.994 54.022 135.694 cv
53.658 136.394 53.49 137.444 53.49 138.844 cv
53.49 140.244 53.658 141.294 54.022 141.994 cv
54.386 142.694 54.918 143.044 55.632 143.044 cv
56.346 143.044 56.878 142.694 57.242 141.994 cv
57.592 141.294 57.774 140.244 57.774 138.844 cv
57.774 137.444 57.592 136.394 57.242 135.694 cv
56.878 134.994 56.346 134.644 55.632 134.644 cv
55.632 133.552 mo
56.766 133.552 57.634 134.014 58.25 134.91 cv
58.852 135.82 59.16 137.136 59.16 138.844 cv
59.16 140.566 58.852 141.882 58.25 142.778 cv
57.634 143.674 56.766 144.122 55.632 144.122 cv
54.484 144.122 53.602 143.674 53 142.778 cv
52.398 141.882 52.104 140.566 52.104 138.844 cv
52.104 137.136 52.398 135.82 53 134.91 cv
53.602 134.014 54.484 133.552 55.632 133.552 cv
ef
64.512 134.644 mo
63.798 134.644 63.266 134.994 62.902 135.694 cv
62.538 136.394 62.37 137.444 62.37 138.844 cv
62.37 140.244 62.538 141.294 62.902 141.994 cv
63.266 142.694 63.798 143.044 64.512 143.044 cv
65.226 143.044 65.758 142.694 66.122 141.994 cv
66.472 141.294 66.654 140.244 66.654 138.844 cv
66.654 137.444 66.472 136.394 66.122 135.694 cv
65.758 134.994 65.226 134.644 64.512 134.644 cv
64.512 133.552 mo
65.646 133.552 66.514 134.014 67.13 134.91 cv
67.732 135.82 68.04 137.136 68.04 138.844 cv
68.04 140.566 67.732 141.882 67.13 142.778 cv
66.514 143.674 65.646 144.122 64.512 144.122 cv
63.364 144.122 62.482 143.674 61.88 142.778 cv
61.278 141.882 60.984 140.566 60.984 138.844 cv
60.984 137.136 61.278 135.82 61.88 134.91 cv
62.482 134.014 63.364 133.552 64.512 133.552 cv
ef
75.979 107.297 mo
72.479 107.297 li
f
75.979 107.297 mo
72.479 107.297 li
@
26.156 111.458 mo
28.41 111.458 li
28.41 103.674 li
25.96 104.164 li
25.96 102.904 li
28.396 102.414 li
29.782 102.414 li
29.782 111.458 li
32.036 111.458 li
32.036 112.62 li
26.156 112.62 li
26.156 111.458 li
ef
35.988 111.458 mo
40.804 111.458 li
40.804 112.62 li
34.322 112.62 li
34.322 111.458 li
34.84 110.926 35.554 110.198 36.464 109.274 cv
37.36 108.364 37.934 107.776 38.172 107.51 cv
38.62 107.02 38.928 106.6 39.096 106.25 cv
39.264 105.914 39.362 105.564 39.362 105.228 cv
39.362 104.696 39.166 104.248 38.788 103.912 cv
38.41 103.576 37.92 103.394 37.304 103.394 cv
36.87 103.394 36.408 103.478 35.932 103.618 cv
35.456 103.772 34.938 103.996 34.392 104.304 cv
34.392 102.904 li
34.952 102.68 35.47 102.512 35.946 102.4 cv
36.422 102.288 36.87 102.232 37.276 102.232 cv
38.326 102.232 39.166 102.498 39.796 103.03 cv
40.426 103.562 40.748 104.262 40.748 105.144 cv
40.748 105.564 40.664 105.97 40.51 106.334 cv
40.356 106.712 40.076 107.16 39.656 107.664 cv
39.544 107.804 39.18 108.182 38.564 108.812 cv
37.948 109.442 37.094 110.324 35.988 111.458 cv
ef
46.752 103.324 mo
46.038 103.324 45.506 103.674 45.142 104.374 cv
44.778 105.074 44.61 106.124 44.61 107.524 cv
44.61 108.924 44.778 109.974 45.142 110.674 cv
45.506 111.374 46.038 111.724 46.752 111.724 cv
47.466 111.724 47.998 111.374 48.362 110.674 cv
48.712 109.974 48.894 108.924 48.894 107.524 cv
48.894 106.124 48.712 105.074 48.362 104.374 cv
47.998 103.674 47.466 103.324 46.752 103.324 cv
46.752 102.232 mo
47.886 102.232 48.754 102.694 49.37 103.59 cv
49.972 104.5 50.28 105.816 50.28 107.524 cv
50.28 109.246 49.972 110.562 49.37 111.458 cv
48.754 112.354 47.886 112.802 46.752 112.802 cv
45.604 112.802 44.722 112.354 44.12 111.458 cv
43.518 110.562 43.224 109.246 43.224 107.524 cv
43.224 105.816 43.518 104.5 44.12 103.59 cv
44.722 102.694 45.604 102.232 46.752 102.232 cv
ef
55.632 103.324 mo
54.918 103.324 54.386 103.674 54.022 104.374 cv
53.658 105.074 53.49 106.124 53.49 107.524 cv
53.49 108.924 53.658 109.974 54.022 110.674 cv
54.386 111.374 54.918 111.724 55.632 111.724 cv
56.346 111.724 56.878 111.374 57.242 110.674 cv
57.592 109.974 57.774 108.924 57.774 107.524 cv
57.774 106.124 57.592 105.074 57.242 104.374 cv
56.878 103.674 56.346 103.324 55.632 103.324 cv
55.632 102.232 mo
56.766 102.232 57.634 102.694 58.25 103.59 cv
58.852 104.5 59.16 105.816 59.16 107.524 cv
59.16 109.246 58.852 110.562 58.25 111.458 cv
57.634 112.354 56.766 112.802 55.632 112.802 cv
54.484 112.802 53.602 112.354 53 111.458 cv
52.398 110.562 52.104 109.246 52.104 107.524 cv
52.104 105.816 52.398 104.5 53 103.59 cv
53.602 102.694 54.484 102.232 55.632 102.232 cv
ef
64.512 103.324 mo
63.798 103.324 63.266 103.674 62.902 104.374 cv
62.538 105.074 62.37 106.124 62.37 107.524 cv
62.37 108.924 62.538 109.974 62.902 110.674 cv
63.266 111.374 63.798 111.724 64.512 111.724 cv
65.226 111.724 65.758 111.374 66.122 110.674 cv
66.472 109.974 66.654 108.924 66.654 107.524 cv
66.654 106.124 66.472 105.074 66.122 104.374 cv
65.758 103.674 65.226 103.324 64.512 103.324 cv
64.512 102.232 mo
65.646 102.232 66.514 102.694 67.13 103.59 cv
67.732 104.5 68.04 105.816 68.04 107.524 cv
68.04 109.246 67.732 110.562 67.13 111.458 cv
66.514 112.354 65.646 112.802 64.512 112.802 cv
63.364 112.802 62.482 112.354 61.88 111.458 cv
61.278 110.562 60.984 109.246 60.984 107.524 cv
60.984 105.816 61.278 104.5 61.88 103.59 cv
62.482 102.694 63.364 102.232 64.512 102.232 cv
ef
75.979 75.946 mo
72.479 75.946 li
f
75.979 75.946 mo
72.479 75.946 li
@
26.156 80.138 mo
28.41 80.138 li
28.41 72.354 li
25.96 72.844 li
25.96 71.584 li
28.396 71.094 li
29.782 71.094 li
29.782 80.138 li
32.036 80.138 li
32.036 81.3 li
26.156 81.3 li
26.156 80.138 li
ef
38.592 72.298 mo
35.106 77.744 li
38.592 77.744 li
38.592 72.298 li
38.228 71.094 mo
39.964 71.094 li
39.964 77.744 li
41.42 77.744 li
41.42 78.892 li
39.964 78.892 li
39.964 81.3 li
38.592 81.3 li
38.592 78.892 li
33.986 78.892 li
33.986 77.562 li
38.228 71.094 li
ef
46.752 72.004 mo
46.038 72.004 45.506 72.354 45.142 73.054 cv
44.778 73.754 44.61 74.804 44.61 76.204 cv
44.61 77.604 44.778 78.654 45.142 79.354 cv
45.506 80.054 46.038 80.404 46.752 80.404 cv
47.466 80.404 47.998 80.054 48.362 79.354 cv
48.712 78.654 48.894 77.604 48.894 76.204 cv
48.894 74.804 48.712 73.754 48.362 73.054 cv
47.998 72.354 47.466 72.004 46.752 72.004 cv
46.752 70.912 mo
47.886 70.912 48.754 71.374 49.37 72.27 cv
49.972 73.18 50.28 74.496 50.28 76.204 cv
50.28 77.926 49.972 79.242 49.37 80.138 cv
48.754 81.034 47.886 81.482 46.752 81.482 cv
45.604 81.482 44.722 81.034 44.12 80.138 cv
43.518 79.242 43.224 77.926 43.224 76.204 cv
43.224 74.496 43.518 73.18 44.12 72.27 cv
44.722 71.374 45.604 70.912 46.752 70.912 cv
ef
55.632 72.004 mo
54.918 72.004 54.386 72.354 54.022 73.054 cv
53.658 73.754 53.49 74.804 53.49 76.204 cv
53.49 77.604 53.658 78.654 54.022 79.354 cv
54.386 80.054 54.918 80.404 55.632 80.404 cv
56.346 80.404 56.878 80.054 57.242 79.354 cv
57.592 78.654 57.774 77.604 57.774 76.204 cv
57.774 74.804 57.592 73.754 57.242 73.054 cv
56.878 72.354 56.346 72.004 55.632 72.004 cv
55.632 70.912 mo
56.766 70.912 57.634 71.374 58.25 72.27 cv
58.852 73.18 59.16 74.496 59.16 76.204 cv
59.16 77.926 58.852 79.242 58.25 80.138 cv
57.634 81.034 56.766 81.482 55.632 81.482 cv
54.484 81.482 53.602 81.034 53 80.138 cv
52.398 79.242 52.104 77.926 52.104 76.204 cv
52.104 74.496 52.398 73.18 53 72.27 cv
53.602 71.374 54.484 70.912 55.632 70.912 cv
ef
64.512 72.004 mo
63.798 72.004 63.266 72.354 62.902 73.054 cv
62.538 73.754 62.37 74.804 62.37 76.204 cv
62.37 77.604 62.538 78.654 62.902 79.354 cv
63.266 80.054 63.798 80.404 64.512 80.404 cv
65.226 80.404 65.758 80.054 66.122 79.354 cv
66.472 78.654 66.654 77.604 66.654 76.204 cv
66.654 74.804 66.472 73.754 66.122 73.054 cv
65.758 72.354 65.226 72.004 64.512 72.004 cv
64.512 70.912 mo
65.646 70.912 66.514 71.374 67.13 72.27 cv
67.732 73.18 68.04 74.496 68.04 76.204 cv
68.04 77.926 67.732 79.242 67.13 80.138 cv
66.514 81.034 65.646 81.482 64.512 81.482 cv
63.364 81.482 62.482 81.034 61.88 80.138 cv
61.278 79.242 60.984 77.926 60.984 76.204 cv
60.984 74.496 61.278 73.18 61.88 72.27 cv
62.482 71.374 63.364 70.912 64.512 70.912 cv
ef
75.979 44.596 mo
72.479 44.596 li
f
75.979 44.596 mo
72.479 44.596 li
@
26.156 48.698 mo
28.41 48.698 li
28.41 40.914 li
25.96 41.404 li
25.96 40.144 li
28.396 39.654 li
29.782 39.654 li
29.782 48.698 li
32.036 48.698 li
32.036 49.86 li
26.156 49.86 li
26.156 48.698 li
ef
37.92 44.204 mo
37.304 44.204 36.814 44.428 36.45 44.848 cv
36.086 45.268 35.904 45.856 35.904 46.584 cv
35.904 47.326 36.086 47.914 36.45 48.334 cv
36.814 48.754 37.304 48.964 37.92 48.964 cv
38.536 48.964 39.026 48.754 39.39 48.334 cv
39.754 47.914 39.936 47.326 39.936 46.584 cv
39.936 45.856 39.754 45.268 39.39 44.848 cv
39.026 44.428 38.536 44.204 37.92 44.204 cv
40.664 39.878 mo
40.664 41.138 li
40.314 40.97 39.964 40.844 39.614 40.76 cv
39.25 40.676 38.9 40.634 38.564 40.634 cv
37.64 40.634 36.94 40.942 36.464 41.558 cv
35.988 42.174 35.708 43.112 35.652 44.344 cv
35.918 43.952 36.254 43.644 36.66 43.434 cv
37.066 43.224 37.514 43.112 38.004 43.112 cv
39.026 43.112 39.838 43.434 40.426 44.05 cv
41.014 44.666 41.322 45.52 41.322 46.584 cv
41.322 47.634 41 48.474 40.384 49.104 cv
39.768 49.734 38.942 50.042 37.92 50.042 cv
36.744 50.042 35.834 49.594 35.218 48.698 cv
34.588 47.802 34.28 46.486 34.28 44.764 cv
34.28 43.154 34.658 41.866 35.428 40.914 cv
36.184 39.962 37.22 39.472 38.508 39.472 cv
38.844 39.472 39.194 39.514 39.558 39.57 cv
39.908 39.64 40.272 39.738 40.664 39.878 cv
ef
46.752 40.564 mo
46.038 40.564 45.506 40.914 45.142 41.614 cv
44.778 42.314 44.61 43.364 44.61 44.764 cv
44.61 46.164 44.778 47.214 45.142 47.914 cv
45.506 48.614 46.038 48.964 46.752 48.964 cv
47.466 48.964 47.998 48.614 48.362 47.914 cv
48.712 47.214 48.894 46.164 48.894 44.764 cv
48.894 43.364 48.712 42.314 48.362 41.614 cv
47.998 40.914 47.466 40.564 46.752 40.564 cv
46.752 39.472 mo
47.886 39.472 48.754 39.934 49.37 40.83 cv
49.972 41.74 50.28 43.056 50.28 44.764 cv
50.28 46.486 49.972 47.802 49.37 48.698 cv
48.754 49.594 47.886 50.042 46.752 50.042 cv
45.604 50.042 44.722 49.594 44.12 48.698 cv
43.518 47.802 43.224 46.486 43.224 44.764 cv
43.224 43.056 43.518 41.74 44.12 40.83 cv
44.722 39.934 45.604 39.472 46.752 39.472 cv
ef
55.632 40.564 mo
54.918 40.564 54.386 40.914 54.022 41.614 cv
53.658 42.314 53.49 43.364 53.49 44.764 cv
53.49 46.164 53.658 47.214 54.022 47.914 cv
54.386 48.614 54.918 48.964 55.632 48.964 cv
56.346 48.964 56.878 48.614 57.242 47.914 cv
57.592 47.214 57.774 46.164 57.774 44.764 cv
57.774 43.364 57.592 42.314 57.242 41.614 cv
56.878 40.914 56.346 40.564 55.632 40.564 cv
55.632 39.472 mo
56.766 39.472 57.634 39.934 58.25 40.83 cv
58.852 41.74 59.16 43.056 59.16 44.764 cv
59.16 46.486 58.852 47.802 58.25 48.698 cv
57.634 49.594 56.766 50.042 55.632 50.042 cv
54.484 50.042 53.602 49.594 53 48.698 cv
52.398 47.802 52.104 46.486 52.104 44.764 cv
52.104 43.056 52.398 41.74 53 40.83 cv
53.602 39.934 54.484 39.472 55.632 39.472 cv
ef
64.512 40.564 mo
63.798 40.564 63.266 40.914 62.902 41.614 cv
62.538 42.314 62.37 43.364 62.37 44.764 cv
62.37 46.164 62.538 47.214 62.902 47.914 cv
63.266 48.614 63.798 48.964 64.512 48.964 cv
65.226 48.964 65.758 48.614 66.122 47.914 cv
66.472 47.214 66.654 46.164 66.654 44.764 cv
66.654 43.364 66.472 42.314 66.122 41.614 cv
65.758 40.914 65.226 40.564 64.512 40.564 cv
64.512 39.472 mo
65.646 39.472 66.514 39.934 67.13 40.83 cv
67.732 41.74 68.04 43.056 68.04 44.764 cv
68.04 46.486 67.732 47.802 67.13 48.698 cv
66.514 49.594 65.646 50.042 64.512 50.042 cv
63.364 50.042 62.482 49.594 61.88 48.698 cv
61.278 47.802 60.984 46.486 60.984 44.764 cv
60.984 43.056 61.278 41.74 61.88 40.83 cv
62.482 39.934 63.364 39.472 64.512 39.472 cv
ef
75.979 13.246 mo
72.479 13.246 li
f
75.979 13.246 mo
72.479 13.246 li
@
26.156 17.378 mo
28.41 17.378 li
28.41 9.59399 li
25.96 10.084 li
25.96 8.82401 li
28.396 8.33398 li
29.782 8.33398 li
29.782 17.378 li
32.036 17.378 li
32.036 18.54 li
26.156 18.54 li
26.156 17.378 li
ef
37.752 13.696 mo
37.094 13.696 36.576 13.878 36.198 14.228 cv
35.82 14.578 35.638 15.054 35.638 15.67 cv
35.638 16.286 35.82 16.776 36.198 17.126 cv
36.576 17.476 37.094 17.644 37.752 17.644 cv
38.396 17.644 38.914 17.476 39.292 17.112 cv
39.67 16.762 39.866 16.286 39.866 15.67 cv
39.866 15.054 39.67 14.578 39.306 14.228 cv
38.928 13.878 38.41 13.696 37.752 13.696 cv
36.366 13.108 mo
35.778 12.968 35.316 12.688 34.98 12.282 cv
34.644 11.876 34.49 11.386 34.49 10.798 cv
34.49 9.98602 34.77 9.34201 35.358 8.86603 cv
35.932 8.39001 36.73 8.15201 37.752 8.15201 cv
38.76 8.15201 39.558 8.39001 40.146 8.86603 cv
40.72 9.34201 41.014 9.98602 41.014 10.798 cv
41.014 11.386 40.846 11.876 40.51 12.282 cv
40.174 12.688 39.726 12.968 39.138 13.108 cv
39.796 13.262 40.314 13.57 40.692 14.018 cv
41.056 14.466 41.252 15.026 41.252 15.67 cv
41.252 16.664 40.944 17.42 40.342 17.938 cv
39.726 18.47 38.872 18.722 37.752 18.722 cv
36.618 18.722 35.75 18.47 35.148 17.938 cv
34.546 17.42 34.252 16.664 34.252 15.67 cv
34.252 15.026 34.434 14.466 34.812 14.018 cv
35.176 13.57 35.694 13.262 36.366 13.108 cv
35.862 10.924 mo
35.862 11.456 36.016 11.876 36.352 12.17 cv
36.688 12.464 37.15 12.604 37.752 12.604 cv
38.34 12.604 38.802 12.464 39.138 12.17 cv
39.474 11.876 39.642 11.456 39.642 10.924 cv
39.642 10.392 39.474 9.98602 39.138 9.69202 cv
38.802 9.39801 38.34 9.24402 37.752 9.24402 cv
37.15 9.24402 36.688 9.39801 36.352 9.69202 cv
36.016 9.98602 35.862 10.392 35.862 10.924 cv
ef
46.752 9.24399 mo
46.038 9.24399 45.506 9.59399 45.142 10.294 cv
44.778 10.994 44.61 12.044 44.61 13.444 cv
44.61 14.844 44.778 15.894 45.142 16.594 cv
45.506 17.294 46.038 17.644 46.752 17.644 cv
47.466 17.644 47.998 17.294 48.362 16.594 cv
48.712 15.894 48.894 14.844 48.894 13.444 cv
48.894 12.044 48.712 10.994 48.362 10.294 cv
47.998 9.59399 47.466 9.24399 46.752 9.24399 cv
46.752 8.15198 mo
47.886 8.15198 48.754 8.61398 49.37 9.50998 cv
49.972 10.42 50.28 11.736 50.28 13.444 cv
50.28 15.166 49.972 16.482 49.37 17.378 cv
48.754 18.274 47.886 18.722 46.752 18.722 cv
45.604 18.722 44.722 18.274 44.12 17.378 cv
43.518 16.482 43.224 15.166 43.224 13.444 cv
43.224 11.736 43.518 10.42 44.12 9.50998 cv
44.722 8.61398 45.604 8.15198 46.752 8.15198 cv
ef
55.632 9.24399 mo
54.918 9.24399 54.386 9.59399 54.022 10.294 cv
53.658 10.994 53.49 12.044 53.49 13.444 cv
53.49 14.844 53.658 15.894 54.022 16.594 cv
54.386 17.294 54.918 17.644 55.632 17.644 cv
56.346 17.644 56.878 17.294 57.242 16.594 cv
57.592 15.894 57.774 14.844 57.774 13.444 cv
57.774 12.044 57.592 10.994 57.242 10.294 cv
56.878 9.59399 56.346 9.24399 55.632 9.24399 cv
55.632 8.15198 mo
56.766 8.15198 57.634 8.61398 58.25 9.50998 cv
58.852 10.42 59.16 11.736 59.16 13.444 cv
59.16 15.166 58.852 16.482 58.25 17.378 cv
57.634 18.274 56.766 18.722 55.632 18.722 cv
54.484 18.722 53.602 18.274 53 17.378 cv
52.398 16.482 52.104 15.166 52.104 13.444 cv
52.104 11.736 52.398 10.42 53 9.50998 cv
53.602 8.61398 54.484 8.15198 55.632 8.15198 cv
ef
64.512 9.24399 mo
63.798 9.24399 63.266 9.59399 62.902 10.294 cv
62.538 10.994 62.37 12.044 62.37 13.444 cv
62.37 14.844 62.538 15.894 62.902 16.594 cv
63.266 17.294 63.798 17.644 64.512 17.644 cv
65.226 17.644 65.758 17.294 66.122 16.594 cv
66.472 15.894 66.654 14.844 66.654 13.444 cv
66.654 12.044 66.472 10.994 66.122 10.294 cv
65.758 9.59399 65.226 9.24399 64.512 9.24399 cv
64.512 8.15198 mo
65.646 8.15198 66.514 8.61398 67.13 9.50998 cv
67.732 10.42 68.04 11.736 68.04 13.444 cv
68.04 15.166 67.732 16.482 67.13 17.378 cv
66.514 18.274 65.646 18.722 64.512 18.722 cv
63.364 18.722 62.482 18.274 61.88 17.378 cv
61.278 16.482 60.984 15.166 60.984 13.444 cv
60.984 11.736 61.278 10.42 61.88 9.50998 cv
62.482 8.61398 63.364 8.15198 64.512 8.15198 cv
ef
7.374 221.368 mo
7.374 212.744 li
8.536 212.744 li
8.536 216.37 li
17.58 216.37 li
17.58 217.756 li
8.536 217.756 li
8.536 221.368 li
7.374 221.368 li
ef
13.73 208.018 mo
13.73 209.04 13.856 209.74 14.08 210.132 cv
14.318 210.524 14.71 210.72 15.27 210.72 cv
15.718 210.72 16.082 210.58 16.334 210.286 cv
16.6 209.992 16.726 209.586 16.726 209.082 cv
16.726 208.382 16.488 207.822 15.984 207.402 cv
15.494 206.982 14.836 206.772 14.01 206.772 cv
13.73 206.772 li
13.73 208.018 li
13.212 205.512 mo
17.58 205.512 li
17.58 206.772 li
16.418 206.772 li
16.894 207.066 17.23 207.43 17.44 207.85 cv
17.65 208.27 17.762 208.802 17.762 209.418 cv
17.762 210.202 17.552 210.832 17.118 211.294 cv
16.684 211.756 16.096 211.98 15.354 211.98 cv
14.5 211.98 13.856 211.7 13.408 211.112 cv
12.974 210.538 12.75 209.684 12.75 208.536 cv
12.75 206.772 li
12.624 206.772 li
12.05 206.772 11.602 206.968 11.28 207.346 cv
10.972 207.724 10.804 208.256 10.804 208.942 cv
10.804 209.39 10.86 209.81 10.972 210.23 cv
11.084 210.65 11.238 211.042 11.434 211.42 cv
10.272 211.42 li
10.104 210.972 9.964 210.524 9.88 210.09 cv
9.796 209.656 9.74 209.236 9.74 208.816 cv
9.74 207.71 10.034 206.884 10.608 206.338 cv
11.182 205.792 12.05 205.512 13.212 205.512 cv
ef
10.146 198.098 mo
11.336 198.098 li
11.168 198.462 11.028 198.826 10.93 199.204 cv
10.846 199.596 10.79 199.988 10.79 200.394 cv
10.79 201.024 10.888 201.5 11.084 201.808 cv
11.28 202.116 11.56 202.27 11.938 202.27 cv
12.232 202.27 12.456 202.158 12.624 201.934 cv
12.792 201.71 12.96 201.262 13.1 200.59 cv
13.198 200.156 li
13.394 199.26 13.674 198.63 14.01 198.252 cv
14.36 197.888 14.85 197.692 15.466 197.692 cv
16.18 197.692 16.74 197.972 17.146 198.532 cv
17.566 199.092 17.762 199.876 17.762 200.856 cv
17.762 201.276 17.72 201.696 17.65 202.144 cv
17.58 202.592 17.468 203.054 17.3 203.544 cv
15.998 203.544 li
16.25 203.082 16.432 202.62 16.544 202.172 cv
16.67 201.724 16.726 201.276 16.726 200.828 cv
16.726 200.24 16.628 199.778 16.432 199.456 cv
16.236 199.148 15.942 198.98 15.564 198.98 cv
15.228 198.98 14.962 199.106 14.78 199.33 cv
14.598 199.554 14.416 200.058 14.248 200.842 cv
14.15 201.276 li
13.982 202.06 13.73 202.634 13.394 202.97 cv
13.058 203.32 12.596 203.488 11.994 203.488 cv
11.28 203.488 10.72 203.236 10.328 202.732 cv
9.936 202.228 9.74 201.5 9.74 200.548 cv
9.74 200.086 9.782 199.652 9.852 199.232 cv
9.922 198.826 10.02 198.448 10.146 198.098 cv
ef
6.94 195.706 mo
6.94 194.446 li
13.226 194.446 li
9.922 190.694 li
9.922 189.084 li
13.506 193.144 li
17.58 188.916 li
17.58 190.554 li
13.842 194.446 li
17.58 194.446 li
17.58 195.706 li
6.94 195.706 li
ef
11.098 178.626 mo
11.014 178.766 10.958 178.92 10.916 179.088 cv
10.888 179.256 10.86 179.438 10.86 179.634 cv
10.86 180.348 11.098 180.894 11.56 181.272 cv
12.022 181.664 12.68 181.846 13.548 181.846 cv
17.58 181.846 li
17.58 183.106 li
9.922 183.106 li
9.922 181.846 li
11.112 181.846 li
10.65 181.594 10.3 181.244 10.076 180.824 cv
9.852 180.404 9.74 179.886 9.74 179.27 cv
9.74 179.186 9.754 179.088 9.754 178.976 cv
9.768 178.878 9.782 178.766 9.81 178.626 cv
11.098 178.626 li
ef
13.436 170.752 mo
14.052 170.752 li
14.052 176.534 li
14.92 176.478 15.592 176.226 16.04 175.75 cv
16.488 175.288 16.712 174.644 16.712 173.804 cv
16.712 173.328 16.656 172.852 16.544 172.404 cv
16.432 171.956 16.25 171.494 15.998 171.046 cv
17.188 171.046 li
17.384 171.494 17.538 171.956 17.622 172.432 cv
17.706 172.908 17.762 173.398 17.762 173.874 cv
17.762 175.106 17.412 176.072 16.712 176.786 cv
16.012 177.5 15.046 177.85 13.828 177.85 cv
12.582 177.85 11.588 177.514 10.846 176.842 cv
10.118 176.17 9.74 175.246 9.74 174.098 cv
9.74 173.062 10.076 172.25 10.734 171.648 cv
11.406 171.06 12.302 170.752 13.436 170.752 cv
13.072 172.012 mo
12.386 172.026 11.84 172.222 11.42 172.586 cv
11.014 172.964 10.804 173.468 10.804 174.084 cv
10.804 174.784 11.014 175.344 11.406 175.764 cv
11.798 176.184 12.358 176.436 13.072 176.492 cv
13.072 172.012 li
ef
13.73 165.298 mo
13.73 166.32 13.856 167.02 14.08 167.412 cv
14.318 167.804 14.71 168 15.27 168 cv
15.718 168 16.082 167.86 16.334 167.566 cv
16.6 167.272 16.726 166.866 16.726 166.362 cv
16.726 165.662 16.488 165.102 15.984 164.682 cv
15.494 164.262 14.836 164.052 14.01 164.052 cv
13.73 164.052 li
13.73 165.298 li
13.212 162.792 mo
17.58 162.792 li
17.58 164.052 li
16.418 164.052 li
16.894 164.346 17.23 164.71 17.44 165.13 cv
17.65 165.55 17.762 166.082 17.762 166.698 cv
17.762 167.482 17.552 168.112 17.118 168.574 cv
16.684 169.036 16.096 169.26 15.354 169.26 cv
14.5 169.26 13.856 168.98 13.408 168.392 cv
12.974 167.818 12.75 166.964 12.75 165.816 cv
12.75 164.052 li
12.624 164.052 li
12.05 164.052 11.602 164.248 11.28 164.626 cv
10.972 165.004 10.804 165.536 10.804 166.222 cv
10.804 166.67 10.86 167.09 10.972 167.51 cv
11.084 167.93 11.238 168.322 11.434 168.7 cv
10.272 168.7 li
10.104 168.252 9.964 167.804 9.88 167.37 cv
9.796 166.936 9.74 166.516 9.74 166.096 cv
9.74 164.99 10.034 164.164 10.608 163.618 cv
11.182 163.072 12.05 162.792 13.212 162.792 cv
ef
11.084 155.104 mo
6.94 155.104 li
6.94 153.844 li
17.58 153.844 li
17.58 155.104 li
16.432 155.104 li
16.894 155.37 17.23 155.706 17.44 156.112 cv
17.65 156.518 17.762 156.994 17.762 157.554 cv
17.762 158.478 17.398 159.234 16.67 159.822 cv
15.942 160.41 14.962 160.69 13.758 160.69 cv
12.554 160.69 11.588 160.41 10.846 159.822 cv
10.118 159.234 9.74 158.478 9.74 157.554 cv
9.74 156.994 9.852 156.518 10.076 156.112 cv
10.3 155.706 10.636 155.37 11.084 155.104 cv
13.758 159.388 mo
14.682 159.388 15.41 159.206 15.942 158.828 cv
16.474 158.45 16.726 157.918 16.726 157.246 cv
16.726 156.588 16.474 156.07 15.942 155.678 cv
15.41 155.3 14.682 155.104 13.758 155.104 cv
12.834 155.104 12.12 155.3 11.588 155.678 cv
11.056 156.07 10.79 156.588 10.79 157.246 cv
10.79 157.918 11.056 158.45 11.588 158.828 cv
12.12 159.206 12.834 159.388 13.758 159.388 cv
ef
9.922 151.264 mo
9.922 150.004 li
17.58 150.004 li
17.58 151.264 li
9.922 151.264 li
6.94 151.264 mo
8.536 151.264 mo
6.94 151.264 li
6.94 150.004 li
8.536 150.004 li
cp
ef
12.96 141.054 mo
17.58 141.054 li
17.58 142.314 li
13.002 142.314 li
12.274 142.314 11.742 142.468 11.378 142.748 cv
11.014 143.028 10.832 143.448 10.832 144.008 cv
10.832 144.694 11.056 145.226 11.49 145.618 cv
11.924 146.01 12.512 146.206 13.254 146.206 cv
17.58 146.206 li
17.58 147.466 li
9.922 147.466 li
9.922 146.206 li
11.112 146.206 li
10.664 145.912 10.314 145.562 10.09 145.142 cv
9.866 144.736 9.74 144.26 9.74 143.728 cv
9.74 142.86 10.02 142.188 10.566 141.74 cv
11.112 141.292 11.91 141.054 12.96 141.054 cv
ef
13.66 133.504 mo
12.764 133.504 12.05 133.7 11.546 134.064 cv
11.042 134.442 10.79 134.974 10.79 135.646 cv
10.79 136.318 11.042 136.85 11.546 137.228 cv
12.05 137.606 12.764 137.788 13.66 137.788 cv
14.57 137.788 15.27 137.606 15.774 137.228 cv
16.278 136.85 16.53 136.318 16.53 135.646 cv
16.53 134.974 16.278 134.442 15.774 134.064 cv
15.27 133.7 14.57 133.504 13.66 133.504 cv
16.628 132.244 mo
17.916 132.244 18.882 132.538 19.526 133.112 cv
20.156 133.7 20.478 134.582 20.478 135.772 cv
20.478 136.22 20.436 136.626 20.38 137.018 cv
20.31 137.41 20.212 137.802 20.072 138.166 cv
18.854 138.166 li
19.05 137.802 19.19 137.438 19.288 137.074 cv
19.386 136.71 19.442 136.346 19.442 135.968 cv
19.442 135.156 19.218 134.54 18.798 134.12 cv
18.364 133.714 17.72 133.504 16.852 133.504 cv
16.236 133.504 li
16.684 133.77 17.02 134.106 17.244 134.512 cv
17.468 134.918 17.58 135.394 17.58 135.954 cv
17.58 136.906 17.23 137.662 16.516 138.236 cv
15.802 138.81 14.85 139.09 13.66 139.09 cv
12.484 139.09 11.532 138.81 10.818 138.236 cv
10.104 137.662 9.74 136.906 9.74 135.954 cv
9.74 135.394 9.852 134.918 10.076 134.512 cv
10.3 134.106 10.636 133.77 11.084 133.504 cv
9.922 133.504 li
9.922 132.244 li
16.628 132.244 li
ef
7.752 123.978 mo
9.922 123.978 li
9.922 121.388 li
10.902 121.388 li
10.902 123.978 li
15.06 123.978 li
15.69 123.978 16.096 123.894 16.264 123.726 cv
16.446 123.558 16.53 123.208 16.53 122.676 cv
16.53 121.388 li
17.58 121.388 li
17.58 122.676 li
17.58 123.656 17.398 124.328 17.034 124.692 cv
16.67 125.056 16.012 125.238 15.06 125.238 cv
10.902 125.238 li
10.902 126.162 li
9.922 126.162 li
9.922 125.238 li
7.752 125.238 li
7.752 123.978 li
ef
9.922 119.704 mo
9.922 118.444 li
17.58 118.444 li
17.58 119.704 li
9.922 119.704 li
6.94 119.704 mo
8.536 119.704 mo
6.94 119.704 li
6.94 118.444 li
8.536 118.444 li
cp
ef
11.392 109.78 mo
10.832 109.472 10.426 109.094 10.146 108.66 cv
9.88 108.226 9.74 107.708 9.74 107.106 cv
9.74 106.322 10.02 105.706 10.58 105.272 cv
11.14 104.838 11.938 104.614 12.96 104.614 cv
17.58 104.614 li
17.58 105.874 li
13.002 105.874 li
12.274 105.874 11.728 106.014 11.364 106.266 cv
11.014 106.532 10.832 106.924 10.832 107.456 cv
10.832 108.114 11.056 108.632 11.49 109.01 cv
11.924 109.388 12.512 109.57 13.254 109.57 cv
17.58 109.57 li
17.58 110.83 li
13.002 110.83 li
12.274 110.83 11.728 110.97 11.364 111.222 cv
11.014 111.488 10.832 111.894 10.832 112.426 cv
10.832 113.07 11.056 113.588 11.49 113.966 cv
11.924 114.344 12.512 114.526 13.254 114.526 cv
17.58 114.526 li
17.58 115.786 li
9.922 115.786 li
9.922 114.526 li
11.112 114.526 li
10.65 114.246 10.3 113.896 10.076 113.49 cv
9.852 113.098 9.74 112.622 9.74 112.062 cv
9.74 111.502 9.88 111.04 10.16 110.648 cv
10.44 110.256 10.86 109.976 11.392 109.78 cv
ef
13.436 95.632 mo
14.052 95.632 li
14.052 101.414 li
14.92 101.358 15.592 101.106 16.04 100.63 cv
16.488 100.168 16.712 99.524 16.712 98.684 cv
16.712 98.208 16.656 97.732 16.544 97.284 cv
16.432 96.836 16.25 96.374 15.998 95.926 cv
17.188 95.926 li
17.384 96.374 17.538 96.836 17.622 97.312 cv
17.706 97.788 17.762 98.278 17.762 98.754 cv
17.762 99.986 17.412 100.952 16.712 101.666 cv
16.012 102.38 15.046 102.73 13.828 102.73 cv
12.582 102.73 11.588 102.394 10.846 101.722 cv
10.118 101.05 9.74 100.126 9.74 98.978 cv
9.74 97.942 10.076 97.13 10.734 96.528 cv
11.406 95.94 12.302 95.632 13.436 95.632 cv
13.072 96.892 mo
12.386 96.906 11.84 97.102 11.42 97.466 cv
11.014 97.844 10.804 98.348 10.804 98.964 cv
10.804 99.664 11.014 100.224 11.406 100.644 cv
11.798 101.064 12.358 101.316 13.072 101.372 cv
13.072 96.892 li
ef
6.954 86.08 mo
8.018 86.696 9.054 87.144 10.076 87.438 cv
11.098 87.746 12.134 87.886 13.184 87.886 cv
14.248 87.886 15.284 87.746 16.306 87.438 cv
17.342 87.144 18.364 86.696 19.414 86.08 cv
19.414 87.172 li
18.336 87.858 17.3 88.376 16.264 88.712 cv
15.228 89.048 14.206 89.216 13.184 89.216 cv
12.176 89.216 11.154 89.048 10.118 88.712 cv
9.082 88.376 8.032 87.872 6.954 87.172 cv
6.954 86.08 li
ef
11.392 77.62 mo
10.832 77.312 10.426 76.934 10.146 76.5 cv
9.88 76.066 9.74 75.548 9.74 74.946 cv
9.74 74.162 10.02 73.546 10.58 73.112 cv
11.14 72.678 11.938 72.454 12.96 72.454 cv
17.58 72.454 li
17.58 73.714 li
13.002 73.714 li
12.274 73.714 11.728 73.854 11.364 74.106 cv
11.014 74.372 10.832 74.764 10.832 75.296 cv
10.832 75.954 11.056 76.472 11.49 76.85 cv
11.924 77.228 12.512 77.41 13.254 77.41 cv
17.58 77.41 li
17.58 78.67 li
13.002 78.67 li
12.274 78.67 11.728 78.81 11.364 79.062 cv
11.014 79.328 10.832 79.734 10.832 80.266 cv
10.832 80.91 11.056 81.428 11.49 81.806 cv
11.924 82.184 12.512 82.366 13.254 82.366 cv
17.58 82.366 li
17.58 83.626 li
9.922 83.626 li
9.922 82.366 li
11.112 82.366 li
10.65 82.086 10.3 81.736 10.076 81.33 cv
9.852 80.938 9.74 80.462 9.74 79.902 cv
9.74 79.342 9.88 78.88 10.16 78.488 cv
10.44 78.096 10.86 77.816 11.392 77.62 cv
ef
10.146 65.138 mo
11.336 65.138 li
11.168 65.502 11.028 65.866 10.93 66.244 cv
10.846 66.636 10.79 67.028 10.79 67.434 cv
10.79 68.064 10.888 68.54 11.084 68.848 cv
11.28 69.156 11.56 69.31 11.938 69.31 cv
12.232 69.31 12.456 69.198 12.624 68.974 cv
12.792 68.75 12.96 68.302 13.1 67.63 cv
13.198 67.196 li
13.394 66.3 13.674 65.67 14.01 65.292 cv
14.36 64.928 14.85 64.732 15.466 64.732 cv
16.18 64.732 16.74 65.012 17.146 65.572 cv
17.566 66.132 17.762 66.916 17.762 67.896 cv
17.762 68.316 17.72 68.736 17.65 69.184 cv
17.58 69.632 17.468 70.094 17.3 70.584 cv
15.998 70.584 li
16.25 70.122 16.432 69.66 16.544 69.212 cv
16.67 68.764 16.726 68.316 16.726 67.868 cv
16.726 67.28 16.628 66.818 16.432 66.496 cv
16.236 66.188 15.942 66.02 15.564 66.02 cv
15.228 66.02 14.962 66.146 14.78 66.37 cv
14.598 66.594 14.416 67.098 14.248 67.882 cv
14.15 68.316 li
13.982 69.1 13.73 69.674 13.394 70.01 cv
13.058 70.36 12.596 70.528 11.994 70.528 cv
11.28 70.528 10.72 70.276 10.328 69.772 cv
9.936 69.268 9.74 68.54 9.74 67.588 cv
9.74 67.126 9.782 66.692 9.852 66.272 cv
9.922 65.866 10.02 65.488 10.146 65.138 cv
ef
6.954 62.9 mo
6.954 61.808 li
8.032 61.136 9.082 60.618 10.118 60.282 cv
11.154 59.946 12.176 59.764 13.184 59.764 cv
14.206 59.764 15.228 59.946 16.264 60.282 cv
17.3 60.618 18.336 61.136 19.414 61.808 cv
19.414 62.9 li
18.364 62.298 17.342 61.85 16.306 61.542 cv
15.284 61.248 14.248 61.094 13.184 61.094 cv
12.134 61.094 11.098 61.248 10.076 61.542 cv
9.054 61.85 8.018 62.298 6.954 62.9 cv
ef
1.5 lw
2 lc
92.212 260.913 mo
98.838 256.21 li
105.463 243.67 li
112.089 238.968 li
118.714 238.445 li
125.34 219.635 li
131.966 205.527 li
138.591 211.275 li
145.217 194.555 li
151.842 179.925 li
158.468 151.709 li
165.094 158.502 li
171.719 146.484 li
178.345 122.449 li
184.97 112.521 li
191.596 109.909 li
198.222 91.621 li
204.847 80.126 li
211.473 63.928 li
218.098 71.766 li
224.724 74.379 li
231.35 54.001 li
237.975 34.668 li
244.601 23.173 li
251.226 47.208 li
257.852 30.488 li
264.478 39.371 li
271.103 28.398 li
277.729 38.848 li
284.354 52.956 li
290.98 64.451 li
297.606 71.766 li
304.231 66.018 li
310.857 92.666 li
317.483 105.206 li
324.108 98.936 li
330.734 116.179 li
337.359 119.837 li
343.985 132.899 li
350.611 148.052 li
357.236 171.565 li
363.862 172.087 li
370.487 177.835 li
377.113 201.347 li
383.739 223.293 li
390.364 225.383 li
396.99 228.518 li
403.615 234.788 li
410.241 251.508 li
416.867 248.373 li
0 .9617 .904814 0 cmyk
@
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
92.212 254.643 mo
98.837 255.688 li
105.463 248.373 li
112.089 233.22 li
118.714 232.175 li
125.34 217.545 li
131.965 220.158 li
138.591 207.095 li
145.217 198.735 li
151.842 182.537 li
158.468 160.07 li
165.093 159.025 li
171.719 152.232 li
178.345 127.152 li
184.97 120.359 li
191.596 103.117 li
198.221 111.477 li
204.847 83.261 li
211.473 63.929 li
218.098 72.289 li
224.724 57.659 li
231.35 50.344 li
237.975 43.029 li
244.601 21.606 li
251.226 57.659 li
257.852 18.993 li
264.478 25.786 li
271.103 29.966 li
277.729 38.326 li
284.354 44.596 li
290.98 49.821 li
297.606 57.659 li
304.231 61.839 li
310.857 92.667 li
317.482 99.459 li
324.108 111.477 li
330.734 120.882 li
337.359 120.882 li
343.985 140.214 li
350.61 144.395 li
357.236 169.997 li
363.862 187.24 li
370.487 193.51 li
377.113 191.42 li
383.738 223.293 li
390.364 211.275 li
396.99 231.653 li
403.615 237.4 li
410.241 246.283 li
416.866 249.941 li
1 /0 /CSD get_res sepcs
1 sep
@
[5.55 2.4 ] 0 dsh
92.212 183.582 mo
98.837 178.357 li
105.463 157.457 li
112.089 135.512 li
118.714 128.719 li
125.34 134.989 li
131.965 138.647 li
138.591 135.512 li
145.217 137.602 li
151.842 141.26 li
158.468 137.602 li
165.093 117.224 li
171.719 139.169 li
178.345 127.674 li
184.97 141.782 li
191.596 136.034 li
198.221 147.007 li
204.847 132.377 li
211.473 139.169 li
218.098 136.034 li
224.724 140.737 li
231.35 118.792 li
237.975 133.422 li
244.601 134.467 li
251.226 130.287 li
257.852 145.44 li
264.478 120.882 li
271.103 129.242 li
277.729 136.557 li
284.354 131.854 li
290.98 136.034 li
297.606 150.665 li
304.231 149.62 li
310.857 143.872 li
317.482 126.629 li
324.108 133.944 li
330.734 128.197 li
337.359 143.872 li
343.985 140.737 li
350.61 131.854 li
357.236 132.377 li
363.862 136.557 li
370.487 137.602 li
377.113 127.674 li
383.738 134.467 li
390.364 130.287 li
396.99 137.079 li
403.615 134.989 li
410.241 154.322 li
416.866 174.177 li
.845304 .345006 1 .00607309 cmyk
@
.8 lw
2 lc
0 lj
[] 0 dsh
75.979 273.009 mo
75.979 6.897 li
1 /0 /CSD get_res sepcs
1 sep
@
433.099 273.009 mo
433.099 6.897 li
@
75.979 273.009 mo
433.099 273.009 li
@
75.979 6.897 mo
433.099 6.897 li
@
316.724 58.913 mo
426.099 58.913 li
427.432 58.913 428.099 58.246 428.099 56.913 cv
428.099 13.897 li
428.099 12.564 427.432 11.897 426.099 11.897 cv
316.724 11.897 li
315.391 11.897 314.724 12.564 314.724 13.897 cv
314.724 56.913 li
314.724 58.246 315.391 58.913 316.724 58.913 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
316.724 58.913 mo
426.099 58.913 li
427.432 58.913 428.099 58.246 428.099 56.913 cv
428.099 13.897 li
428.099 12.564 427.432 11.897 426.099 11.897 cv
316.724 11.897 li
315.391 11.897 314.724 12.564 314.724 13.897 cv
314.724 56.913 li
314.724 58.246 315.391 58.913 316.724 58.913 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
318.724 19.991 mo
338.724 19.991 li
0 .9617 .904814 0 cmyk
@
347.72 16.17 mo
348.71 16.17 li
348.71 19.16 li
352.29 19.16 li
352.29 16.17 li
353.28 16.17 li
353.28 23.46 li
352.29 23.46 li
352.29 19.99 li
348.71 19.99 li
348.71 23.46 li
347.72 23.46 li
347.72 16.17 li
1 /0 /CSD get_res sepcs
1 sep
ef
357.73 20.71 mo
357 20.71 356.5 20.8 356.22 20.96 cv
355.94 21.13 355.8 21.41 355.8 21.81 cv
355.8 22.13 355.9 22.39 356.11 22.57 cv
356.32 22.76 356.61 22.85 356.97 22.85 cv
357.47 22.85 357.87 22.68 358.17 22.32 cv
358.47 21.97 358.62 21.5 358.62 20.91 cv
358.62 20.71 li
357.73 20.71 li
359.52 20.34 mo
359.52 23.46 li
358.62 23.46 li
358.62 22.63 li
358.41 22.97 358.15 23.21 357.85 23.36 cv
357.55 23.51 357.17 23.59 356.73 23.59 cv
356.17 23.59 355.72 23.44 355.39 23.13 cv
355.06 22.82 354.9 22.4 354.9 21.87 cv
354.9 21.26 355.1 20.8 355.52 20.48 cv
355.93 20.17 356.54 20.01 357.36 20.01 cv
358.62 20.01 li
358.62 19.92 li
358.62 19.51 358.48 19.19 358.21 18.96 cv
357.94 18.74 357.56 18.62 357.07 18.62 cv
356.75 18.62 356.45 18.66 356.15 18.74 cv
355.85 18.82 355.57 18.93 355.3 19.07 cv
355.3 18.24 li
355.62 18.12 355.94 18.02 356.25 17.96 cv
356.56 17.9 356.86 17.86 357.16 17.86 cv
357.95 17.86 358.54 18.07 358.93 18.48 cv
359.32 18.89 359.52 19.51 359.52 20.34 cv
ef
364.96 18.82 mo
364.96 15.86 li
365.86 15.86 li
365.86 23.46 li
364.96 23.46 li
364.96 22.64 li
364.77 22.97 364.53 23.21 364.24 23.36 cv
363.95 23.51 363.61 23.59 363.21 23.59 cv
362.55 23.59 362.01 23.33 361.59 22.81 cv
361.17 22.29 360.97 21.59 360.97 20.73 cv
360.97 19.87 361.17 19.18 361.59 18.65 cv
362.01 18.13 362.55 17.86 363.21 17.86 cv
363.61 17.86 363.95 17.94 364.24 18.1 cv
364.53 18.26 364.77 18.5 364.96 18.82 cv
361.9 20.73 mo
361.9 21.39 362.03 21.91 362.3 22.29 cv
362.57 22.67 362.95 22.85 363.43 22.85 cv
363.9 22.85 364.27 22.67 364.55 22.29 cv
364.82 21.91 364.96 21.39 364.96 20.73 cv
364.96 20.07 364.82 19.56 364.55 19.18 cv
364.27 18.8 363.9 18.61 363.43 18.61 cv
362.95 18.61 362.57 18.8 362.3 19.18 cv
362.03 19.56 361.9 20.07 361.9 20.73 cv
ef
369.72 18.62 mo
369.24 18.62 368.86 18.81 368.58 19.19 cv
368.3 19.57 368.16 20.08 368.16 20.73 cv
368.16 21.39 368.29 21.9 368.57 22.28 cv
368.85 22.66 369.23 22.84 369.72 22.84 cv
370.2 22.84 370.58 22.66 370.86 22.28 cv
371.14 21.9 371.28 21.39 371.28 20.73 cv
371.28 20.09 371.14 19.57 370.86 19.19 cv
370.58 18.81 370.2 18.62 369.72 18.62 cv
369.72 17.86 mo
370.5 17.86 371.11 18.12 371.56 18.62 cv
372 19.13 372.23 19.83 372.23 20.73 cv
372.23 21.63 372 22.33 371.56 22.83 cv
371.11 23.34 370.5 23.59 369.72 23.59 cv
368.93 23.59 368.31 23.34 367.87 22.83 cv
367.43 22.33 367.21 21.63 367.21 20.73 cv
367.21 19.83 367.43 19.13 367.87 18.62 cv
368.31 18.12 368.93 17.86 369.72 17.86 cv
ef
375.84 18.62 mo
375.36 18.62 374.98 18.81 374.7 19.19 cv
374.42 19.57 374.28 20.08 374.28 20.73 cv
374.28 21.39 374.41 21.9 374.69 22.28 cv
374.97 22.66 375.35 22.84 375.84 22.84 cv
376.32 22.84 376.7 22.66 376.98 22.28 cv
377.26 21.9 377.4 21.39 377.4 20.73 cv
377.4 20.09 377.26 19.57 376.98 19.19 cv
376.7 18.81 376.32 18.62 375.84 18.62 cv
375.84 17.86 mo
376.62 17.86 377.23 18.12 377.68 18.62 cv
378.12 19.13 378.35 19.83 378.35 20.73 cv
378.35 21.63 378.12 22.33 377.68 22.83 cv
377.23 23.34 376.62 23.59 375.84 23.59 cv
375.05 23.59 374.43 23.34 373.99 22.83 cv
373.55 22.33 373.33 21.63 373.33 20.73 cv
373.33 19.83 373.55 19.13 373.99 18.62 cv
374.43 18.12 375.05 17.86 375.84 17.86 cv
ef
380.71 22.64 mo
380.71 25.53 li
379.81 25.53 li
379.81 17.99 li
380.71 17.99 li
380.71 18.82 li
380.89 18.5 381.13 18.26 381.42 18.1 cv
381.71 17.94 382.06 17.86 382.46 17.86 cv
383.12 17.86 383.66 18.13 384.08 18.65 cv
384.49 19.18 384.7 19.87 384.7 20.73 cv
384.7 21.59 384.49 22.29 384.08 22.81 cv
383.66 23.33 383.12 23.59 382.46 23.59 cv
382.06 23.59 381.71 23.51 381.42 23.36 cv
381.13 23.21 380.89 22.97 380.71 22.64 cv
383.77 20.73 mo
383.77 20.07 383.63 19.56 383.36 19.18 cv
383.08 18.8 382.71 18.61 382.24 18.61 cv
381.76 18.61 381.39 18.8 381.12 19.18 cv
380.84 19.56 380.71 20.07 380.71 20.73 cv
380.71 21.39 380.84 21.91 381.12 22.29 cv
381.39 22.67 381.76 22.85 382.24 22.85 cv
382.71 22.85 383.08 22.67 383.36 22.29 cv
383.63 21.91 383.77 21.39 383.77 20.73 cv
ef
385.75 21.12 mo
388.38 21.12 li
388.38 20.32 li
385.75 20.32 li
cp
f
393.4 18.82 mo
393.4 15.86 li
394.3 15.86 li
394.3 23.46 li
393.4 23.46 li
393.4 22.64 li
393.21 22.97 392.97 23.21 392.68 23.36 cv
392.39 23.51 392.05 23.59 391.65 23.59 cv
390.99 23.59 390.45 23.33 390.03 22.81 cv
389.61 22.29 389.41 21.59 389.41 20.73 cv
389.41 19.87 389.61 19.18 390.03 18.65 cv
390.45 18.13 390.99 17.86 391.65 17.86 cv
392.05 17.86 392.39 17.94 392.68 18.1 cv
392.97 18.26 393.21 18.5 393.4 18.82 cv
390.34 20.73 mo
390.34 21.39 390.47 21.91 390.74 22.29 cv
391.01 22.67 391.39 22.85 391.87 22.85 cv
392.34 22.85 392.71 22.67 392.99 22.29 cv
393.26 21.91 393.4 21.39 393.4 20.73 cv
393.4 20.07 393.26 19.56 392.99 19.18 cv
392.71 18.8 392.34 18.61 391.87 18.61 cv
391.39 18.61 391.01 18.8 390.74 19.18 cv
390.47 19.56 390.34 20.07 390.34 20.73 cv
ef
400.84 20.5 mo
400.84 20.94 li
396.71 20.94 li
396.75 21.56 396.93 22.04 397.27 22.36 cv
397.6 22.68 398.06 22.84 398.66 22.84 cv
399 22.84 399.34 22.8 399.66 22.72 cv
399.98 22.64 400.31 22.51 400.63 22.33 cv
400.63 23.18 li
400.31 23.32 399.98 23.43 399.64 23.49 cv
399.3 23.55 398.95 23.59 398.61 23.59 cv
397.73 23.59 397.04 23.34 396.53 22.84 cv
396.02 22.34 395.77 21.65 395.77 20.78 cv
395.77 19.89 396.01 19.18 396.49 18.65 cv
396.97 18.13 397.63 17.86 398.45 17.86 cv
399.19 17.86 399.77 18.1 400.2 18.57 cv
400.62 19.05 400.84 19.69 400.84 20.5 cv
399.94 20.24 mo
399.93 19.75 399.79 19.36 399.53 19.06 cv
399.26 18.77 398.9 18.62 398.46 18.62 cv
397.96 18.62 397.56 18.77 397.26 19.05 cv
396.96 19.33 396.78 19.73 396.74 20.24 cv
399.94 20.24 li
ef
405.17 15.86 mo
405.17 16.61 li
404.31 16.61 li
403.99 16.61 403.76 16.68 403.64 16.81 cv
403.51 16.94 403.45 17.17 403.45 17.51 cv
403.45 17.99 li
404.93 17.99 li
404.93 18.69 li
403.45 18.69 li
403.45 23.46 li
402.55 23.46 li
402.55 18.69 li
401.69 18.69 li
401.69 17.99 li
402.55 17.99 li
402.55 17.61 li
402.55 17.01 402.69 16.56 402.97 16.28 cv
403.25 16 403.7 15.86 404.32 15.86 cv
405.17 15.86 li
ef
408.37 20.71 mo
407.64 20.71 407.14 20.8 406.86 20.96 cv
406.58 21.13 406.44 21.41 406.44 21.81 cv
406.44 22.13 406.54 22.39 406.75 22.57 cv
406.96 22.76 407.25 22.85 407.61 22.85 cv
408.11 22.85 408.51 22.68 408.81 22.32 cv
409.11 21.97 409.26 21.5 409.26 20.91 cv
409.26 20.71 li
408.37 20.71 li
410.16 20.34 mo
410.16 23.46 li
409.26 23.46 li
409.26 22.63 li
409.05 22.97 408.79 23.21 408.49 23.36 cv
408.19 23.51 407.81 23.59 407.37 23.59 cv
406.81 23.59 406.36 23.44 406.03 23.13 cv
405.7 22.82 405.54 22.4 405.54 21.87 cv
405.54 21.26 405.74 20.8 406.16 20.48 cv
406.57 20.17 407.18 20.01 408 20.01 cv
409.26 20.01 li
409.26 19.92 li
409.26 19.51 409.12 19.19 408.85 18.96 cv
408.58 18.74 408.2 18.62 407.71 18.62 cv
407.39 18.62 407.09 18.66 406.79 18.74 cv
406.49 18.82 406.21 18.93 405.94 19.07 cv
405.94 18.24 li
406.26 18.12 406.58 18.02 406.89 17.96 cv
407.2 17.9 407.5 17.86 407.8 17.86 cv
408.59 17.86 409.18 18.07 409.57 18.48 cv
409.96 18.89 410.16 19.51 410.16 20.34 cv
ef
411.91 21.3 mo
411.91 17.99 li
412.81 17.99 li
412.81 21.27 li
412.81 21.79 412.91 22.17 413.11 22.43 cv
413.31 22.69 413.61 22.82 414.02 22.82 cv
414.5 22.82 414.89 22.67 415.17 22.36 cv
415.45 22.05 415.59 21.63 415.59 21.09 cv
415.59 17.99 li
416.49 17.99 li
416.49 23.46 li
415.59 23.46 li
415.59 22.62 li
415.37 22.96 415.11 23.2 414.83 23.36 cv
414.54 23.51 414.21 23.59 413.83 23.59 cv
413.2 23.59 412.72 23.4 412.4 23.01 cv
412.07 22.63 411.91 22.06 411.91 21.3 cv
414.17 17.86 mo
414.17 17.86 li
ef
418.36 23.46 mo
419.26 23.46 li
419.26 15.86 li
418.36 15.86 li
cp
f
422.01 16.44 mo
422.01 17.99 li
423.86 17.99 li
423.86 18.69 li
422.01 18.69 li
422.01 21.66 li
422.01 22.11 422.07 22.4 422.19 22.52 cv
422.31 22.65 422.56 22.71 422.94 22.71 cv
423.86 22.71 li
423.86 23.46 li
422.94 23.46 li
422.24 23.46 421.76 23.33 421.5 23.07 cv
421.24 22.81 421.11 22.34 421.11 21.66 cv
421.11 18.69 li
420.45 18.69 li
420.45 17.99 li
421.11 17.99 li
421.11 16.44 li
422.01 16.44 li
ef
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
318.724 34.663 mo
338.724 34.663 li
@
347.07 30.93 mo
348.07 30.93 li
349.6 37.09 li
351.13 30.93 li
352.24 30.93 li
353.77 37.09 li
355.3 30.93 li
356.3 30.93 li
354.47 38.22 li
353.23 38.22 li
351.69 31.89 li
350.14 38.22 li
348.9 38.22 li
347.07 30.93 li
ef
360 31.9 mo
358.66 35.53 li
361.34 35.53 li
360 31.9 li
359.44 30.93 mo
360.56 30.93 li
363.34 38.22 li
362.31 38.22 li
361.65 36.35 li
358.36 36.35 li
357.7 38.22 li
356.66 38.22 li
359.44 30.93 li
ef
368.77 31.17 mo
368.77 32.13 li
368.39 31.95 368.04 31.82 367.71 31.73 cv
367.37 31.65 367.05 31.6 366.75 31.6 cv
366.21 31.6 365.79 31.71 365.5 31.91 cv
365.21 32.12 365.07 32.42 365.07 32.8 cv
365.07 33.12 365.16 33.37 365.36 33.53 cv
365.55 33.7 365.92 33.83 366.46 33.93 cv
367.06 34.05 li
367.79 34.19 368.33 34.44 368.68 34.79 cv
369.03 35.15 369.21 35.62 369.21 36.21 cv
369.21 36.92 368.97 37.45 368.5 37.81 cv
368.02 38.17 367.33 38.35 366.42 38.35 cv
366.07 38.35 365.7 38.31 365.31 38.24 cv
364.92 38.17 364.52 38.06 364.11 37.9 cv
364.11 36.88 li
364.51 37.11 364.9 37.28 365.28 37.39 cv
365.66 37.51 366.04 37.56 366.42 37.56 cv
366.98 37.56 367.41 37.45 367.72 37.23 cv
368.02 37.01 368.18 36.7 368.18 36.28 cv
368.18 35.92 368.07 35.64 367.85 35.44 cv
367.63 35.24 367.27 35.09 366.77 34.99 cv
366.17 34.87 li
365.43 34.73 364.9 34.5 364.57 34.18 cv
364.24 33.87 364.08 33.44 364.08 32.88 cv
364.08 32.24 364.3 31.73 364.76 31.36 cv
365.21 30.99 365.84 30.8 366.64 30.8 cv
366.98 30.8 367.32 30.83 367.68 30.89 cv
368.03 30.95 368.39 31.05 368.77 31.17 cv
ef
370.76 30.93 mo
371.75 30.93 li
371.75 33.92 li
375.33 33.92 li
375.33 30.93 li
376.32 30.93 li
376.32 38.22 li
375.33 38.22 li
375.33 34.75 li
371.75 34.75 li
371.75 38.22 li
370.76 38.22 li
370.76 30.93 li
ef
377.83 35.88 mo
380.46 35.88 li
380.46 35.08 li
377.83 35.08 li
cp
f
385.48 35.42 mo
385.48 34.78 385.34 34.27 385.08 33.91 cv
384.81 33.55 384.43 33.37 383.95 33.37 cv
383.47 33.37 383.09 33.55 382.82 33.91 cv
382.55 34.27 382.42 34.78 382.42 35.42 cv
382.42 36.07 382.55 36.57 382.82 36.93 cv
383.09 37.29 383.47 37.47 383.95 37.47 cv
384.43 37.47 384.81 37.29 385.08 36.93 cv
385.34 36.57 385.48 36.07 385.48 35.42 cv
386.38 37.54 mo
386.38 38.46 386.17 39.15 385.76 39.61 cv
385.34 40.06 384.71 40.29 383.86 40.29 cv
383.54 40.29 383.25 40.26 382.97 40.22 cv
382.69 40.17 382.41 40.1 382.15 40 cv
382.15 39.13 li
382.41 39.27 382.67 39.37 382.93 39.44 cv
383.19 39.51 383.45 39.55 383.72 39.55 cv
384.3 39.55 384.74 39.39 385.04 39.09 cv
385.33 38.78 385.48 38.32 385.48 37.7 cv
385.48 37.26 li
385.29 37.58 385.05 37.82 384.76 37.98 cv
384.47 38.14 384.13 38.22 383.73 38.22 cv
383.05 38.22 382.51 37.97 382.1 37.46 cv
381.69 36.95 381.49 36.27 381.49 35.42 cv
381.49 34.58 381.69 33.9 382.1 33.39 cv
382.51 32.88 383.05 32.62 383.73 32.62 cv
384.13 32.62 384.47 32.7 384.76 32.86 cv
385.05 33.02 385.29 33.26 385.48 33.58 cv
385.48 32.75 li
386.38 32.75 li
386.38 37.54 li
ef
391.41 33.59 mo
391.31 33.53 391.2 33.49 391.08 33.46 cv
390.96 33.44 390.83 33.42 390.69 33.42 cv
390.18 33.42 389.79 33.59 389.52 33.92 cv
389.24 34.25 389.11 34.72 389.11 35.34 cv
389.11 38.22 li
388.21 38.22 li
388.21 32.75 li
389.11 32.75 li
389.11 33.6 li
389.29 33.27 389.54 33.02 389.84 32.86 cv
390.14 32.7 390.51 32.62 390.95 32.62 cv
391.01 32.62 391.08 32.63 391.16 32.63 cv
391.23 32.64 391.31 32.65 391.41 32.67 cv
391.41 33.59 li
ef
397 35.26 mo
397 35.7 li
392.87 35.7 li
392.91 36.32 393.09 36.8 393.43 37.12 cv
393.76 37.44 394.22 37.6 394.82 37.6 cv
395.16 37.6 395.5 37.56 395.82 37.48 cv
396.14 37.4 396.47 37.27 396.79 37.09 cv
396.79 37.94 li
396.47 38.08 396.14 38.19 395.8 38.25 cv
395.46 38.31 395.11 38.35 394.77 38.35 cv
393.89 38.35 393.2 38.1 392.69 37.6 cv
392.18 37.1 391.93 36.41 391.93 35.54 cv
391.93 34.65 392.17 33.94 392.65 33.41 cv
393.13 32.89 393.79 32.62 394.61 32.62 cv
395.35 32.62 395.93 32.86 396.36 33.33 cv
396.78 33.81 397 34.45 397 35.26 cv
396.1 35 mo
396.09 34.51 395.95 34.12 395.69 33.82 cv
395.42 33.53 395.06 33.38 394.62 33.38 cv
394.12 33.38 393.72 33.53 393.42 33.81 cv
393.12 34.09 392.94 34.49 392.9 35 cv
396.1 35 li
ef
403.12 35.26 mo
403.12 35.7 li
398.99 35.7 li
399.03 36.32 399.21 36.8 399.55 37.12 cv
399.88 37.44 400.34 37.6 400.94 37.6 cv
401.28 37.6 401.62 37.56 401.94 37.48 cv
402.26 37.4 402.59 37.27 402.91 37.09 cv
402.91 37.94 li
402.59 38.08 402.26 38.19 401.92 38.25 cv
401.58 38.31 401.23 38.35 400.89 38.35 cv
400.01 38.35 399.32 38.1 398.81 37.6 cv
398.3 37.1 398.05 36.41 398.05 35.54 cv
398.05 34.65 398.29 33.94 398.77 33.41 cv
399.25 32.89 399.91 32.62 400.73 32.62 cv
401.47 32.62 402.05 32.86 402.48 33.33 cv
402.9 33.81 403.12 34.45 403.12 35.26 cv
402.22 35 mo
402.21 34.51 402.07 34.12 401.81 33.82 cv
401.54 33.53 401.18 33.38 400.74 33.38 cv
400.24 33.38 399.84 33.53 399.54 33.81 cv
399.24 34.09 399.06 34.49 399.02 35 cv
402.22 35 li
ef
408.28 33.58 mo
408.28 30.62 li
409.18 30.62 li
409.18 38.22 li
408.28 38.22 li
408.28 37.4 li
408.09 37.73 407.85 37.97 407.56 38.12 cv
407.27 38.27 406.93 38.35 406.53 38.35 cv
405.87 38.35 405.33 38.09 404.91 37.57 cv
404.49 37.05 404.29 36.35 404.29 35.49 cv
404.29 34.63 404.49 33.94 404.91 33.41 cv
405.33 32.89 405.87 32.62 406.53 32.62 cv
406.93 32.62 407.27 32.7 407.56 32.86 cv
407.85 33.02 408.09 33.26 408.28 33.58 cv
405.22 35.49 mo
405.22 36.15 405.35 36.67 405.62 37.05 cv
405.89 37.43 406.27 37.61 406.75 37.61 cv
407.22 37.61 407.59 37.43 407.87 37.05 cv
408.14 36.67 408.28 36.15 408.28 35.49 cv
408.28 34.83 408.14 34.32 407.87 33.94 cv
407.59 33.56 407.22 33.37 406.75 33.37 cv
406.27 33.37 405.89 33.56 405.62 33.94 cv
405.35 34.32 405.22 34.83 405.22 35.49 cv
ef
413.2 38.72 mo
412.94 39.36 412.69 39.79 412.45 39.99 cv
412.21 40.19 411.89 40.29 411.49 40.29 cv
410.77 40.29 li
410.77 39.54 li
411.3 39.54 li
411.54 39.54 411.73 39.48 411.87 39.36 cv
412.01 39.24 412.16 38.97 412.33 38.53 cv
412.49 38.13 li
410.28 32.75 li
411.23 32.75 li
412.94 37.03 li
414.65 32.75 li
415.6 32.75 li
413.2 38.72 li
ef
[5.55 2.4 ] 0 dsh
318.724 49.335 mo
338.724 49.335 li
.845304 .345006 1 .00607309 cmyk
@
351.2 47.62 mo
351.1 47.58 351 47.54 350.88 47.51 cv
350.76 47.49 350.64 47.47 350.51 47.47 cv
350.03 47.47 349.61 47.66 349.25 48.02 cv
348.89 48.38 348.66 48.87 348.54 49.47 cv
347.99 52.26 li
347.09 52.26 li
348.16 46.79 li
349.06 46.79 li
348.89 47.64 li
349.12 47.33 349.4 47.09 349.74 46.92 cv
350.07 46.75 350.42 46.66 350.8 46.66 cv
350.89 46.66 350.98 46.67 351.08 46.68 cv
351.18 46.69 351.27 46.71 351.37 46.73 cv
351.2 47.62 li
1 /0 /CSD get_res sepcs
1 sep
ef
351.15 44.97 mo
352.15 44.97 li
353.68 51.13 li
355.21 44.97 li
356.32 44.97 li
357.85 51.13 li
359.38 44.97 li
360.38 44.97 li
358.55 52.26 li
357.31 52.26 li
355.77 45.93 li
354.22 52.26 li
352.98 52.26 li
351.15 44.97 li
ef
364.2 45.94 mo
362.86 49.57 li
365.54 49.57 li
364.2 45.94 li
363.64 44.97 mo
364.76 44.97 li
367.54 52.26 li
366.51 52.26 li
365.85 50.39 li
362.56 50.39 li
361.9 52.26 li
360.86 52.26 li
363.64 44.97 li
ef
372.97 45.21 mo
372.97 46.17 li
372.59 45.99 372.24 45.86 371.91 45.77 cv
371.57 45.69 371.25 45.64 370.95 45.64 cv
370.41 45.64 369.99 45.75 369.7 45.95 cv
369.41 46.16 369.27 46.46 369.27 46.84 cv
369.27 47.16 369.36 47.41 369.56 47.57 cv
369.75 47.74 370.12 47.87 370.66 47.97 cv
371.26 48.09 li
371.99 48.23 372.53 48.48 372.88 48.83 cv
373.23 49.19 373.41 49.66 373.41 50.25 cv
373.41 50.96 373.17 51.49 372.7 51.85 cv
372.22 52.21 371.53 52.39 370.62 52.39 cv
370.27 52.39 369.9 52.35 369.51 52.28 cv
369.12 52.21 368.72 52.1 368.31 51.94 cv
368.31 50.92 li
368.71 51.15 369.1 51.32 369.48 51.43 cv
369.86 51.55 370.24 51.6 370.62 51.6 cv
371.18 51.6 371.61 51.49 371.92 51.27 cv
372.22 51.05 372.38 50.74 372.38 50.32 cv
372.38 49.96 372.27 49.68 372.05 49.48 cv
371.83 49.28 371.47 49.13 370.97 49.03 cv
370.37 48.91 li
369.63 48.77 369.1 48.54 368.77 48.22 cv
368.44 47.91 368.28 47.48 368.28 46.92 cv
368.28 46.28 368.5 45.77 368.96 45.4 cv
369.41 45.03 370.04 44.84 370.84 44.84 cv
371.18 44.84 371.52 44.87 371.88 44.93 cv
372.23 44.99 372.59 45.09 372.97 45.21 cv
ef
374.84 44.97 mo
375.83 44.97 li
375.83 47.96 li
379.41 47.96 li
379.41 44.97 li
380.4 44.97 li
380.4 52.26 li
379.41 52.26 li
379.41 48.79 li
375.83 48.79 li
375.83 52.26 li
374.84 52.26 li
374.84 44.97 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
