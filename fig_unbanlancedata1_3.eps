%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPA0D9.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: jmt
%%CreationDate: 2019/9/18, 11:23:20
%%BoundingBox: 0 0 432 318
%%HiResBoundingBox: 0 0 432 318
%%CropBox: 0 0 432 318
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 965 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2019-09-18T11:22:44+08:00"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-09-18T11:22:44+08:00"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmpMM:DocumentID="uuid:a3e071cb-eeaa-4809-95ff-c5a2f6b157a4"
   xmpMM:InstanceID="uuid:1860b217-2de8-4e8a-9dd4-a7f23265eea7">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">fig_unbanlancedata1_3.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -318 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 318 li
432 318 li
432 0 li
cp
clp
.15401 317.94 mo
431.846 317.94 li
431.846 -.0600281 li
.15401 -.0600281 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
67.526 273.009 mo
424.646 273.009 li
424.646 6.897 li
67.526 6.897 li
cp
f
83.759 273.009 mo
83.759 276.509 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
83.759 273.009 mo
83.759 276.509 li
@
83.772 281.404 mo
83.058 281.404 82.526 281.754 82.162 282.454 cv
81.798 283.154 81.63 284.204 81.63 285.604 cv
81.63 287.004 81.798 288.054 82.162 288.754 cv
82.526 289.454 83.058 289.804 83.772 289.804 cv
84.486 289.804 85.018 289.454 85.382 288.754 cv
85.732 288.054 85.914 287.004 85.914 285.604 cv
85.914 284.204 85.732 283.154 85.382 282.454 cv
85.018 281.754 84.486 281.404 83.772 281.404 cv
83.772 280.312 mo
84.906 280.312 85.774 280.774 86.39 281.67 cv
86.992 282.58 87.3 283.896 87.3 285.604 cv
87.3 287.326 86.992 288.642 86.39 289.538 cv
85.774 290.434 84.906 290.882 83.772 290.882 cv
82.624 290.882 81.742 290.434 81.14 289.538 cv
80.538 288.642 80.244 287.326 80.244 285.604 cv
80.244 283.896 80.538 282.58 81.14 281.67 cv
81.742 280.774 82.624 280.312 83.772 280.312 cv
ef
150.015 273.009 mo
150.015 276.509 li
f
150.015 273.009 mo
150.015 276.509 li
@
142.856 289.538 mo
145.11 289.538 li
145.11 281.754 li
142.66 282.244 li
142.66 280.984 li
145.096 280.494 li
146.482 280.494 li
146.482 289.538 li
148.736 289.538 li
148.736 290.7 li
142.856 290.7 li
142.856 289.538 li
ef
154.452 281.404 mo
153.738 281.404 153.206 281.754 152.842 282.454 cv
152.478 283.154 152.31 284.204 152.31 285.604 cv
152.31 287.004 152.478 288.054 152.842 288.754 cv
153.206 289.454 153.738 289.804 154.452 289.804 cv
155.166 289.804 155.698 289.454 156.062 288.754 cv
156.412 288.054 156.594 287.004 156.594 285.604 cv
156.594 284.204 156.412 283.154 156.062 282.454 cv
155.698 281.754 155.166 281.404 154.452 281.404 cv
154.452 280.312 mo
155.586 280.312 156.454 280.774 157.07 281.67 cv
157.672 282.58 157.98 283.896 157.98 285.604 cv
157.98 287.326 157.672 288.642 157.07 289.538 cv
156.454 290.434 155.586 290.882 154.452 290.882 cv
153.304 290.882 152.422 290.434 151.82 289.538 cv
151.218 288.642 150.924 287.326 150.924 285.604 cv
150.924 283.896 151.218 282.58 151.82 281.67 cv
152.422 280.774 153.304 280.312 154.452 280.312 cv
ef
216.271 273.009 mo
216.271 276.509 li
f
216.271 273.009 mo
216.271 276.509 li
@
210.048 289.538 mo
214.864 289.538 li
214.864 290.7 li
208.382 290.7 li
208.382 289.538 li
208.9 289.006 209.614 288.278 210.524 287.354 cv
211.42 286.444 211.994 285.856 212.232 285.59 cv
212.68 285.1 212.988 284.68 213.156 284.33 cv
213.324 283.994 213.422 283.644 213.422 283.308 cv
213.422 282.776 213.226 282.328 212.848 281.992 cv
212.47 281.656 211.98 281.474 211.364 281.474 cv
210.93 281.474 210.468 281.558 209.992 281.698 cv
209.516 281.852 208.998 282.076 208.452 282.384 cv
208.452 280.984 li
209.012 280.76 209.53 280.592 210.006 280.48 cv
210.482 280.368 210.93 280.312 211.336 280.312 cv
212.386 280.312 213.226 280.578 213.856 281.11 cv
214.486 281.642 214.808 282.342 214.808 283.224 cv
214.808 283.644 214.724 284.05 214.57 284.414 cv
214.416 284.792 214.136 285.24 213.716 285.744 cv
213.604 285.884 213.24 286.262 212.624 286.892 cv
212.008 287.522 211.154 288.404 210.048 289.538 cv
ef
220.692 281.404 mo
219.978 281.404 219.446 281.754 219.082 282.454 cv
218.718 283.154 218.55 284.204 218.55 285.604 cv
218.55 287.004 218.718 288.054 219.082 288.754 cv
219.446 289.454 219.978 289.804 220.692 289.804 cv
221.406 289.804 221.938 289.454 222.302 288.754 cv
222.652 288.054 222.834 287.004 222.834 285.604 cv
222.834 284.204 222.652 283.154 222.302 282.454 cv
221.938 281.754 221.406 281.404 220.692 281.404 cv
220.692 280.312 mo
221.826 280.312 222.694 280.774 223.31 281.67 cv
223.912 282.58 224.22 283.896 224.22 285.604 cv
224.22 287.326 223.912 288.642 223.31 289.538 cv
222.694 290.434 221.826 290.882 220.692 290.882 cv
219.544 290.882 218.662 290.434 218.06 289.538 cv
217.458 288.642 217.164 287.326 217.164 285.604 cv
217.164 283.896 217.458 282.58 218.06 281.67 cv
218.662 280.774 219.544 280.312 220.692 280.312 cv
ef
282.527 273.009 mo
282.527 276.509 li
f
282.527 273.009 mo
282.527 276.509 li
@
279.284 285.198 mo
279.942 285.338 280.46 285.632 280.824 286.08 cv
281.188 286.528 281.384 287.088 281.384 287.732 cv
281.384 288.74 281.034 289.524 280.348 290.07 cv
279.648 290.616 278.668 290.882 277.394 290.882 cv
276.96 290.882 276.512 290.84 276.064 290.756 cv
275.616 290.686 275.14 290.56 274.664 290.392 cv
274.664 289.062 li
275.042 289.286 275.462 289.454 275.924 289.566 cv
276.372 289.678 276.848 289.734 277.352 289.734 cv
278.22 289.734 278.878 289.566 279.326 289.23 cv
279.774 288.894 280.012 288.39 280.012 287.732 cv
280.012 287.144 279.802 286.668 279.382 286.332 cv
278.962 285.996 278.374 285.814 277.618 285.814 cv
276.428 285.814 li
276.428 284.68 li
277.674 284.68 li
278.346 284.68 278.864 284.554 279.228 284.274 cv
279.592 284.008 279.774 283.616 279.774 283.098 cv
279.774 282.58 279.578 282.174 279.214 281.894 cv
278.836 281.614 278.304 281.474 277.618 281.474 cv
277.24 281.474 276.834 281.516 276.4 281.6 cv
275.966 281.684 275.49 281.81 274.972 281.978 cv
274.972 280.746 li
275.49 280.606 275.98 280.494 276.442 280.424 cv
276.89 280.354 277.324 280.312 277.744 280.312 cv
278.78 280.312 279.606 280.55 280.222 281.026 cv
280.838 281.502 281.146 282.146 281.146 282.958 cv
281.146 283.518 280.978 283.994 280.656 284.386 cv
280.334 284.778 279.872 285.058 279.284 285.198 cv
ef
286.932 281.404 mo
286.218 281.404 285.686 281.754 285.322 282.454 cv
284.958 283.154 284.79 284.204 284.79 285.604 cv
284.79 287.004 284.958 288.054 285.322 288.754 cv
285.686 289.454 286.218 289.804 286.932 289.804 cv
287.646 289.804 288.178 289.454 288.542 288.754 cv
288.892 288.054 289.074 287.004 289.074 285.604 cv
289.074 284.204 288.892 283.154 288.542 282.454 cv
288.178 281.754 287.646 281.404 286.932 281.404 cv
286.932 280.312 mo
288.066 280.312 288.934 280.774 289.55 281.67 cv
290.152 282.58 290.46 283.896 290.46 285.604 cv
290.46 287.326 290.152 288.642 289.55 289.538 cv
288.934 290.434 288.066 290.882 286.932 290.882 cv
285.784 290.882 284.902 290.434 284.3 289.538 cv
283.698 288.642 283.404 287.326 283.404 285.604 cv
283.404 283.896 283.698 282.58 284.3 281.67 cv
284.902 280.774 285.784 280.312 286.932 280.312 cv
ef
348.783 273.009 mo
348.783 276.509 li
f
348.783 273.009 mo
348.783 276.509 li
@
345.132 281.698 mo
341.646 287.144 li
345.132 287.144 li
345.132 281.698 li
344.768 280.494 mo
346.504 280.494 li
346.504 287.144 li
347.96 287.144 li
347.96 288.292 li
346.504 288.292 li
346.504 290.7 li
345.132 290.7 li
345.132 288.292 li
340.526 288.292 li
340.526 286.962 li
344.768 280.494 li
ef
353.292 281.404 mo
352.578 281.404 352.046 281.754 351.682 282.454 cv
351.318 283.154 351.15 284.204 351.15 285.604 cv
351.15 287.004 351.318 288.054 351.682 288.754 cv
352.046 289.454 352.578 289.804 353.292 289.804 cv
354.006 289.804 354.538 289.454 354.902 288.754 cv
355.252 288.054 355.434 287.004 355.434 285.604 cv
355.434 284.204 355.252 283.154 354.902 282.454 cv
354.538 281.754 354.006 281.404 353.292 281.404 cv
353.292 280.312 mo
354.426 280.312 355.294 280.774 355.91 281.67 cv
356.512 282.58 356.82 283.896 356.82 285.604 cv
356.82 287.326 356.512 288.642 355.91 289.538 cv
355.294 290.434 354.426 290.882 353.292 290.882 cv
352.144 290.882 351.262 290.434 350.66 289.538 cv
350.058 288.642 349.764 287.326 349.764 285.604 cv
349.764 283.896 350.058 282.58 350.66 281.67 cv
351.262 280.774 352.144 280.312 353.292 280.312 cv
ef
415.039 273.009 mo
415.039 276.509 li
f
415.039 273.009 mo
415.039 276.509 li
@
407.592 280.494 mo
413.01 280.494 li
413.01 281.656 li
408.852 281.656 li
408.852 284.162 li
409.048 284.092 409.258 284.036 409.454 284.008 cv
409.65 283.98 409.86 283.952 410.056 283.952 cv
411.19 283.952 412.086 284.274 412.758 284.89 cv
413.43 285.52 413.766 286.36 413.766 287.424 cv
413.766 288.53 413.416 289.384 412.73 289.986 cv
412.044 290.588 411.078 290.882 409.846 290.882 cv
409.412 290.882 408.978 290.84 408.53 290.784 cv
408.082 290.714 407.634 290.616 407.158 290.462 cv
407.158 289.076 li
407.564 289.3 407.984 289.468 408.432 289.58 cv
408.866 289.692 409.328 289.734 409.818 289.734 cv
410.602 289.734 411.232 289.538 411.694 289.118 cv
412.142 288.698 412.38 288.138 412.38 287.424 cv
412.38 286.724 412.142 286.164 411.694 285.744 cv
411.232 285.324 410.602 285.114 409.818 285.114 cv
409.454 285.114 409.076 285.156 408.712 285.24 cv
408.348 285.324 407.97 285.45 407.592 285.618 cv
407.592 280.494 li
ef
419.532 281.404 mo
418.818 281.404 418.286 281.754 417.922 282.454 cv
417.558 283.154 417.39 284.204 417.39 285.604 cv
417.39 287.004 417.558 288.054 417.922 288.754 cv
418.286 289.454 418.818 289.804 419.532 289.804 cv
420.246 289.804 420.778 289.454 421.142 288.754 cv
421.492 288.054 421.674 287.004 421.674 285.604 cv
421.674 284.204 421.492 283.154 421.142 282.454 cv
420.778 281.754 420.246 281.404 419.532 281.404 cv
419.532 280.312 mo
420.666 280.312 421.534 280.774 422.15 281.67 cv
422.752 282.58 423.06 283.896 423.06 285.604 cv
423.06 287.326 422.752 288.642 422.15 289.538 cv
421.534 290.434 420.666 290.882 419.532 290.882 cv
418.384 290.882 417.502 290.434 416.9 289.538 cv
416.298 288.642 416.004 287.326 416.004 285.604 cv
416.004 283.896 416.298 282.58 416.9 281.67 cv
417.502 280.774 418.384 280.312 419.532 280.312 cv
ef
224.158 299.148 mo
224.158 307.086 li
225.824 307.086 li
227.224 307.086 228.26 306.778 228.918 306.134 cv
229.562 305.49 229.898 304.482 229.898 303.11 cv
229.898 301.738 229.562 300.744 228.918 300.1 cv
228.26 299.47 227.224 299.148 225.824 299.148 cv
224.158 299.148 li
222.772 298.014 mo
225.614 298.014 li
227.588 298.014 229.044 298.434 229.968 299.246 cv
230.892 300.072 231.354 301.36 231.354 303.11 cv
231.354 304.874 230.878 306.162 229.954 306.988 cv
229.03 307.814 227.574 308.22 225.614 308.22 cv
222.772 308.22 li
222.772 298.014 li
ef
233.516 300.562 mo
234.776 300.562 li
234.776 308.22 li
233.516 308.22 li
233.516 300.562 li
233.516 297.58 mo
233.516 297.58 mo
234.776 297.58 li
234.776 299.176 li
233.516 299.176 li
cp
ef
242.242 300.786 mo
242.242 301.976 li
241.878 301.808 241.514 301.668 241.136 301.57 cv
240.744 301.486 240.352 301.43 239.946 301.43 cv
239.316 301.43 238.84 301.528 238.532 301.724 cv
238.224 301.92 238.07 302.2 238.07 302.578 cv
238.07 302.872 238.182 303.096 238.406 303.264 cv
238.63 303.432 239.078 303.6 239.75 303.74 cv
240.184 303.838 li
241.08 304.034 241.71 304.314 242.088 304.65 cv
242.452 305 242.648 305.49 242.648 306.106 cv
242.648 306.82 242.368 307.38 241.808 307.786 cv
241.248 308.206 240.464 308.402 239.484 308.402 cv
239.064 308.402 238.644 308.36 238.196 308.29 cv
237.748 308.22 237.286 308.108 236.796 307.94 cv
236.796 306.638 li
237.258 306.89 237.72 307.072 238.168 307.184 cv
238.616 307.31 239.064 307.366 239.512 307.366 cv
240.1 307.366 240.562 307.268 240.884 307.072 cv
241.192 306.876 241.36 306.582 241.36 306.204 cv
241.36 305.868 241.234 305.602 241.01 305.42 cv
240.786 305.238 240.282 305.056 239.498 304.888 cv
239.064 304.79 li
238.28 304.622 237.706 304.37 237.37 304.034 cv
237.02 303.698 236.852 303.236 236.852 302.634 cv
236.852 301.92 237.104 301.36 237.608 300.968 cv
238.112 300.576 238.84 300.38 239.792 300.38 cv
240.254 300.38 240.688 300.422 241.108 300.492 cv
241.514 300.562 241.892 300.66 242.242 300.786 cv
ef
244.634 297.58 mo
245.894 297.58 li
245.894 303.866 li
249.646 300.562 li
251.256 300.562 li
247.196 304.146 li
251.424 308.22 li
249.786 308.22 li
245.894 304.482 li
245.894 308.22 li
244.634 308.22 li
244.634 297.58 li
ef
257.212 308.22 mo
258.598 308.22 li
258.598 298.014 li
257.212 298.014 li
cp
f
262.798 299.148 mo
262.798 307.086 li
264.464 307.086 li
265.864 307.086 266.9 306.778 267.558 306.134 cv
268.202 305.49 268.538 304.482 268.538 303.11 cv
268.538 301.738 268.202 300.744 267.558 300.1 cv
266.9 299.47 265.864 299.148 264.464 299.148 cv
262.798 299.148 li
261.412 298.014 mo
264.254 298.014 li
266.228 298.014 267.684 298.434 268.608 299.246 cv
269.532 300.072 269.994 301.36 269.994 303.11 cv
269.994 304.874 269.518 306.162 268.594 306.988 cv
267.67 307.814 266.214 308.22 264.254 308.22 cv
261.412 308.22 li
261.412 298.014 li
ef
67.526 254.964 mo
64.026 254.964 li
f
67.526 254.964 mo
64.026 254.964 li
@
36.528 259.178 mo
41.344 259.178 li
41.344 260.34 li
34.862 260.34 li
34.862 259.178 li
35.38 258.646 36.094 257.918 37.004 256.994 cv
37.9 256.084 38.474 255.496 38.712 255.23 cv
39.16 254.74 39.468 254.32 39.636 253.97 cv
39.804 253.634 39.902 253.284 39.902 252.948 cv
39.902 252.416 39.706 251.968 39.328 251.632 cv
38.95 251.296 38.46 251.114 37.844 251.114 cv
37.41 251.114 36.948 251.198 36.472 251.338 cv
35.996 251.492 35.478 251.716 34.932 252.024 cv
34.932 250.624 li
35.492 250.4 36.01 250.232 36.486 250.12 cv
36.962 250.008 37.41 249.952 37.816 249.952 cv
38.866 249.952 39.706 250.218 40.336 250.75 cv
40.966 251.282 41.288 251.982 41.288 252.864 cv
41.288 253.284 41.204 253.69 41.05 254.054 cv
40.896 254.432 40.616 254.88 40.196 255.384 cv
40.084 255.524 39.72 255.902 39.104 256.532 cv
38.488 257.162 37.634 258.044 36.528 259.178 cv
ef
44.232 250.134 mo
49.65 250.134 li
49.65 251.296 li
45.492 251.296 li
45.492 253.802 li
45.688 253.732 45.898 253.676 46.094 253.648 cv
46.29 253.62 46.5 253.592 46.696 253.592 cv
47.83 253.592 48.726 253.914 49.398 254.53 cv
50.07 255.16 50.406 256 50.406 257.064 cv
50.406 258.17 50.056 259.024 49.37 259.626 cv
48.684 260.228 47.718 260.522 46.486 260.522 cv
46.052 260.522 45.618 260.48 45.17 260.424 cv
44.722 260.354 44.274 260.256 43.798 260.102 cv
43.798 258.716 li
44.204 258.94 44.624 259.108 45.072 259.22 cv
45.506 259.332 45.968 259.374 46.458 259.374 cv
47.242 259.374 47.872 259.178 48.334 258.758 cv
48.782 258.338 49.02 257.778 49.02 257.064 cv
49.02 256.364 48.782 255.804 48.334 255.384 cv
47.872 254.964 47.242 254.754 46.458 254.754 cv
46.094 254.754 45.716 254.796 45.352 254.88 cv
44.988 254.964 44.61 255.09 44.232 255.258 cv
44.232 250.134 li
ef
56.052 251.044 mo
55.338 251.044 54.806 251.394 54.442 252.094 cv
54.078 252.794 53.91 253.844 53.91 255.244 cv
53.91 256.644 54.078 257.694 54.442 258.394 cv
54.806 259.094 55.338 259.444 56.052 259.444 cv
56.766 259.444 57.298 259.094 57.662 258.394 cv
58.012 257.694 58.194 256.644 58.194 255.244 cv
58.194 253.844 58.012 252.794 57.662 252.094 cv
57.298 251.394 56.766 251.044 56.052 251.044 cv
56.052 249.952 mo
57.186 249.952 58.054 250.414 58.67 251.31 cv
59.272 252.22 59.58 253.536 59.58 255.244 cv
59.58 256.966 59.272 258.282 58.67 259.178 cv
58.054 260.074 57.186 260.522 56.052 260.522 cv
54.904 260.522 54.022 260.074 53.42 259.178 cv
52.818 258.282 52.524 256.966 52.524 255.244 cv
52.524 253.536 52.818 252.22 53.42 251.31 cv
54.022 250.414 54.904 249.952 56.052 249.952 cv
ef
67.526 225.22 mo
64.026 225.22 li
f
67.526 225.22 mo
64.026 225.22 li
@
35.352 220.374 mo
40.77 220.374 li
40.77 221.536 li
36.612 221.536 li
36.612 224.042 li
36.808 223.972 37.018 223.916 37.214 223.888 cv
37.41 223.86 37.62 223.832 37.816 223.832 cv
38.95 223.832 39.846 224.154 40.518 224.77 cv
41.19 225.4 41.526 226.24 41.526 227.304 cv
41.526 228.41 41.176 229.264 40.49 229.866 cv
39.804 230.468 38.838 230.762 37.606 230.762 cv
37.172 230.762 36.738 230.72 36.29 230.664 cv
35.842 230.594 35.394 230.496 34.918 230.342 cv
34.918 228.956 li
35.324 229.18 35.744 229.348 36.192 229.46 cv
36.626 229.572 37.088 229.614 37.578 229.614 cv
38.362 229.614 38.992 229.418 39.454 228.998 cv
39.902 228.578 40.14 228.018 40.14 227.304 cv
40.14 226.604 39.902 226.044 39.454 225.624 cv
38.992 225.204 38.362 224.994 37.578 224.994 cv
37.214 224.994 36.836 225.036 36.472 225.12 cv
36.108 225.204 35.73 225.33 35.352 225.498 cv
35.352 220.374 li
ef
47.172 221.284 mo
46.458 221.284 45.926 221.634 45.562 222.334 cv
45.198 223.034 45.03 224.084 45.03 225.484 cv
45.03 226.884 45.198 227.934 45.562 228.634 cv
45.926 229.334 46.458 229.684 47.172 229.684 cv
47.886 229.684 48.418 229.334 48.782 228.634 cv
49.132 227.934 49.314 226.884 49.314 225.484 cv
49.314 224.084 49.132 223.034 48.782 222.334 cv
48.418 221.634 47.886 221.284 47.172 221.284 cv
47.172 220.192 mo
48.306 220.192 49.174 220.654 49.79 221.55 cv
50.392 222.46 50.7 223.776 50.7 225.484 cv
50.7 227.206 50.392 228.522 49.79 229.418 cv
49.174 230.314 48.306 230.762 47.172 230.762 cv
46.024 230.762 45.142 230.314 44.54 229.418 cv
43.938 228.522 43.644 227.206 43.644 225.484 cv
43.644 223.776 43.938 222.46 44.54 221.55 cv
45.142 220.654 46.024 220.192 47.172 220.192 cv
ef
56.052 221.284 mo
55.338 221.284 54.806 221.634 54.442 222.334 cv
54.078 223.034 53.91 224.084 53.91 225.484 cv
53.91 226.884 54.078 227.934 54.442 228.634 cv
54.806 229.334 55.338 229.684 56.052 229.684 cv
56.766 229.684 57.298 229.334 57.662 228.634 cv
58.012 227.934 58.194 226.884 58.194 225.484 cv
58.194 224.084 58.012 223.034 57.662 222.334 cv
57.298 221.634 56.766 221.284 56.052 221.284 cv
56.052 220.192 mo
57.186 220.192 58.054 220.654 58.67 221.55 cv
59.272 222.46 59.58 223.776 59.58 225.484 cv
59.58 227.206 59.272 228.522 58.67 229.418 cv
58.054 230.314 57.186 230.762 56.052 230.762 cv
54.904 230.762 54.022 230.314 53.42 229.418 cv
52.818 228.522 52.524 227.206 52.524 225.484 cv
52.524 223.776 52.818 222.46 53.42 221.55 cv
54.022 220.654 54.904 220.192 56.052 220.192 cv
ef
67.526 195.476 mo
64.026 195.476 li
f
67.526 195.476 mo
64.026 195.476 li
@
34.988 190.614 mo
41.554 190.614 li
41.554 191.202 li
37.844 200.82 li
36.402 200.82 li
39.888 191.776 li
34.988 191.776 li
34.988 190.614 li
ef
44.232 190.614 mo
49.65 190.614 li
49.65 191.776 li
45.492 191.776 li
45.492 194.282 li
45.688 194.212 45.898 194.156 46.094 194.128 cv
46.29 194.1 46.5 194.072 46.696 194.072 cv
47.83 194.072 48.726 194.394 49.398 195.01 cv
50.07 195.64 50.406 196.48 50.406 197.544 cv
50.406 198.65 50.056 199.504 49.37 200.106 cv
48.684 200.708 47.718 201.002 46.486 201.002 cv
46.052 201.002 45.618 200.96 45.17 200.904 cv
44.722 200.834 44.274 200.736 43.798 200.582 cv
43.798 199.196 li
44.204 199.42 44.624 199.588 45.072 199.7 cv
45.506 199.812 45.968 199.854 46.458 199.854 cv
47.242 199.854 47.872 199.658 48.334 199.238 cv
48.782 198.818 49.02 198.258 49.02 197.544 cv
49.02 196.844 48.782 196.284 48.334 195.864 cv
47.872 195.444 47.242 195.234 46.458 195.234 cv
46.094 195.234 45.716 195.276 45.352 195.36 cv
44.988 195.444 44.61 195.57 44.232 195.738 cv
44.232 190.614 li
ef
56.052 191.524 mo
55.338 191.524 54.806 191.874 54.442 192.574 cv
54.078 193.274 53.91 194.324 53.91 195.724 cv
53.91 197.124 54.078 198.174 54.442 198.874 cv
54.806 199.574 55.338 199.924 56.052 199.924 cv
56.766 199.924 57.298 199.574 57.662 198.874 cv
58.012 198.174 58.194 197.124 58.194 195.724 cv
58.194 194.324 58.012 193.274 57.662 192.574 cv
57.298 191.874 56.766 191.524 56.052 191.524 cv
56.052 190.432 mo
57.186 190.432 58.054 190.894 58.67 191.79 cv
59.272 192.7 59.58 194.016 59.58 195.724 cv
59.58 197.446 59.272 198.762 58.67 199.658 cv
58.054 200.554 57.186 201.002 56.052 201.002 cv
54.904 201.002 54.022 200.554 53.42 199.658 cv
52.818 198.762 52.524 197.446 52.524 195.724 cv
52.524 194.016 52.818 192.7 53.42 191.79 cv
54.022 190.894 54.904 190.432 56.052 190.432 cv
ef
67.526 165.732 mo
64.026 165.732 li
f
67.526 165.732 mo
64.026 165.732 li
@
26.696 169.898 mo
28.95 169.898 li
28.95 162.114 li
26.5 162.604 li
26.5 161.344 li
28.936 160.854 li
30.322 160.854 li
30.322 169.898 li
32.576 169.898 li
32.576 171.06 li
26.696 171.06 li
26.696 169.898 li
ef
38.292 161.764 mo
37.578 161.764 37.046 162.114 36.682 162.814 cv
36.318 163.514 36.15 164.564 36.15 165.964 cv
36.15 167.364 36.318 168.414 36.682 169.114 cv
37.046 169.814 37.578 170.164 38.292 170.164 cv
39.006 170.164 39.538 169.814 39.902 169.114 cv
40.252 168.414 40.434 167.364 40.434 165.964 cv
40.434 164.564 40.252 163.514 39.902 162.814 cv
39.538 162.114 39.006 161.764 38.292 161.764 cv
38.292 160.672 mo
39.426 160.672 40.294 161.134 40.91 162.03 cv
41.512 162.94 41.82 164.256 41.82 165.964 cv
41.82 167.686 41.512 169.002 40.91 169.898 cv
40.294 170.794 39.426 171.242 38.292 171.242 cv
37.144 171.242 36.262 170.794 35.66 169.898 cv
35.058 169.002 34.764 167.686 34.764 165.964 cv
34.764 164.256 35.058 162.94 35.66 162.03 cv
36.262 161.134 37.144 160.672 38.292 160.672 cv
ef
47.172 161.764 mo
46.458 161.764 45.926 162.114 45.562 162.814 cv
45.198 163.514 45.03 164.564 45.03 165.964 cv
45.03 167.364 45.198 168.414 45.562 169.114 cv
45.926 169.814 46.458 170.164 47.172 170.164 cv
47.886 170.164 48.418 169.814 48.782 169.114 cv
49.132 168.414 49.314 167.364 49.314 165.964 cv
49.314 164.564 49.132 163.514 48.782 162.814 cv
48.418 162.114 47.886 161.764 47.172 161.764 cv
47.172 160.672 mo
48.306 160.672 49.174 161.134 49.79 162.03 cv
50.392 162.94 50.7 164.256 50.7 165.964 cv
50.7 167.686 50.392 169.002 49.79 169.898 cv
49.174 170.794 48.306 171.242 47.172 171.242 cv
46.024 171.242 45.142 170.794 44.54 169.898 cv
43.938 169.002 43.644 167.686 43.644 165.964 cv
43.644 164.256 43.938 162.94 44.54 162.03 cv
45.142 161.134 46.024 160.672 47.172 160.672 cv
ef
56.052 161.764 mo
55.338 161.764 54.806 162.114 54.442 162.814 cv
54.078 163.514 53.91 164.564 53.91 165.964 cv
53.91 167.364 54.078 168.414 54.442 169.114 cv
54.806 169.814 55.338 170.164 56.052 170.164 cv
56.766 170.164 57.298 169.814 57.662 169.114 cv
58.012 168.414 58.194 167.364 58.194 165.964 cv
58.194 164.564 58.012 163.514 57.662 162.814 cv
57.298 162.114 56.766 161.764 56.052 161.764 cv
56.052 160.672 mo
57.186 160.672 58.054 161.134 58.67 162.03 cv
59.272 162.94 59.58 164.256 59.58 165.964 cv
59.58 167.686 59.272 169.002 58.67 169.898 cv
58.054 170.794 57.186 171.242 56.052 171.242 cv
54.904 171.242 54.022 170.794 53.42 169.898 cv
52.818 169.002 52.524 167.686 52.524 165.964 cv
52.524 164.256 52.818 162.94 53.42 162.03 cv
54.022 161.134 54.904 160.672 56.052 160.672 cv
ef
67.526 135.987 mo
64.026 135.987 li
f
67.526 135.987 mo
64.026 135.987 li
@
26.696 140.138 mo
28.95 140.138 li
28.95 132.354 li
26.5 132.844 li
26.5 131.584 li
28.936 131.094 li
30.322 131.094 li
30.322 140.138 li
32.576 140.138 li
32.576 141.3 li
26.696 141.3 li
26.696 140.138 li
ef
36.528 140.138 mo
41.344 140.138 li
41.344 141.3 li
34.862 141.3 li
34.862 140.138 li
35.38 139.606 36.094 138.878 37.004 137.954 cv
37.9 137.044 38.474 136.456 38.712 136.19 cv
39.16 135.7 39.468 135.28 39.636 134.93 cv
39.804 134.594 39.902 134.244 39.902 133.908 cv
39.902 133.376 39.706 132.928 39.328 132.592 cv
38.95 132.256 38.46 132.074 37.844 132.074 cv
37.41 132.074 36.948 132.158 36.472 132.298 cv
35.996 132.452 35.478 132.676 34.932 132.984 cv
34.932 131.584 li
35.492 131.36 36.01 131.192 36.486 131.08 cv
36.962 130.968 37.41 130.912 37.816 130.912 cv
38.866 130.912 39.706 131.178 40.336 131.71 cv
40.966 132.242 41.288 132.942 41.288 133.824 cv
41.288 134.244 41.204 134.65 41.05 135.014 cv
40.896 135.392 40.616 135.84 40.196 136.344 cv
40.084 136.484 39.72 136.862 39.104 137.492 cv
38.488 138.122 37.634 139.004 36.528 140.138 cv
ef
44.232 131.094 mo
49.65 131.094 li
49.65 132.256 li
45.492 132.256 li
45.492 134.762 li
45.688 134.692 45.898 134.636 46.094 134.608 cv
46.29 134.58 46.5 134.552 46.696 134.552 cv
47.83 134.552 48.726 134.874 49.398 135.49 cv
50.07 136.12 50.406 136.96 50.406 138.024 cv
50.406 139.13 50.056 139.984 49.37 140.586 cv
48.684 141.188 47.718 141.482 46.486 141.482 cv
46.052 141.482 45.618 141.44 45.17 141.384 cv
44.722 141.314 44.274 141.216 43.798 141.062 cv
43.798 139.676 li
44.204 139.9 44.624 140.068 45.072 140.18 cv
45.506 140.292 45.968 140.334 46.458 140.334 cv
47.242 140.334 47.872 140.138 48.334 139.718 cv
48.782 139.298 49.02 138.738 49.02 138.024 cv
49.02 137.324 48.782 136.764 48.334 136.344 cv
47.872 135.924 47.242 135.714 46.458 135.714 cv
46.094 135.714 45.716 135.756 45.352 135.84 cv
44.988 135.924 44.61 136.05 44.232 136.218 cv
44.232 131.094 li
ef
56.052 132.004 mo
55.338 132.004 54.806 132.354 54.442 133.054 cv
54.078 133.754 53.91 134.804 53.91 136.204 cv
53.91 137.604 54.078 138.654 54.442 139.354 cv
54.806 140.054 55.338 140.404 56.052 140.404 cv
56.766 140.404 57.298 140.054 57.662 139.354 cv
58.012 138.654 58.194 137.604 58.194 136.204 cv
58.194 134.804 58.012 133.754 57.662 133.054 cv
57.298 132.354 56.766 132.004 56.052 132.004 cv
56.052 130.912 mo
57.186 130.912 58.054 131.374 58.67 132.27 cv
59.272 133.18 59.58 134.496 59.58 136.204 cv
59.58 137.926 59.272 139.242 58.67 140.138 cv
58.054 141.034 57.186 141.482 56.052 141.482 cv
54.904 141.482 54.022 141.034 53.42 140.138 cv
52.818 139.242 52.524 137.926 52.524 136.204 cv
52.524 134.496 52.818 133.18 53.42 132.27 cv
54.022 131.374 54.904 130.912 56.052 130.912 cv
ef
67.526 106.243 mo
64.026 106.243 li
f
67.526 106.243 mo
64.026 106.243 li
@
26.696 110.378 mo
28.95 110.378 li
28.95 102.594 li
26.5 103.084 li
26.5 101.824 li
28.936 101.334 li
30.322 101.334 li
30.322 110.378 li
32.576 110.378 li
32.576 111.54 li
26.696 111.54 li
26.696 110.378 li
ef
35.352 101.334 mo
40.77 101.334 li
40.77 102.496 li
36.612 102.496 li
36.612 105.002 li
36.808 104.932 37.018 104.876 37.214 104.848 cv
37.41 104.82 37.62 104.792 37.816 104.792 cv
38.95 104.792 39.846 105.114 40.518 105.73 cv
41.19 106.36 41.526 107.2 41.526 108.264 cv
41.526 109.37 41.176 110.224 40.49 110.826 cv
39.804 111.428 38.838 111.722 37.606 111.722 cv
37.172 111.722 36.738 111.68 36.29 111.624 cv
35.842 111.554 35.394 111.456 34.918 111.302 cv
34.918 109.916 li
35.324 110.14 35.744 110.308 36.192 110.42 cv
36.626 110.532 37.088 110.574 37.578 110.574 cv
38.362 110.574 38.992 110.378 39.454 109.958 cv
39.902 109.538 40.14 108.978 40.14 108.264 cv
40.14 107.564 39.902 107.004 39.454 106.584 cv
38.992 106.164 38.362 105.954 37.578 105.954 cv
37.214 105.954 36.836 105.996 36.472 106.08 cv
36.108 106.164 35.73 106.29 35.352 106.458 cv
35.352 101.334 li
ef
47.172 102.244 mo
46.458 102.244 45.926 102.594 45.562 103.294 cv
45.198 103.994 45.03 105.044 45.03 106.444 cv
45.03 107.844 45.198 108.894 45.562 109.594 cv
45.926 110.294 46.458 110.644 47.172 110.644 cv
47.886 110.644 48.418 110.294 48.782 109.594 cv
49.132 108.894 49.314 107.844 49.314 106.444 cv
49.314 105.044 49.132 103.994 48.782 103.294 cv
48.418 102.594 47.886 102.244 47.172 102.244 cv
47.172 101.152 mo
48.306 101.152 49.174 101.614 49.79 102.51 cv
50.392 103.42 50.7 104.736 50.7 106.444 cv
50.7 108.166 50.392 109.482 49.79 110.378 cv
49.174 111.274 48.306 111.722 47.172 111.722 cv
46.024 111.722 45.142 111.274 44.54 110.378 cv
43.938 109.482 43.644 108.166 43.644 106.444 cv
43.644 104.736 43.938 103.42 44.54 102.51 cv
45.142 101.614 46.024 101.152 47.172 101.152 cv
ef
56.052 102.244 mo
55.338 102.244 54.806 102.594 54.442 103.294 cv
54.078 103.994 53.91 105.044 53.91 106.444 cv
53.91 107.844 54.078 108.894 54.442 109.594 cv
54.806 110.294 55.338 110.644 56.052 110.644 cv
56.766 110.644 57.298 110.294 57.662 109.594 cv
58.012 108.894 58.194 107.844 58.194 106.444 cv
58.194 105.044 58.012 103.994 57.662 103.294 cv
57.298 102.594 56.766 102.244 56.052 102.244 cv
56.052 101.152 mo
57.186 101.152 58.054 101.614 58.67 102.51 cv
59.272 103.42 59.58 104.736 59.58 106.444 cv
59.58 108.166 59.272 109.482 58.67 110.378 cv
58.054 111.274 57.186 111.722 56.052 111.722 cv
54.904 111.722 54.022 111.274 53.42 110.378 cv
52.818 109.482 52.524 108.166 52.524 106.444 cv
52.524 104.736 52.818 103.42 53.42 102.51 cv
54.022 101.614 54.904 101.152 56.052 101.152 cv
ef
67.526 76.499 mo
64.026 76.499 li
f
67.526 76.499 mo
64.026 76.499 li
@
26.696 80.618 mo
28.95 80.618 li
28.95 72.834 li
26.5 73.324 li
26.5 72.064 li
28.936 71.574 li
30.322 71.574 li
30.322 80.618 li
32.576 80.618 li
32.576 81.78 li
26.696 81.78 li
26.696 80.618 li
ef
34.988 71.574 mo
41.554 71.574 li
41.554 72.162 li
37.844 81.78 li
36.402 81.78 li
39.888 72.736 li
34.988 72.736 li
34.988 71.574 li
ef
44.232 71.574 mo
49.65 71.574 li
49.65 72.736 li
45.492 72.736 li
45.492 75.242 li
45.688 75.172 45.898 75.116 46.094 75.088 cv
46.29 75.06 46.5 75.032 46.696 75.032 cv
47.83 75.032 48.726 75.354 49.398 75.97 cv
50.07 76.6 50.406 77.44 50.406 78.504 cv
50.406 79.61 50.056 80.464 49.37 81.066 cv
48.684 81.668 47.718 81.962 46.486 81.962 cv
46.052 81.962 45.618 81.92 45.17 81.864 cv
44.722 81.794 44.274 81.696 43.798 81.542 cv
43.798 80.156 li
44.204 80.38 44.624 80.548 45.072 80.66 cv
45.506 80.772 45.968 80.814 46.458 80.814 cv
47.242 80.814 47.872 80.618 48.334 80.198 cv
48.782 79.778 49.02 79.218 49.02 78.504 cv
49.02 77.804 48.782 77.244 48.334 76.824 cv
47.872 76.404 47.242 76.194 46.458 76.194 cv
46.094 76.194 45.716 76.236 45.352 76.32 cv
44.988 76.404 44.61 76.53 44.232 76.698 cv
44.232 71.574 li
ef
56.052 72.484 mo
55.338 72.484 54.806 72.834 54.442 73.534 cv
54.078 74.234 53.91 75.284 53.91 76.684 cv
53.91 78.084 54.078 79.134 54.442 79.834 cv
54.806 80.534 55.338 80.884 56.052 80.884 cv
56.766 80.884 57.298 80.534 57.662 79.834 cv
58.012 79.134 58.194 78.084 58.194 76.684 cv
58.194 75.284 58.012 74.234 57.662 73.534 cv
57.298 72.834 56.766 72.484 56.052 72.484 cv
56.052 71.392 mo
57.186 71.392 58.054 71.854 58.67 72.75 cv
59.272 73.66 59.58 74.976 59.58 76.684 cv
59.58 78.406 59.272 79.722 58.67 80.618 cv
58.054 81.514 57.186 81.962 56.052 81.962 cv
54.904 81.962 54.022 81.514 53.42 80.618 cv
52.818 79.722 52.524 78.406 52.524 76.684 cv
52.524 74.976 52.818 73.66 53.42 72.75 cv
54.022 71.854 54.904 71.392 56.052 71.392 cv
ef
67.526 46.755 mo
64.026 46.755 li
f
67.526 46.755 mo
64.026 46.755 li
@
27.648 50.858 mo
32.464 50.858 li
32.464 52.02 li
25.982 52.02 li
25.982 50.858 li
26.5 50.326 27.214 49.598 28.124 48.674 cv
29.02 47.764 29.594 47.176 29.832 46.91 cv
30.28 46.42 30.588 46 30.756 45.65 cv
30.924 45.314 31.022 44.964 31.022 44.628 cv
31.022 44.096 30.826 43.648 30.448 43.312 cv
30.07 42.976 29.58 42.794 28.964 42.794 cv
28.53 42.794 28.068 42.878 27.592 43.018 cv
27.116 43.172 26.598 43.396 26.052 43.704 cv
26.052 42.304 li
26.612 42.08 27.13 41.912 27.606 41.8 cv
28.082 41.688 28.53 41.632 28.936 41.632 cv
29.986 41.632 30.826 41.898 31.456 42.43 cv
32.086 42.962 32.408 43.662 32.408 44.544 cv
32.408 44.964 32.324 45.37 32.17 45.734 cv
32.016 46.112 31.736 46.56 31.316 47.064 cv
31.204 47.204 30.84 47.582 30.224 48.212 cv
29.608 48.842 28.754 49.724 27.648 50.858 cv
ef
38.292 42.724 mo
37.578 42.724 37.046 43.074 36.682 43.774 cv
36.318 44.474 36.15 45.524 36.15 46.924 cv
36.15 48.324 36.318 49.374 36.682 50.074 cv
37.046 50.774 37.578 51.124 38.292 51.124 cv
39.006 51.124 39.538 50.774 39.902 50.074 cv
40.252 49.374 40.434 48.324 40.434 46.924 cv
40.434 45.524 40.252 44.474 39.902 43.774 cv
39.538 43.074 39.006 42.724 38.292 42.724 cv
38.292 41.632 mo
39.426 41.632 40.294 42.094 40.91 42.99 cv
41.512 43.9 41.82 45.216 41.82 46.924 cv
41.82 48.646 41.512 49.962 40.91 50.858 cv
40.294 51.754 39.426 52.202 38.292 52.202 cv
37.144 52.202 36.262 51.754 35.66 50.858 cv
35.058 49.962 34.764 48.646 34.764 46.924 cv
34.764 45.216 35.058 43.9 35.66 42.99 cv
36.262 42.094 37.144 41.632 38.292 41.632 cv
ef
47.172 42.724 mo
46.458 42.724 45.926 43.074 45.562 43.774 cv
45.198 44.474 45.03 45.524 45.03 46.924 cv
45.03 48.324 45.198 49.374 45.562 50.074 cv
45.926 50.774 46.458 51.124 47.172 51.124 cv
47.886 51.124 48.418 50.774 48.782 50.074 cv
49.132 49.374 49.314 48.324 49.314 46.924 cv
49.314 45.524 49.132 44.474 48.782 43.774 cv
48.418 43.074 47.886 42.724 47.172 42.724 cv
47.172 41.632 mo
48.306 41.632 49.174 42.094 49.79 42.99 cv
50.392 43.9 50.7 45.216 50.7 46.924 cv
50.7 48.646 50.392 49.962 49.79 50.858 cv
49.174 51.754 48.306 52.202 47.172 52.202 cv
46.024 52.202 45.142 51.754 44.54 50.858 cv
43.938 49.962 43.644 48.646 43.644 46.924 cv
43.644 45.216 43.938 43.9 44.54 42.99 cv
45.142 42.094 46.024 41.632 47.172 41.632 cv
ef
56.052 42.724 mo
55.338 42.724 54.806 43.074 54.442 43.774 cv
54.078 44.474 53.91 45.524 53.91 46.924 cv
53.91 48.324 54.078 49.374 54.442 50.074 cv
54.806 50.774 55.338 51.124 56.052 51.124 cv
56.766 51.124 57.298 50.774 57.662 50.074 cv
58.012 49.374 58.194 48.324 58.194 46.924 cv
58.194 45.524 58.012 44.474 57.662 43.774 cv
57.298 43.074 56.766 42.724 56.052 42.724 cv
56.052 41.632 mo
57.186 41.632 58.054 42.094 58.67 42.99 cv
59.272 43.9 59.58 45.216 59.58 46.924 cv
59.58 48.646 59.272 49.962 58.67 50.858 cv
58.054 51.754 57.186 52.202 56.052 52.202 cv
54.904 52.202 54.022 51.754 53.42 50.858 cv
52.818 49.962 52.524 48.646 52.524 46.924 cv
52.524 45.216 52.818 43.9 53.42 42.99 cv
54.022 42.094 54.904 41.632 56.052 41.632 cv
ef
67.526 17.01 mo
64.026 17.01 li
f
67.526 17.01 mo
64.026 17.01 li
@
27.648 21.218 mo
32.464 21.218 li
32.464 22.38 li
25.982 22.38 li
25.982 21.218 li
26.5 20.686 27.214 19.958 28.124 19.034 cv
29.02 18.124 29.594 17.536 29.832 17.27 cv
30.28 16.78 30.588 16.36 30.756 16.01 cv
30.924 15.674 31.022 15.324 31.022 14.988 cv
31.022 14.456 30.826 14.008 30.448 13.672 cv
30.07 13.336 29.58 13.154 28.964 13.154 cv
28.53 13.154 28.068 13.238 27.592 13.378 cv
27.116 13.532 26.598 13.756 26.052 14.064 cv
26.052 12.664 li
26.612 12.44 27.13 12.272 27.606 12.16 cv
28.082 12.048 28.53 11.992 28.936 11.992 cv
29.986 11.992 30.826 12.258 31.456 12.79 cv
32.086 13.322 32.408 14.022 32.408 14.904 cv
32.408 15.324 32.324 15.73 32.17 16.094 cv
32.016 16.472 31.736 16.92 31.316 17.424 cv
31.204 17.564 30.84 17.942 30.224 18.572 cv
29.608 19.202 28.754 20.084 27.648 21.218 cv
ef
36.528 21.218 mo
41.344 21.218 li
41.344 22.38 li
34.862 22.38 li
34.862 21.218 li
35.38 20.686 36.094 19.958 37.004 19.034 cv
37.9 18.124 38.474 17.536 38.712 17.27 cv
39.16 16.78 39.468 16.36 39.636 16.01 cv
39.804 15.674 39.902 15.324 39.902 14.988 cv
39.902 14.456 39.706 14.008 39.328 13.672 cv
38.95 13.336 38.46 13.154 37.844 13.154 cv
37.41 13.154 36.948 13.238 36.472 13.378 cv
35.996 13.532 35.478 13.756 34.932 14.064 cv
34.932 12.664 li
35.492 12.44 36.01 12.272 36.486 12.16 cv
36.962 12.048 37.41 11.992 37.816 11.992 cv
38.866 11.992 39.706 12.258 40.336 12.79 cv
40.966 13.322 41.288 14.022 41.288 14.904 cv
41.288 15.324 41.204 15.73 41.05 16.094 cv
40.896 16.472 40.616 16.92 40.196 17.424 cv
40.084 17.564 39.72 17.942 39.104 18.572 cv
38.488 19.202 37.634 20.084 36.528 21.218 cv
ef
44.232 12.174 mo
49.65 12.174 li
49.65 13.336 li
45.492 13.336 li
45.492 15.842 li
45.688 15.772 45.898 15.716 46.094 15.688 cv
46.29 15.66 46.5 15.632 46.696 15.632 cv
47.83 15.632 48.726 15.954 49.398 16.57 cv
50.07 17.2 50.406 18.04 50.406 19.104 cv
50.406 20.21 50.056 21.064 49.37 21.666 cv
48.684 22.268 47.718 22.562 46.486 22.562 cv
46.052 22.562 45.618 22.52 45.17 22.464 cv
44.722 22.394 44.274 22.296 43.798 22.142 cv
43.798 20.756 li
44.204 20.98 44.624 21.148 45.072 21.26 cv
45.506 21.372 45.968 21.414 46.458 21.414 cv
47.242 21.414 47.872 21.218 48.334 20.798 cv
48.782 20.378 49.02 19.818 49.02 19.104 cv
49.02 18.404 48.782 17.844 48.334 17.424 cv
47.872 17.004 47.242 16.794 46.458 16.794 cv
46.094 16.794 45.716 16.836 45.352 16.92 cv
44.988 17.004 44.61 17.13 44.232 17.298 cv
44.232 12.174 li
ef
56.052 13.084 mo
55.338 13.084 54.806 13.434 54.442 14.134 cv
54.078 14.834 53.91 15.884 53.91 17.284 cv
53.91 18.684 54.078 19.734 54.442 20.434 cv
54.806 21.134 55.338 21.484 56.052 21.484 cv
56.766 21.484 57.298 21.134 57.662 20.434 cv
58.012 19.734 58.194 18.684 58.194 17.284 cv
58.194 15.884 58.012 14.834 57.662 14.134 cv
57.298 13.434 56.766 13.084 56.052 13.084 cv
56.052 11.992 mo
57.186 11.992 58.054 12.454 58.67 13.35 cv
59.272 14.26 59.58 15.576 59.58 17.284 cv
59.58 19.006 59.272 20.322 58.67 21.218 cv
58.054 22.114 57.186 22.562 56.052 22.562 cv
54.904 22.562 54.022 22.114 53.42 21.218 cv
52.818 20.322 52.524 19.006 52.524 17.284 cv
52.524 15.576 52.818 14.26 53.42 13.35 cv
54.022 12.454 54.904 11.992 56.052 11.992 cv
ef
7.794 221.368 mo
7.794 212.744 li
8.956 212.744 li
8.956 216.37 li
18 216.37 li
18 217.756 li
8.956 217.756 li
8.956 221.368 li
7.794 221.368 li
ef
14.15 208.018 mo
14.15 209.04 14.276 209.74 14.5 210.132 cv
14.738 210.524 15.13 210.72 15.69 210.72 cv
16.138 210.72 16.502 210.58 16.754 210.286 cv
17.02 209.992 17.146 209.586 17.146 209.082 cv
17.146 208.382 16.908 207.822 16.404 207.402 cv
15.914 206.982 15.256 206.772 14.43 206.772 cv
14.15 206.772 li
14.15 208.018 li
13.632 205.512 mo
18 205.512 li
18 206.772 li
16.838 206.772 li
17.314 207.066 17.65 207.43 17.86 207.85 cv
18.07 208.27 18.182 208.802 18.182 209.418 cv
18.182 210.202 17.972 210.832 17.538 211.294 cv
17.104 211.756 16.516 211.98 15.774 211.98 cv
14.92 211.98 14.276 211.7 13.828 211.112 cv
13.394 210.538 13.17 209.684 13.17 208.536 cv
13.17 206.772 li
13.044 206.772 li
12.47 206.772 12.022 206.968 11.7 207.346 cv
11.392 207.724 11.224 208.256 11.224 208.942 cv
11.224 209.39 11.28 209.81 11.392 210.23 cv
11.504 210.65 11.658 211.042 11.854 211.42 cv
10.692 211.42 li
10.524 210.972 10.384 210.524 10.3 210.09 cv
10.216 209.656 10.16 209.236 10.16 208.816 cv
10.16 207.71 10.454 206.884 11.028 206.338 cv
11.602 205.792 12.47 205.512 13.632 205.512 cv
ef
10.566 198.098 mo
11.756 198.098 li
11.588 198.462 11.448 198.826 11.35 199.204 cv
11.266 199.596 11.21 199.988 11.21 200.394 cv
11.21 201.024 11.308 201.5 11.504 201.808 cv
11.7 202.116 11.98 202.27 12.358 202.27 cv
12.652 202.27 12.876 202.158 13.044 201.934 cv
13.212 201.71 13.38 201.262 13.52 200.59 cv
13.618 200.156 li
13.814 199.26 14.094 198.63 14.43 198.252 cv
14.78 197.888 15.27 197.692 15.886 197.692 cv
16.6 197.692 17.16 197.972 17.566 198.532 cv
17.986 199.092 18.182 199.876 18.182 200.856 cv
18.182 201.276 18.14 201.696 18.07 202.144 cv
18 202.592 17.888 203.054 17.72 203.544 cv
16.418 203.544 li
16.67 203.082 16.852 202.62 16.964 202.172 cv
17.09 201.724 17.146 201.276 17.146 200.828 cv
17.146 200.24 17.048 199.778 16.852 199.456 cv
16.656 199.148 16.362 198.98 15.984 198.98 cv
15.648 198.98 15.382 199.106 15.2 199.33 cv
15.018 199.554 14.836 200.058 14.668 200.842 cv
14.57 201.276 li
14.402 202.06 14.15 202.634 13.814 202.97 cv
13.478 203.32 13.016 203.488 12.414 203.488 cv
11.7 203.488 11.14 203.236 10.748 202.732 cv
10.356 202.228 10.16 201.5 10.16 200.548 cv
10.16 200.086 10.202 199.652 10.272 199.232 cv
10.342 198.826 10.44 198.448 10.566 198.098 cv
ef
7.36 195.706 mo
7.36 194.446 li
13.646 194.446 li
10.342 190.694 li
10.342 189.084 li
13.926 193.144 li
18 188.916 li
18 190.554 li
14.262 194.446 li
18 194.446 li
18 195.706 li
7.36 195.706 li
ef
11.518 178.626 mo
11.434 178.766 11.378 178.92 11.336 179.088 cv
11.308 179.256 11.28 179.438 11.28 179.634 cv
11.28 180.348 11.518 180.894 11.98 181.272 cv
12.442 181.664 13.1 181.846 13.968 181.846 cv
18 181.846 li
18 183.106 li
10.342 183.106 li
10.342 181.846 li
11.532 181.846 li
11.07 181.594 10.72 181.244 10.496 180.824 cv
10.272 180.404 10.16 179.886 10.16 179.27 cv
10.16 179.186 10.174 179.088 10.174 178.976 cv
10.188 178.878 10.202 178.766 10.23 178.626 cv
11.518 178.626 li
ef
13.856 170.752 mo
14.472 170.752 li
14.472 176.534 li
15.34 176.478 16.012 176.226 16.46 175.75 cv
16.908 175.288 17.132 174.644 17.132 173.804 cv
17.132 173.328 17.076 172.852 16.964 172.404 cv
16.852 171.956 16.67 171.494 16.418 171.046 cv
17.608 171.046 li
17.804 171.494 17.958 171.956 18.042 172.432 cv
18.126 172.908 18.182 173.398 18.182 173.874 cv
18.182 175.106 17.832 176.072 17.132 176.786 cv
16.432 177.5 15.466 177.85 14.248 177.85 cv
13.002 177.85 12.008 177.514 11.266 176.842 cv
10.538 176.17 10.16 175.246 10.16 174.098 cv
10.16 173.062 10.496 172.25 11.154 171.648 cv
11.826 171.06 12.722 170.752 13.856 170.752 cv
13.492 172.012 mo
12.806 172.026 12.26 172.222 11.84 172.586 cv
11.434 172.964 11.224 173.468 11.224 174.084 cv
11.224 174.784 11.434 175.344 11.826 175.764 cv
12.218 176.184 12.778 176.436 13.492 176.492 cv
13.492 172.012 li
ef
14.15 165.298 mo
14.15 166.32 14.276 167.02 14.5 167.412 cv
14.738 167.804 15.13 168 15.69 168 cv
16.138 168 16.502 167.86 16.754 167.566 cv
17.02 167.272 17.146 166.866 17.146 166.362 cv
17.146 165.662 16.908 165.102 16.404 164.682 cv
15.914 164.262 15.256 164.052 14.43 164.052 cv
14.15 164.052 li
14.15 165.298 li
13.632 162.792 mo
18 162.792 li
18 164.052 li
16.838 164.052 li
17.314 164.346 17.65 164.71 17.86 165.13 cv
18.07 165.55 18.182 166.082 18.182 166.698 cv
18.182 167.482 17.972 168.112 17.538 168.574 cv
17.104 169.036 16.516 169.26 15.774 169.26 cv
14.92 169.26 14.276 168.98 13.828 168.392 cv
13.394 167.818 13.17 166.964 13.17 165.816 cv
13.17 164.052 li
13.044 164.052 li
12.47 164.052 12.022 164.248 11.7 164.626 cv
11.392 165.004 11.224 165.536 11.224 166.222 cv
11.224 166.67 11.28 167.09 11.392 167.51 cv
11.504 167.93 11.658 168.322 11.854 168.7 cv
10.692 168.7 li
10.524 168.252 10.384 167.804 10.3 167.37 cv
10.216 166.936 10.16 166.516 10.16 166.096 cv
10.16 164.99 10.454 164.164 11.028 163.618 cv
11.602 163.072 12.47 162.792 13.632 162.792 cv
ef
11.504 155.104 mo
7.36 155.104 li
7.36 153.844 li
18 153.844 li
18 155.104 li
16.852 155.104 li
17.314 155.37 17.65 155.706 17.86 156.112 cv
18.07 156.518 18.182 156.994 18.182 157.554 cv
18.182 158.478 17.818 159.234 17.09 159.822 cv
16.362 160.41 15.382 160.69 14.178 160.69 cv
12.974 160.69 12.008 160.41 11.266 159.822 cv
10.538 159.234 10.16 158.478 10.16 157.554 cv
10.16 156.994 10.272 156.518 10.496 156.112 cv
10.72 155.706 11.056 155.37 11.504 155.104 cv
14.178 159.388 mo
15.102 159.388 15.83 159.206 16.362 158.828 cv
16.894 158.45 17.146 157.918 17.146 157.246 cv
17.146 156.588 16.894 156.07 16.362 155.678 cv
15.83 155.3 15.102 155.104 14.178 155.104 cv
13.254 155.104 12.54 155.3 12.008 155.678 cv
11.476 156.07 11.21 156.588 11.21 157.246 cv
11.21 157.918 11.476 158.45 12.008 158.828 cv
12.54 159.206 13.254 159.388 14.178 159.388 cv
ef
10.342 151.264 mo
10.342 150.004 li
18 150.004 li
18 151.264 li
10.342 151.264 li
7.36 151.264 mo
8.956 151.264 mo
7.36 151.264 li
7.36 150.004 li
8.956 150.004 li
cp
ef
13.38 141.054 mo
18 141.054 li
18 142.314 li
13.422 142.314 li
12.694 142.314 12.162 142.468 11.798 142.748 cv
11.434 143.028 11.252 143.448 11.252 144.008 cv
11.252 144.694 11.476 145.226 11.91 145.618 cv
12.344 146.01 12.932 146.206 13.674 146.206 cv
18 146.206 li
18 147.466 li
10.342 147.466 li
10.342 146.206 li
11.532 146.206 li
11.084 145.912 10.734 145.562 10.51 145.142 cv
10.286 144.736 10.16 144.26 10.16 143.728 cv
10.16 142.86 10.44 142.188 10.986 141.74 cv
11.532 141.292 12.33 141.054 13.38 141.054 cv
ef
14.08 133.504 mo
13.184 133.504 12.47 133.7 11.966 134.064 cv
11.462 134.442 11.21 134.974 11.21 135.646 cv
11.21 136.318 11.462 136.85 11.966 137.228 cv
12.47 137.606 13.184 137.788 14.08 137.788 cv
14.99 137.788 15.69 137.606 16.194 137.228 cv
16.698 136.85 16.95 136.318 16.95 135.646 cv
16.95 134.974 16.698 134.442 16.194 134.064 cv
15.69 133.7 14.99 133.504 14.08 133.504 cv
17.048 132.244 mo
18.336 132.244 19.302 132.538 19.946 133.112 cv
20.576 133.7 20.898 134.582 20.898 135.772 cv
20.898 136.22 20.856 136.626 20.8 137.018 cv
20.73 137.41 20.632 137.802 20.492 138.166 cv
19.274 138.166 li
19.47 137.802 19.61 137.438 19.708 137.074 cv
19.806 136.71 19.862 136.346 19.862 135.968 cv
19.862 135.156 19.638 134.54 19.218 134.12 cv
18.784 133.714 18.14 133.504 17.272 133.504 cv
16.656 133.504 li
17.104 133.77 17.44 134.106 17.664 134.512 cv
17.888 134.918 18 135.394 18 135.954 cv
18 136.906 17.65 137.662 16.936 138.236 cv
16.222 138.81 15.27 139.09 14.08 139.09 cv
12.904 139.09 11.952 138.81 11.238 138.236 cv
10.524 137.662 10.16 136.906 10.16 135.954 cv
10.16 135.394 10.272 134.918 10.496 134.512 cv
10.72 134.106 11.056 133.77 11.504 133.504 cv
10.342 133.504 li
10.342 132.244 li
17.048 132.244 li
ef
8.172 123.978 mo
10.342 123.978 li
10.342 121.388 li
11.322 121.388 li
11.322 123.978 li
15.48 123.978 li
16.11 123.978 16.516 123.894 16.684 123.726 cv
16.866 123.558 16.95 123.208 16.95 122.676 cv
16.95 121.388 li
18 121.388 li
18 122.676 li
18 123.656 17.818 124.328 17.454 124.692 cv
17.09 125.056 16.432 125.238 15.48 125.238 cv
11.322 125.238 li
11.322 126.162 li
10.342 126.162 li
10.342 125.238 li
8.172 125.238 li
8.172 123.978 li
ef
10.342 119.704 mo
10.342 118.444 li
18 118.444 li
18 119.704 li
10.342 119.704 li
7.36 119.704 mo
8.956 119.704 mo
7.36 119.704 li
7.36 118.444 li
8.956 118.444 li
cp
ef
11.812 109.78 mo
11.252 109.472 10.846 109.094 10.566 108.66 cv
10.3 108.226 10.16 107.708 10.16 107.106 cv
10.16 106.322 10.44 105.706 11 105.272 cv
11.56 104.838 12.358 104.614 13.38 104.614 cv
18 104.614 li
18 105.874 li
13.422 105.874 li
12.694 105.874 12.148 106.014 11.784 106.266 cv
11.434 106.532 11.252 106.924 11.252 107.456 cv
11.252 108.114 11.476 108.632 11.91 109.01 cv
12.344 109.388 12.932 109.57 13.674 109.57 cv
18 109.57 li
18 110.83 li
13.422 110.83 li
12.694 110.83 12.148 110.97 11.784 111.222 cv
11.434 111.488 11.252 111.894 11.252 112.426 cv
11.252 113.07 11.476 113.588 11.91 113.966 cv
12.344 114.344 12.932 114.526 13.674 114.526 cv
18 114.526 li
18 115.786 li
10.342 115.786 li
10.342 114.526 li
11.532 114.526 li
11.07 114.246 10.72 113.896 10.496 113.49 cv
10.272 113.098 10.16 112.622 10.16 112.062 cv
10.16 111.502 10.3 111.04 10.58 110.648 cv
10.86 110.256 11.28 109.976 11.812 109.78 cv
ef
13.856 95.632 mo
14.472 95.632 li
14.472 101.414 li
15.34 101.358 16.012 101.106 16.46 100.63 cv
16.908 100.168 17.132 99.524 17.132 98.684 cv
17.132 98.208 17.076 97.732 16.964 97.284 cv
16.852 96.836 16.67 96.374 16.418 95.926 cv
17.608 95.926 li
17.804 96.374 17.958 96.836 18.042 97.312 cv
18.126 97.788 18.182 98.278 18.182 98.754 cv
18.182 99.986 17.832 100.952 17.132 101.666 cv
16.432 102.38 15.466 102.73 14.248 102.73 cv
13.002 102.73 12.008 102.394 11.266 101.722 cv
10.538 101.05 10.16 100.126 10.16 98.978 cv
10.16 97.942 10.496 97.13 11.154 96.528 cv
11.826 95.94 12.722 95.632 13.856 95.632 cv
13.492 96.892 mo
12.806 96.906 12.26 97.102 11.84 97.466 cv
11.434 97.844 11.224 98.348 11.224 98.964 cv
11.224 99.664 11.434 100.224 11.826 100.644 cv
12.218 101.064 12.778 101.316 13.492 101.372 cv
13.492 96.892 li
ef
7.374 86.08 mo
8.438 86.696 9.474 87.144 10.496 87.438 cv
11.518 87.746 12.554 87.886 13.604 87.886 cv
14.668 87.886 15.704 87.746 16.726 87.438 cv
17.762 87.144 18.784 86.696 19.834 86.08 cv
19.834 87.172 li
18.756 87.858 17.72 88.376 16.684 88.712 cv
15.648 89.048 14.626 89.216 13.604 89.216 cv
12.596 89.216 11.574 89.048 10.538 88.712 cv
9.502 88.376 8.452 87.872 7.374 87.172 cv
7.374 86.08 li
ef
11.812 77.62 mo
11.252 77.312 10.846 76.934 10.566 76.5 cv
10.3 76.066 10.16 75.548 10.16 74.946 cv
10.16 74.162 10.44 73.546 11 73.112 cv
11.56 72.678 12.358 72.454 13.38 72.454 cv
18 72.454 li
18 73.714 li
13.422 73.714 li
12.694 73.714 12.148 73.854 11.784 74.106 cv
11.434 74.372 11.252 74.764 11.252 75.296 cv
11.252 75.954 11.476 76.472 11.91 76.85 cv
12.344 77.228 12.932 77.41 13.674 77.41 cv
18 77.41 li
18 78.67 li
13.422 78.67 li
12.694 78.67 12.148 78.81 11.784 79.062 cv
11.434 79.328 11.252 79.734 11.252 80.266 cv
11.252 80.91 11.476 81.428 11.91 81.806 cv
12.344 82.184 12.932 82.366 13.674 82.366 cv
18 82.366 li
18 83.626 li
10.342 83.626 li
10.342 82.366 li
11.532 82.366 li
11.07 82.086 10.72 81.736 10.496 81.33 cv
10.272 80.938 10.16 80.462 10.16 79.902 cv
10.16 79.342 10.3 78.88 10.58 78.488 cv
10.86 78.096 11.28 77.816 11.812 77.62 cv
ef
10.566 65.138 mo
11.756 65.138 li
11.588 65.502 11.448 65.866 11.35 66.244 cv
11.266 66.636 11.21 67.028 11.21 67.434 cv
11.21 68.064 11.308 68.54 11.504 68.848 cv
11.7 69.156 11.98 69.31 12.358 69.31 cv
12.652 69.31 12.876 69.198 13.044 68.974 cv
13.212 68.75 13.38 68.302 13.52 67.63 cv
13.618 67.196 li
13.814 66.3 14.094 65.67 14.43 65.292 cv
14.78 64.928 15.27 64.732 15.886 64.732 cv
16.6 64.732 17.16 65.012 17.566 65.572 cv
17.986 66.132 18.182 66.916 18.182 67.896 cv
18.182 68.316 18.14 68.736 18.07 69.184 cv
18 69.632 17.888 70.094 17.72 70.584 cv
16.418 70.584 li
16.67 70.122 16.852 69.66 16.964 69.212 cv
17.09 68.764 17.146 68.316 17.146 67.868 cv
17.146 67.28 17.048 66.818 16.852 66.496 cv
16.656 66.188 16.362 66.02 15.984 66.02 cv
15.648 66.02 15.382 66.146 15.2 66.37 cv
15.018 66.594 14.836 67.098 14.668 67.882 cv
14.57 68.316 li
14.402 69.1 14.15 69.674 13.814 70.01 cv
13.478 70.36 13.016 70.528 12.414 70.528 cv
11.7 70.528 11.14 70.276 10.748 69.772 cv
10.356 69.268 10.16 68.54 10.16 67.588 cv
10.16 67.126 10.202 66.692 10.272 66.272 cv
10.342 65.866 10.44 65.488 10.566 65.138 cv
ef
7.374 62.9 mo
7.374 61.808 li
8.452 61.136 9.502 60.618 10.538 60.282 cv
11.574 59.946 12.596 59.764 13.604 59.764 cv
14.626 59.764 15.648 59.946 16.684 60.282 cv
17.72 60.618 18.756 61.136 19.834 61.808 cv
19.834 62.9 li
18.784 62.298 17.762 61.85 16.726 61.542 cv
15.704 61.248 14.668 61.094 13.604 61.094 cv
12.554 61.094 11.518 61.248 10.496 61.542 cv
9.474 61.85 8.438 62.298 7.374 62.9 cv
ef
1.5 lw
2 lc
83.759 54.686 mo
90.385 74.515 li
97.01 78.481 li
110.261 78.481 li
116.887 98.311 li
130.138 98.311 li
150.015 110.209 li
156.641 110.209 li
163.266 114.175 li
169.892 114.175 li
176.517 122.106 li
183.143 122.106 li
189.769 130.038 li
196.394 134.004 li
203.02 134.004 li
209.645 145.902 li
222.897 153.834 li
229.522 153.834 li
236.148 161.765 li
242.773 161.765 li
256.025 169.697 li
262.65 169.697 li
269.276 173.663 li
275.901 173.663 li
282.527 177.629 li
289.153 205.39 li
295.778 205.39 li
302.404 213.322 li
309.03 213.322 li
315.655 217.288 li
322.281 217.288 li
328.906 221.254 li
335.532 221.254 li
342.158 229.186 li
355.409 229.186 li
362.034 233.152 li
375.286 233.152 li
381.911 241.083 li
388.537 241.083 li
395.162 249.015 li
401.788 260.913 li
408.414 260.913 li
0 .993988 1 0 cmyk
@
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
83.759 18.993 mo
90.384 50.72 li
97.01 66.584 li
103.635 70.55 li
110.261 74.516 li
116.887 82.448 li
123.512 82.448 li
130.138 94.345 li
136.763 102.277 li
143.389 102.277 li
150.015 106.243 li
156.64 106.243 li
163.266 110.209 li
169.891 114.175 li
176.517 126.073 li
183.143 126.073 li
189.768 134.004 li
196.394 137.97 li
203.019 137.97 li
209.645 137.97 li
216.271 157.8 li
222.896 161.766 li
229.522 161.766 li
236.147 161.766 li
242.773 161.766 li
249.399 165.732 li
256.024 169.698 li
262.65 173.663 li
269.275 177.629 li
275.901 189.527 li
282.527 189.527 li
289.152 201.425 li
295.778 205.391 li
302.404 213.322 li
309.029 213.322 li
315.655 217.288 li
322.28 225.22 li
328.906 225.22 li
335.532 233.152 li
342.157 237.118 li
348.783 237.118 li
355.408 237.118 li
362.034 245.05 li
368.66 245.05 li
375.285 249.016 li
381.911 249.016 li
388.536 249.016 li
395.162 252.981 li
401.788 256.947 li
408.413 260.913 li
1 /0 /CSD get_res sepcs
1 sep
@
[5.55 2.4 ] 0 dsh
83.759 130.038 mo
90.384 130.038 li
97.01 134.004 li
103.635 137.97 li
110.261 141.936 li
116.887 141.936 li
123.512 145.902 li
130.138 149.868 li
136.763 149.868 li
143.389 149.868 li
150.015 153.834 li
156.64 153.834 li
163.266 153.834 li
169.891 153.834 li
176.517 153.834 li
183.143 157.8 li
189.768 157.8 li
196.394 157.8 li
203.019 157.8 li
209.645 161.766 li
216.271 161.766 li
222.896 161.766 li
229.522 161.766 li
236.147 161.766 li
242.773 165.732 li
249.399 165.732 li
256.024 165.732 li
262.65 165.732 li
269.275 169.698 li
275.901 169.698 li
282.527 169.698 li
289.152 169.698 li
295.778 169.698 li
302.404 169.698 li
309.029 169.698 li
315.655 173.663 li
322.28 173.663 li
328.906 177.629 li
335.532 177.629 li
342.157 177.629 li
348.783 181.595 li
355.408 181.595 li
362.034 181.595 li
368.66 189.527 li
375.285 189.527 li
381.911 189.527 li
388.536 193.493 li
395.162 193.493 li
401.788 201.425 li
408.413 233.152 li
.873045 .242161 1 .129244 cmyk
@
.8 lw
2 lc
0 lj
[] 0 dsh
67.526 273.009 mo
67.526 6.897 li
1 /0 /CSD get_res sepcs
1 sep
@
424.646 273.009 mo
424.646 6.897 li
@
67.526 273.009 mo
424.646 273.009 li
@
67.526 6.897 mo
424.646 6.897 li
@
308.271 58.913 mo
417.646 58.913 li
418.979 58.913 419.646 58.246 419.646 56.913 cv
419.646 13.897 li
419.646 12.564 418.979 11.897 417.646 11.897 cv
308.271 11.897 li
306.938 11.897 306.271 12.564 306.271 13.897 cv
306.271 56.913 li
306.271 58.246 306.938 58.913 308.271 58.913 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
308.271 58.913 mo
417.646 58.913 li
418.979 58.913 419.646 58.246 419.646 56.913 cv
419.646 13.897 li
419.646 12.564 418.979 11.897 417.646 11.897 cv
308.271 11.897 li
306.938 11.897 306.271 12.564 306.271 13.897 cv
306.271 56.913 li
306.271 58.246 306.938 58.913 308.271 58.913 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
1.5 lw
2 lc
1 lj
310.271 19.991 mo
330.271 19.991 li
0 .993988 1 0 cmyk
@
339.26 16.17 mo
340.25 16.17 li
340.25 19.16 li
343.83 19.16 li
343.83 16.17 li
344.82 16.17 li
344.82 23.46 li
343.83 23.46 li
343.83 19.99 li
340.25 19.99 li
340.25 23.46 li
339.26 23.46 li
339.26 16.17 li
1 /0 /CSD get_res sepcs
1 sep
ef
349.27 20.71 mo
348.54 20.71 348.04 20.8 347.76 20.96 cv
347.48 21.13 347.34 21.41 347.34 21.81 cv
347.34 22.13 347.44 22.39 347.65 22.57 cv
347.86 22.76 348.15 22.85 348.51 22.85 cv
349.01 22.85 349.41 22.68 349.71 22.32 cv
350.01 21.97 350.16 21.5 350.16 20.91 cv
350.16 20.71 li
349.27 20.71 li
351.06 20.34 mo
351.06 23.46 li
350.16 23.46 li
350.16 22.63 li
349.95 22.97 349.69 23.21 349.39 23.36 cv
349.09 23.51 348.71 23.59 348.27 23.59 cv
347.71 23.59 347.26 23.44 346.93 23.13 cv
346.6 22.82 346.44 22.4 346.44 21.87 cv
346.44 21.26 346.64 20.8 347.06 20.48 cv
347.47 20.17 348.08 20.01 348.9 20.01 cv
350.16 20.01 li
350.16 19.92 li
350.16 19.51 350.02 19.19 349.75 18.96 cv
349.48 18.74 349.1 18.62 348.61 18.62 cv
348.29 18.62 347.99 18.66 347.69 18.74 cv
347.39 18.82 347.11 18.93 346.84 19.07 cv
346.84 18.24 li
347.16 18.12 347.48 18.02 347.79 17.96 cv
348.1 17.9 348.4 17.86 348.7 17.86 cv
349.49 17.86 350.08 18.07 350.47 18.48 cv
350.86 18.89 351.06 19.51 351.06 20.34 cv
ef
356.5 18.82 mo
356.5 15.86 li
357.4 15.86 li
357.4 23.46 li
356.5 23.46 li
356.5 22.64 li
356.31 22.97 356.07 23.21 355.78 23.36 cv
355.49 23.51 355.15 23.59 354.75 23.59 cv
354.09 23.59 353.55 23.33 353.13 22.81 cv
352.71 22.29 352.51 21.59 352.51 20.73 cv
352.51 19.87 352.71 19.18 353.13 18.65 cv
353.55 18.13 354.09 17.86 354.75 17.86 cv
355.15 17.86 355.49 17.94 355.78 18.1 cv
356.07 18.26 356.31 18.5 356.5 18.82 cv
353.44 20.73 mo
353.44 21.39 353.57 21.91 353.84 22.29 cv
354.11 22.67 354.49 22.85 354.97 22.85 cv
355.44 22.85 355.81 22.67 356.09 22.29 cv
356.36 21.91 356.5 21.39 356.5 20.73 cv
356.5 20.07 356.36 19.56 356.09 19.18 cv
355.81 18.8 355.44 18.61 354.97 18.61 cv
354.49 18.61 354.11 18.8 353.84 19.18 cv
353.57 19.56 353.44 20.07 353.44 20.73 cv
ef
361.38 18.62 mo
360.9 18.62 360.52 18.81 360.24 19.19 cv
359.96 19.57 359.82 20.08 359.82 20.73 cv
359.82 21.39 359.95 21.9 360.23 22.28 cv
360.51 22.66 360.89 22.84 361.38 22.84 cv
361.86 22.84 362.24 22.66 362.52 22.28 cv
362.8 21.9 362.94 21.39 362.94 20.73 cv
362.94 20.09 362.8 19.57 362.52 19.19 cv
362.24 18.81 361.86 18.62 361.38 18.62 cv
361.38 17.86 mo
362.16 17.86 362.77 18.12 363.22 18.62 cv
363.66 19.13 363.89 19.83 363.89 20.73 cv
363.89 21.63 363.66 22.33 363.22 22.83 cv
362.77 23.34 362.16 23.59 361.38 23.59 cv
360.59 23.59 359.97 23.34 359.53 22.83 cv
359.09 22.33 358.87 21.63 358.87 20.73 cv
358.87 19.83 359.09 19.13 359.53 18.62 cv
359.97 18.12 360.59 17.86 361.38 17.86 cv
ef
367.5 18.62 mo
367.02 18.62 366.64 18.81 366.36 19.19 cv
366.08 19.57 365.94 20.08 365.94 20.73 cv
365.94 21.39 366.07 21.9 366.35 22.28 cv
366.63 22.66 367.01 22.84 367.5 22.84 cv
367.98 22.84 368.36 22.66 368.64 22.28 cv
368.92 21.9 369.06 21.39 369.06 20.73 cv
369.06 20.09 368.92 19.57 368.64 19.19 cv
368.36 18.81 367.98 18.62 367.5 18.62 cv
367.5 17.86 mo
368.28 17.86 368.89 18.12 369.34 18.62 cv
369.78 19.13 370.01 19.83 370.01 20.73 cv
370.01 21.63 369.78 22.33 369.34 22.83 cv
368.89 23.34 368.28 23.59 367.5 23.59 cv
366.71 23.59 366.09 23.34 365.65 22.83 cv
365.21 22.33 364.99 21.63 364.99 20.73 cv
364.99 19.83 365.21 19.13 365.65 18.62 cv
366.09 18.12 366.71 17.86 367.5 17.86 cv
ef
372.37 22.64 mo
372.37 25.53 li
371.47 25.53 li
371.47 17.99 li
372.37 17.99 li
372.37 18.82 li
372.55 18.5 372.79 18.26 373.08 18.1 cv
373.37 17.94 373.72 17.86 374.12 17.86 cv
374.78 17.86 375.32 18.13 375.74 18.65 cv
376.15 19.18 376.36 19.87 376.36 20.73 cv
376.36 21.59 376.15 22.29 375.74 22.81 cv
375.32 23.33 374.78 23.59 374.12 23.59 cv
373.72 23.59 373.37 23.51 373.08 23.36 cv
372.79 23.21 372.55 22.97 372.37 22.64 cv
375.43 20.73 mo
375.43 20.07 375.29 19.56 375.02 19.18 cv
374.74 18.8 374.37 18.61 373.9 18.61 cv
373.42 18.61 373.05 18.8 372.78 19.18 cv
372.5 19.56 372.37 20.07 372.37 20.73 cv
372.37 21.39 372.5 21.91 372.78 22.29 cv
373.05 22.67 373.42 22.85 373.9 22.85 cv
374.37 22.85 374.74 22.67 375.02 22.29 cv
375.29 21.91 375.43 21.39 375.43 20.73 cv
ef
377.29 21.12 mo
379.92 21.12 li
379.92 20.32 li
377.29 20.32 li
cp
f
384.94 18.82 mo
384.94 15.86 li
385.84 15.86 li
385.84 23.46 li
384.94 23.46 li
384.94 22.64 li
384.75 22.97 384.51 23.21 384.22 23.36 cv
383.93 23.51 383.59 23.59 383.19 23.59 cv
382.53 23.59 381.99 23.33 381.57 22.81 cv
381.15 22.29 380.95 21.59 380.95 20.73 cv
380.95 19.87 381.15 19.18 381.57 18.65 cv
381.99 18.13 382.53 17.86 383.19 17.86 cv
383.59 17.86 383.93 17.94 384.22 18.1 cv
384.51 18.26 384.75 18.5 384.94 18.82 cv
381.88 20.73 mo
381.88 21.39 382.01 21.91 382.28 22.29 cv
382.55 22.67 382.93 22.85 383.41 22.85 cv
383.88 22.85 384.25 22.67 384.53 22.29 cv
384.8 21.91 384.94 21.39 384.94 20.73 cv
384.94 20.07 384.8 19.56 384.53 19.18 cv
384.25 18.8 383.88 18.61 383.41 18.61 cv
382.93 18.61 382.55 18.8 382.28 19.18 cv
382.01 19.56 381.88 20.07 381.88 20.73 cv
ef
392.38 20.5 mo
392.38 20.94 li
388.25 20.94 li
388.29 21.56 388.47 22.04 388.81 22.36 cv
389.14 22.68 389.6 22.84 390.2 22.84 cv
390.54 22.84 390.88 22.8 391.2 22.72 cv
391.52 22.64 391.85 22.51 392.17 22.33 cv
392.17 23.18 li
391.85 23.32 391.52 23.43 391.18 23.49 cv
390.84 23.55 390.49 23.59 390.15 23.59 cv
389.27 23.59 388.58 23.34 388.07 22.84 cv
387.56 22.34 387.31 21.65 387.31 20.78 cv
387.31 19.89 387.55 19.18 388.03 18.65 cv
388.51 18.13 389.17 17.86 389.99 17.86 cv
390.73 17.86 391.31 18.1 391.74 18.57 cv
392.16 19.05 392.38 19.69 392.38 20.5 cv
391.48 20.24 mo
391.47 19.75 391.33 19.36 391.07 19.06 cv
390.8 18.77 390.44 18.62 390 18.62 cv
389.5 18.62 389.1 18.77 388.8 19.05 cv
388.5 19.33 388.32 19.73 388.28 20.24 cv
391.48 20.24 li
ef
396.71 15.86 mo
396.71 16.61 li
395.85 16.61 li
395.53 16.61 395.3 16.68 395.18 16.81 cv
395.05 16.94 394.99 17.17 394.99 17.51 cv
394.99 17.99 li
396.47 17.99 li
396.47 18.69 li
394.99 18.69 li
394.99 23.46 li
394.09 23.46 li
394.09 18.69 li
393.23 18.69 li
393.23 17.99 li
394.09 17.99 li
394.09 17.61 li
394.09 17.01 394.23 16.56 394.51 16.28 cv
394.79 16 395.24 15.86 395.86 15.86 cv
396.71 15.86 li
ef
399.91 20.71 mo
399.18 20.71 398.68 20.8 398.4 20.96 cv
398.12 21.13 397.98 21.41 397.98 21.81 cv
397.98 22.13 398.08 22.39 398.29 22.57 cv
398.5 22.76 398.79 22.85 399.15 22.85 cv
399.65 22.85 400.05 22.68 400.35 22.32 cv
400.65 21.97 400.8 21.5 400.8 20.91 cv
400.8 20.71 li
399.91 20.71 li
401.7 20.34 mo
401.7 23.46 li
400.8 23.46 li
400.8 22.63 li
400.59 22.97 400.33 23.21 400.03 23.36 cv
399.73 23.51 399.35 23.59 398.91 23.59 cv
398.35 23.59 397.9 23.44 397.57 23.13 cv
397.24 22.82 397.08 22.4 397.08 21.87 cv
397.08 21.26 397.28 20.8 397.7 20.48 cv
398.11 20.17 398.72 20.01 399.54 20.01 cv
400.8 20.01 li
400.8 19.92 li
400.8 19.51 400.66 19.19 400.39 18.96 cv
400.12 18.74 399.74 18.62 399.25 18.62 cv
398.93 18.62 398.63 18.66 398.33 18.74 cv
398.03 18.82 397.75 18.93 397.48 19.07 cv
397.48 18.24 li
397.8 18.12 398.12 18.02 398.43 17.96 cv
398.74 17.9 399.04 17.86 399.34 17.86 cv
400.13 17.86 400.72 18.07 401.11 18.48 cv
401.5 18.89 401.7 19.51 401.7 20.34 cv
ef
403.45 21.3 mo
403.45 17.99 li
404.35 17.99 li
404.35 21.27 li
404.35 21.79 404.45 22.17 404.65 22.43 cv
404.85 22.69 405.15 22.82 405.56 22.82 cv
406.04 22.82 406.43 22.67 406.71 22.36 cv
406.99 22.05 407.13 21.63 407.13 21.09 cv
407.13 17.99 li
408.03 17.99 li
408.03 23.46 li
407.13 23.46 li
407.13 22.62 li
406.91 22.96 406.65 23.2 406.37 23.36 cv
406.08 23.51 405.75 23.59 405.37 23.59 cv
404.74 23.59 404.26 23.4 403.94 23.01 cv
403.61 22.63 403.45 22.06 403.45 21.3 cv
405.71 17.86 mo
405.71 17.86 li
ef
409.9 23.46 mo
410.8 23.46 li
410.8 15.86 li
409.9 15.86 li
cp
f
413.55 16.44 mo
413.55 17.99 li
415.4 17.99 li
415.4 18.69 li
413.55 18.69 li
413.55 21.66 li
413.55 22.11 413.61 22.4 413.73 22.52 cv
413.85 22.65 414.1 22.71 414.48 22.71 cv
415.4 22.71 li
415.4 23.46 li
414.48 23.46 li
413.78 23.46 413.3 23.33 413.04 23.07 cv
412.78 22.81 412.65 22.34 412.65 21.66 cv
412.65 18.69 li
411.99 18.69 li
411.99 17.99 li
412.65 17.99 li
412.65 16.44 li
413.55 16.44 li
ef
0 lc
[9.6 2.4 1.5 2.4 ] 0 dsh
310.271 34.663 mo
330.271 34.663 li
@
338.61 30.93 mo
339.61 30.93 li
341.14 37.09 li
342.67 30.93 li
343.78 30.93 li
345.31 37.09 li
346.84 30.93 li
347.84 30.93 li
346.01 38.22 li
344.77 38.22 li
343.23 31.89 li
341.68 38.22 li
340.44 38.22 li
338.61 30.93 li
ef
351.54 31.9 mo
350.2 35.53 li
352.88 35.53 li
351.54 31.9 li
350.98 30.93 mo
352.1 30.93 li
354.88 38.22 li
353.85 38.22 li
353.19 36.35 li
349.9 36.35 li
349.24 38.22 li
348.2 38.22 li
350.98 30.93 li
ef
360.31 31.17 mo
360.31 32.13 li
359.93 31.95 359.58 31.82 359.25 31.73 cv
358.91 31.65 358.59 31.6 358.29 31.6 cv
357.75 31.6 357.33 31.71 357.04 31.91 cv
356.75 32.12 356.61 32.42 356.61 32.8 cv
356.61 33.12 356.7 33.37 356.9 33.53 cv
357.09 33.7 357.46 33.83 358 33.93 cv
358.6 34.05 li
359.33 34.19 359.87 34.44 360.22 34.79 cv
360.57 35.15 360.75 35.62 360.75 36.21 cv
360.75 36.92 360.51 37.45 360.04 37.81 cv
359.56 38.17 358.87 38.35 357.96 38.35 cv
357.61 38.35 357.24 38.31 356.85 38.24 cv
356.46 38.17 356.06 38.06 355.65 37.9 cv
355.65 36.88 li
356.05 37.11 356.44 37.28 356.82 37.39 cv
357.2 37.51 357.58 37.56 357.96 37.56 cv
358.52 37.56 358.95 37.45 359.26 37.23 cv
359.56 37.01 359.72 36.7 359.72 36.28 cv
359.72 35.92 359.61 35.64 359.39 35.44 cv
359.17 35.24 358.81 35.09 358.31 34.99 cv
357.71 34.87 li
356.97 34.73 356.44 34.5 356.11 34.18 cv
355.78 33.87 355.62 33.44 355.62 32.88 cv
355.62 32.24 355.84 31.73 356.3 31.36 cv
356.75 30.99 357.38 30.8 358.18 30.8 cv
358.52 30.8 358.86 30.83 359.22 30.89 cv
359.57 30.95 359.93 31.05 360.31 31.17 cv
ef
362.3 30.93 mo
363.29 30.93 li
363.29 33.92 li
366.87 33.92 li
366.87 30.93 li
367.86 30.93 li
367.86 38.22 li
366.87 38.22 li
366.87 34.75 li
363.29 34.75 li
363.29 38.22 li
362.3 38.22 li
362.3 30.93 li
ef
369.37 35.88 mo
372 35.88 li
372 35.08 li
369.37 35.08 li
cp
f
377.02 35.42 mo
377.02 34.78 376.88 34.27 376.62 33.91 cv
376.35 33.55 375.97 33.37 375.49 33.37 cv
375.01 33.37 374.63 33.55 374.36 33.91 cv
374.09 34.27 373.96 34.78 373.96 35.42 cv
373.96 36.07 374.09 36.57 374.36 36.93 cv
374.63 37.29 375.01 37.47 375.49 37.47 cv
375.97 37.47 376.35 37.29 376.62 36.93 cv
376.88 36.57 377.02 36.07 377.02 35.42 cv
377.92 37.54 mo
377.92 38.46 377.71 39.15 377.3 39.61 cv
376.88 40.06 376.25 40.29 375.4 40.29 cv
375.08 40.29 374.79 40.26 374.51 40.22 cv
374.23 40.17 373.95 40.1 373.69 40 cv
373.69 39.13 li
373.95 39.27 374.21 39.37 374.47 39.44 cv
374.73 39.51 374.99 39.55 375.26 39.55 cv
375.84 39.55 376.28 39.39 376.58 39.09 cv
376.87 38.78 377.02 38.32 377.02 37.7 cv
377.02 37.26 li
376.83 37.58 376.59 37.82 376.3 37.98 cv
376.01 38.14 375.67 38.22 375.27 38.22 cv
374.59 38.22 374.05 37.97 373.64 37.46 cv
373.23 36.95 373.03 36.27 373.03 35.42 cv
373.03 34.58 373.23 33.9 373.64 33.39 cv
374.05 32.88 374.59 32.62 375.27 32.62 cv
375.67 32.62 376.01 32.7 376.3 32.86 cv
376.59 33.02 376.83 33.26 377.02 33.58 cv
377.02 32.75 li
377.92 32.75 li
377.92 37.54 li
ef
382.95 33.59 mo
382.85 33.53 382.74 33.49 382.62 33.46 cv
382.5 33.44 382.37 33.42 382.23 33.42 cv
381.72 33.42 381.33 33.59 381.06 33.92 cv
380.78 34.25 380.65 34.72 380.65 35.34 cv
380.65 38.22 li
379.75 38.22 li
379.75 32.75 li
380.65 32.75 li
380.65 33.6 li
380.83 33.27 381.08 33.02 381.38 32.86 cv
381.68 32.7 382.05 32.62 382.49 32.62 cv
382.55 32.62 382.62 32.63 382.7 32.63 cv
382.77 32.64 382.85 32.65 382.95 32.67 cv
382.95 33.59 li
ef
388.54 35.26 mo
388.54 35.7 li
384.41 35.7 li
384.45 36.32 384.63 36.8 384.97 37.12 cv
385.3 37.44 385.76 37.6 386.36 37.6 cv
386.7 37.6 387.04 37.56 387.36 37.48 cv
387.68 37.4 388.01 37.27 388.33 37.09 cv
388.33 37.94 li
388.01 38.08 387.68 38.19 387.34 38.25 cv
387 38.31 386.65 38.35 386.31 38.35 cv
385.43 38.35 384.74 38.1 384.23 37.6 cv
383.72 37.1 383.47 36.41 383.47 35.54 cv
383.47 34.65 383.71 33.94 384.19 33.41 cv
384.67 32.89 385.33 32.62 386.15 32.62 cv
386.89 32.62 387.47 32.86 387.9 33.33 cv
388.32 33.81 388.54 34.45 388.54 35.26 cv
387.64 35 mo
387.63 34.51 387.49 34.12 387.23 33.82 cv
386.96 33.53 386.6 33.38 386.16 33.38 cv
385.66 33.38 385.26 33.53 384.96 33.81 cv
384.66 34.09 384.48 34.49 384.44 35 cv
387.64 35 li
ef
394.66 35.26 mo
394.66 35.7 li
390.53 35.7 li
390.57 36.32 390.75 36.8 391.09 37.12 cv
391.42 37.44 391.88 37.6 392.48 37.6 cv
392.82 37.6 393.16 37.56 393.48 37.48 cv
393.8 37.4 394.13 37.27 394.45 37.09 cv
394.45 37.94 li
394.13 38.08 393.8 38.19 393.46 38.25 cv
393.12 38.31 392.77 38.35 392.43 38.35 cv
391.55 38.35 390.86 38.1 390.35 37.6 cv
389.84 37.1 389.59 36.41 389.59 35.54 cv
389.59 34.65 389.83 33.94 390.31 33.41 cv
390.79 32.89 391.45 32.62 392.27 32.62 cv
393.01 32.62 393.59 32.86 394.02 33.33 cv
394.44 33.81 394.66 34.45 394.66 35.26 cv
393.76 35 mo
393.75 34.51 393.61 34.12 393.35 33.82 cv
393.08 33.53 392.72 33.38 392.28 33.38 cv
391.78 33.38 391.38 33.53 391.08 33.81 cv
390.78 34.09 390.6 34.49 390.56 35 cv
393.76 35 li
ef
399.82 33.58 mo
399.82 30.62 li
400.72 30.62 li
400.72 38.22 li
399.82 38.22 li
399.82 37.4 li
399.63 37.73 399.39 37.97 399.1 38.12 cv
398.81 38.27 398.47 38.35 398.07 38.35 cv
397.41 38.35 396.87 38.09 396.45 37.57 cv
396.03 37.05 395.83 36.35 395.83 35.49 cv
395.83 34.63 396.03 33.94 396.45 33.41 cv
396.87 32.89 397.41 32.62 398.07 32.62 cv
398.47 32.62 398.81 32.7 399.1 32.86 cv
399.39 33.02 399.63 33.26 399.82 33.58 cv
396.76 35.49 mo
396.76 36.15 396.89 36.67 397.16 37.05 cv
397.43 37.43 397.81 37.61 398.29 37.61 cv
398.76 37.61 399.13 37.43 399.41 37.05 cv
399.68 36.67 399.82 36.15 399.82 35.49 cv
399.82 34.83 399.68 34.32 399.41 33.94 cv
399.13 33.56 398.76 33.37 398.29 33.37 cv
397.81 33.37 397.43 33.56 397.16 33.94 cv
396.89 34.32 396.76 34.83 396.76 35.49 cv
ef
404.86 38.72 mo
404.6 39.36 404.35 39.79 404.11 39.99 cv
403.87 40.19 403.55 40.29 403.15 40.29 cv
402.43 40.29 li
402.43 39.54 li
402.96 39.54 li
403.2 39.54 403.39 39.48 403.53 39.36 cv
403.67 39.24 403.82 38.97 403.99 38.53 cv
404.15 38.13 li
401.94 32.75 li
402.89 32.75 li
404.6 37.03 li
406.31 32.75 li
407.26 32.75 li
404.86 38.72 li
ef
[5.55 2.4 ] 0 dsh
310.271 49.335 mo
330.271 49.335 li
.873045 .242161 1 .129244 cmyk
@
342.74 47.62 mo
342.64 47.58 342.54 47.54 342.42 47.51 cv
342.3 47.49 342.18 47.47 342.05 47.47 cv
341.57 47.47 341.15 47.66 340.79 48.02 cv
340.43 48.38 340.2 48.87 340.08 49.47 cv
339.53 52.26 li
338.63 52.26 li
339.7 46.79 li
340.6 46.79 li
340.43 47.64 li
340.66 47.33 340.94 47.09 341.28 46.92 cv
341.61 46.75 341.96 46.66 342.34 46.66 cv
342.43 46.66 342.52 46.67 342.62 46.68 cv
342.72 46.69 342.81 46.71 342.91 46.73 cv
342.74 47.62 li
1 /0 /CSD get_res sepcs
1 sep
ef
342.69 44.97 mo
343.69 44.97 li
345.22 51.13 li
346.75 44.97 li
347.86 44.97 li
349.39 51.13 li
350.92 44.97 li
351.92 44.97 li
350.09 52.26 li
348.85 52.26 li
347.31 45.93 li
345.76 52.26 li
344.52 52.26 li
342.69 44.97 li
ef
355.74 45.94 mo
354.4 49.57 li
357.08 49.57 li
355.74 45.94 li
355.18 44.97 mo
356.3 44.97 li
359.08 52.26 li
358.05 52.26 li
357.39 50.39 li
354.1 50.39 li
353.44 52.26 li
352.4 52.26 li
355.18 44.97 li
ef
364.51 45.21 mo
364.51 46.17 li
364.13 45.99 363.78 45.86 363.45 45.77 cv
363.11 45.69 362.79 45.64 362.49 45.64 cv
361.95 45.64 361.53 45.75 361.24 45.95 cv
360.95 46.16 360.81 46.46 360.81 46.84 cv
360.81 47.16 360.9 47.41 361.1 47.57 cv
361.29 47.74 361.66 47.87 362.2 47.97 cv
362.8 48.09 li
363.53 48.23 364.07 48.48 364.42 48.83 cv
364.77 49.19 364.95 49.66 364.95 50.25 cv
364.95 50.96 364.71 51.49 364.24 51.85 cv
363.76 52.21 363.07 52.39 362.16 52.39 cv
361.81 52.39 361.44 52.35 361.05 52.28 cv
360.66 52.21 360.26 52.1 359.85 51.94 cv
359.85 50.92 li
360.25 51.15 360.64 51.32 361.02 51.43 cv
361.4 51.55 361.78 51.6 362.16 51.6 cv
362.72 51.6 363.15 51.49 363.46 51.27 cv
363.76 51.05 363.92 50.74 363.92 50.32 cv
363.92 49.96 363.81 49.68 363.59 49.48 cv
363.37 49.28 363.01 49.13 362.51 49.03 cv
361.91 48.91 li
361.17 48.77 360.64 48.54 360.31 48.22 cv
359.98 47.91 359.82 47.48 359.82 46.92 cv
359.82 46.28 360.04 45.77 360.5 45.4 cv
360.95 45.03 361.58 44.84 362.38 44.84 cv
362.72 44.84 363.06 44.87 363.42 44.93 cv
363.77 44.99 364.13 45.09 364.51 45.21 cv
ef
366.38 44.97 mo
367.37 44.97 li
367.37 47.96 li
370.95 47.96 li
370.95 44.97 li
371.94 44.97 li
371.94 52.26 li
370.95 52.26 li
370.95 48.79 li
367.37 48.79 li
367.37 52.26 li
366.38 52.26 li
366.38 44.97 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
