%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPB8B8.tmp.pdf
%%Creator: Adobe Acrobat 18.9.0
%%For: JMT
%%CreationDate: 2019/8/30 ÐÇÆÚÎå, ÉÏÎç 10:31:45
%%BoundingBox: 0 0 454 338
%%HiResBoundingBox: 0 0 454 338
%%CropBox: 0 0 454 338
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 958 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   pdf:Producer="Acrobat Distiller 18.0 (Windows)"
   xmp:CreatorTool="matplotlib version 3.1.1, http://matplotlib.org/"
   xmp:ModifyDate="2019-08-30T10:30:45+08:00"
   xmp:CreateDate="2019-08-30T10:30:45+08:00"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:db47b8fe-ee50-4eaa-9769-c06c0d854ffd"
   xmpMM:InstanceID="uuid:050e0ce2-0eb3-40cf-a8b2-c35de3ad8789">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">figcomplete3_8.eps</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -338 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 338 li
454 338 li
454 0 li
cp
clp
.29401 338 mo
453.706 338 li
453.706 -.0270081 li
.29401 -.0270081 li
cp
false sop
1 /0 /CSD get_res sepcs
0 sep
f
54.307 292.733 mo
446.507 292.733 li
446.507 12.493 li
54.307 12.493 li
cp
f
72.134 292.733 mo
104.547 292.733 li
104.547 59.2 li
72.134 59.2 li
cp
.175418 .676722 .898802 0 cmyk
f
72.134 292.733 mo
104.547 292.733 li
104.547 59.2 li
72.134 59.2 li
cp
gsave
grestore
/222702848.0 
<<
/ID /222702848.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222702848.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
201.787 292.733 mo
234.2 292.733 li
234.2 74.47 li
201.787 74.47 li
cp
false sop
.175418 .676722 .898802 0 cmyk
f
201.787 292.733 mo
234.2 292.733 li
234.2 74.47 li
201.787 74.47 li
cp
gsave
grestore
/222703044.0 
<<
/ID /222703044.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222703044.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
331.44 292.733 mo
363.853 292.733 li
363.853 68.732 li
331.44 68.732 li
cp
false sop
.175418 .676722 .898802 0 cmyk
f
331.44 292.733 mo
363.853 292.733 li
363.853 68.732 li
331.44 68.732 li
cp
gsave
grestore
/222703240.0 
<<
/ID /222703240.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222703240.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
104.547 292.733 mo
136.96 292.733 li
136.96 156.562 li
104.547 156.562 li
cp
false sop
0 .644831 .344976 0 cmyk
f
104.547 292.733 mo
136.96 292.733 li
136.96 156.562 li
104.547 156.562 li
cp
gsave
grestore
/222703436.0 
<<
/ID /222703436.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222703436.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
234.2 292.733 mo
266.613 292.733 li
266.613 147.322 li
234.2 147.322 li
cp
false sop
0 .644831 .344976 0 cmyk
f
234.2 292.733 mo
266.613 292.733 li
266.613 147.322 li
234.2 147.322 li
cp
gsave
grestore
/222703632.0 
<<
/ID /222703632.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222703632.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
363.853 292.733 mo
396.266 292.733 li
396.266 111.528 li
363.853 111.528 li
cp
false sop
0 .644831 .344976 0 cmyk
f
363.853 292.733 mo
396.266 292.733 li
396.266 111.528 li
363.853 111.528 li
cp
gsave
grestore
/222703828.0 
<<
/ID /222703828.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222703828.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
136.96 292.733 mo
169.373 292.733 li
169.373 179.906 li
136.96 179.906 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
136.96 292.733 mo
169.373 292.733 li
169.373 179.906 li
136.96 179.906 li
cp
gsave
grestore
/222685616.0 
<<
/ID /222685616.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222685616.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
266.613 292.733 mo
299.026 292.733 li
299.026 184.185 li
266.613 184.185 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
266.613 292.733 mo
299.026 292.733 li
299.026 184.185 li
266.613 184.185 li
cp
gsave
grestore
/222685812.0 
<<
/ID /222685812.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222685812.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
396.266 292.733 mo
428.679 292.733 li
428.679 195.468 li
396.266 195.468 li
cp
false sop
.609064 .118654 .887358 0 cmyk
f
396.266 292.733 mo
428.679 292.733 li
428.679 195.468 li
396.266 195.468 li
cp
gsave
grestore
/222686008.0 
<<
/ID /222686008.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222686008.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
120.105 292.733 mo
120.105 296.233 li
false sop
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
120.105 292.733 mo
120.105 296.233 li
@
109.516 300.978 mo
109.516 302.434 li
109.04 302.014 108.55 301.692 108.018 301.468 cv
107.486 301.258 106.94 301.146 106.352 301.146 cv
105.176 301.146 104.28 301.51 103.664 302.224 cv
103.048 302.938 102.74 303.96 102.74 305.304 cv
102.74 306.648 103.048 307.684 103.664 308.398 cv
104.28 309.112 105.176 309.462 106.352 309.462 cv
106.94 309.462 107.486 309.364 108.018 309.14 cv
108.55 308.93 109.04 308.608 109.516 308.174 cv
109.516 309.616 li
109.026 309.952 108.508 310.19 107.976 310.344 cv
107.444 310.498 106.87 310.582 106.268 310.582 cv
104.728 310.582 103.51 310.12 102.614 309.182 cv
101.718 308.244 101.284 306.956 101.284 305.304 cv
101.284 303.666 101.718 302.378 102.614 301.426 cv
103.51 300.488 104.728 300.012 106.268 300.012 cv
106.884 300.012 107.458 300.096 107.99 300.25 cv
108.522 300.418 109.04 300.656 109.516 300.978 cv
ef
116.144 304.044 mo
124.908 304.044 li
124.908 305.192 li
116.144 305.192 li
116.144 304.044 li
116.144 306.83 mo
116.144 306.83 mo
124.908 306.83 li
124.908 307.992 li
116.144 307.992 li
cp
ef
133.548 309.238 mo
138.364 309.238 li
138.364 310.4 li
131.882 310.4 li
131.882 309.238 li
132.4 308.706 133.114 307.978 134.024 307.054 cv
134.92 306.144 135.494 305.556 135.732 305.29 cv
136.18 304.8 136.488 304.38 136.656 304.03 cv
136.824 303.694 136.922 303.344 136.922 303.008 cv
136.922 302.476 136.726 302.028 136.348 301.692 cv
135.97 301.356 135.48 301.174 134.864 301.174 cv
134.43 301.174 133.968 301.258 133.492 301.398 cv
133.016 301.552 132.498 301.776 131.952 302.084 cv
131.952 300.684 li
132.512 300.46 133.03 300.292 133.506 300.18 cv
133.982 300.068 134.43 300.012 134.836 300.012 cv
135.886 300.012 136.726 300.278 137.356 300.81 cv
137.986 301.342 138.308 302.042 138.308 302.924 cv
138.308 303.344 138.224 303.75 138.07 304.114 cv
137.916 304.492 137.636 304.94 137.216 305.444 cv
137.104 305.584 136.74 305.962 136.124 306.592 cv
135.508 307.222 134.654 308.104 133.548 309.238 cv
ef
249.758 292.733 mo
249.758 296.233 li
f
249.758 292.733 mo
249.758 296.233 li
@
239.116 300.978 mo
239.116 302.434 li
238.64 302.014 238.15 301.692 237.618 301.468 cv
237.086 301.258 236.54 301.146 235.952 301.146 cv
234.776 301.146 233.88 301.51 233.264 302.224 cv
232.648 302.938 232.34 303.96 232.34 305.304 cv
232.34 306.648 232.648 307.684 233.264 308.398 cv
233.88 309.112 234.776 309.462 235.952 309.462 cv
236.54 309.462 237.086 309.364 237.618 309.14 cv
238.15 308.93 238.64 308.608 239.116 308.174 cv
239.116 309.616 li
238.626 309.952 238.108 310.19 237.576 310.344 cv
237.044 310.498 236.47 310.582 235.868 310.582 cv
234.328 310.582 233.11 310.12 232.214 309.182 cv
231.318 308.244 230.884 306.956 230.884 305.304 cv
230.884 303.666 231.318 302.378 232.214 301.426 cv
233.11 300.488 234.328 300.012 235.868 300.012 cv
236.484 300.012 237.058 300.096 237.59 300.25 cv
238.122 300.418 238.64 300.656 239.116 300.978 cv
ef
245.744 304.044 mo
254.508 304.044 li
254.508 305.192 li
245.744 305.192 li
245.744 304.044 li
245.744 306.83 mo
245.744 306.83 mo
254.508 306.83 li
254.508 307.992 li
245.744 307.992 li
cp
ef
266.144 304.898 mo
266.802 305.038 267.32 305.332 267.684 305.78 cv
268.048 306.228 268.244 306.788 268.244 307.432 cv
268.244 308.44 267.894 309.224 267.208 309.77 cv
266.508 310.316 265.528 310.582 264.254 310.582 cv
263.82 310.582 263.372 310.54 262.924 310.456 cv
262.476 310.386 262 310.26 261.524 310.092 cv
261.524 308.762 li
261.902 308.986 262.322 309.154 262.784 309.266 cv
263.232 309.378 263.708 309.434 264.212 309.434 cv
265.08 309.434 265.738 309.266 266.186 308.93 cv
266.634 308.594 266.872 308.09 266.872 307.432 cv
266.872 306.844 266.662 306.368 266.242 306.032 cv
265.822 305.696 265.234 305.514 264.478 305.514 cv
263.288 305.514 li
263.288 304.38 li
264.534 304.38 li
265.206 304.38 265.724 304.254 266.088 303.974 cv
266.452 303.708 266.634 303.316 266.634 302.798 cv
266.634 302.28 266.438 301.874 266.074 301.594 cv
265.696 301.314 265.164 301.174 264.478 301.174 cv
264.1 301.174 263.694 301.216 263.26 301.3 cv
262.826 301.384 262.35 301.51 261.832 301.678 cv
261.832 300.446 li
262.35 300.306 262.84 300.194 263.302 300.124 cv
263.75 300.054 264.184 300.012 264.604 300.012 cv
265.64 300.012 266.466 300.25 267.082 300.726 cv
267.698 301.202 268.006 301.846 268.006 302.658 cv
268.006 303.218 267.838 303.694 267.516 304.086 cv
267.194 304.478 266.732 304.758 266.144 304.898 cv
ef
379.411 292.733 mo
379.411 296.233 li
f
379.411 292.733 mo
379.411 296.233 li
@
368.716 300.978 mo
368.716 302.434 li
368.24 302.014 367.75 301.692 367.218 301.468 cv
366.686 301.258 366.14 301.146 365.552 301.146 cv
364.376 301.146 363.48 301.51 362.864 302.224 cv
362.248 302.938 361.94 303.96 361.94 305.304 cv
361.94 306.648 362.248 307.684 362.864 308.398 cv
363.48 309.112 364.376 309.462 365.552 309.462 cv
366.14 309.462 366.686 309.364 367.218 309.14 cv
367.75 308.93 368.24 308.608 368.716 308.174 cv
368.716 309.616 li
368.226 309.952 367.708 310.19 367.176 310.344 cv
366.644 310.498 366.07 310.582 365.468 310.582 cv
363.928 310.582 362.71 310.12 361.814 309.182 cv
360.918 308.244 360.484 306.956 360.484 305.304 cv
360.484 303.666 360.918 302.378 361.814 301.426 cv
362.71 300.488 363.928 300.012 365.468 300.012 cv
366.084 300.012 366.658 300.096 367.19 300.25 cv
367.722 300.418 368.24 300.656 368.716 300.978 cv
ef
375.464 304.044 mo
384.228 304.044 li
384.228 305.192 li
375.464 305.192 li
375.464 304.044 li
375.464 306.83 mo
375.464 306.83 mo
384.228 306.83 li
384.228 307.992 li
375.464 307.992 li
cp
ef
391.692 300.194 mo
397.11 300.194 li
397.11 301.356 li
392.952 301.356 li
392.952 303.862 li
393.148 303.792 393.358 303.736 393.554 303.708 cv
393.75 303.68 393.96 303.652 394.156 303.652 cv
395.29 303.652 396.186 303.974 396.858 304.59 cv
397.53 305.22 397.866 306.06 397.866 307.124 cv
397.866 308.23 397.516 309.084 396.83 309.686 cv
396.144 310.288 395.178 310.582 393.946 310.582 cv
393.512 310.582 393.078 310.54 392.63 310.484 cv
392.182 310.414 391.734 310.316 391.258 310.162 cv
391.258 308.776 li
391.664 309 392.084 309.168 392.532 309.28 cv
392.966 309.392 393.428 309.434 393.918 309.434 cv
394.702 309.434 395.332 309.238 395.794 308.818 cv
396.242 308.398 396.48 307.838 396.48 307.124 cv
396.48 306.424 396.242 305.864 395.794 305.444 cv
395.332 305.024 394.702 304.814 393.918 304.814 cv
393.554 304.814 393.176 304.856 392.812 304.94 cv
392.448 305.024 392.07 305.15 391.692 305.318 cv
391.692 300.194 li
ef
183.156 323.132 mo
183.45 323.244 183.744 323.454 184.024 323.776 cv
184.304 324.112 184.584 324.56 184.864 325.134 cv
186.264 327.92 li
184.78 327.92 li
183.478 325.302 li
183.142 324.63 182.806 324.168 182.498 323.944 cv
182.176 323.72 181.742 323.608 181.196 323.608 cv
179.698 323.608 li
179.698 327.92 li
178.312 327.92 li
178.312 317.714 li
181.434 317.714 li
182.596 317.714 183.464 317.966 184.038 318.442 cv
184.612 318.932 184.906 319.674 184.906 320.654 cv
184.906 321.298 184.752 321.844 184.458 322.264 cv
184.15 322.684 183.716 322.978 183.156 323.132 cv
179.698 318.848 mo
179.698 322.474 li
181.434 322.474 li
182.092 322.474 182.596 322.32 182.932 322.012 cv
183.268 321.704 183.45 321.256 183.45 320.654 cv
183.45 320.066 183.268 319.618 182.932 319.31 cv
182.596 319.002 182.092 318.848 181.434 318.848 cv
179.698 318.848 li
ef
194.528 323.776 mo
194.528 324.392 li
188.746 324.392 li
188.802 325.26 189.054 325.932 189.53 326.38 cv
189.992 326.828 190.636 327.052 191.476 327.052 cv
191.952 327.052 192.428 326.996 192.876 326.884 cv
193.324 326.772 193.786 326.59 194.234 326.338 cv
194.234 327.528 li
193.786 327.724 193.324 327.878 192.848 327.962 cv
192.372 328.046 191.882 328.102 191.406 328.102 cv
190.174 328.102 189.208 327.752 188.494 327.052 cv
187.78 326.352 187.43 325.386 187.43 324.168 cv
187.43 322.922 187.766 321.928 188.438 321.186 cv
189.11 320.458 190.034 320.08 191.182 320.08 cv
192.218 320.08 193.03 320.416 193.632 321.074 cv
194.22 321.746 194.528 322.642 194.528 323.776 cv
193.268 323.412 mo
193.254 322.726 193.058 322.18 192.694 321.76 cv
192.316 321.354 191.812 321.144 191.196 321.144 cv
190.496 321.144 189.936 321.354 189.516 321.746 cv
189.096 322.138 188.844 322.698 188.788 323.412 cv
193.268 323.412 li
ef
201.536 321.424 mo
201.536 317.28 li
202.796 317.28 li
202.796 327.92 li
201.536 327.92 li
201.536 326.772 li
201.27 327.234 200.934 327.57 200.528 327.78 cv
200.122 327.99 199.646 328.102 199.086 328.102 cv
198.162 328.102 197.406 327.738 196.818 327.01 cv
196.23 326.282 195.95 325.302 195.95 324.098 cv
195.95 322.894 196.23 321.928 196.818 321.186 cv
197.406 320.458 198.162 320.08 199.086 320.08 cv
199.646 320.08 200.122 320.192 200.528 320.416 cv
200.934 320.64 201.27 320.976 201.536 321.424 cv
197.252 324.098 mo
197.252 325.022 197.434 325.75 197.812 326.282 cv
198.19 326.814 198.722 327.066 199.394 327.066 cv
200.052 327.066 200.57 326.814 200.962 326.282 cv
201.34 325.75 201.536 325.022 201.536 324.098 cv
201.536 323.174 201.34 322.46 200.962 321.928 cv
200.57 321.396 200.052 321.13 199.394 321.13 cv
198.722 321.13 198.19 321.396 197.812 321.928 cv
197.434 322.46 197.252 323.174 197.252 324.098 cv
ef
205.37 324.896 mo
205.37 320.262 li
206.63 320.262 li
206.63 324.854 li
206.63 325.582 206.77 326.114 207.05 326.478 cv
207.33 326.842 207.75 327.024 208.324 327.024 cv
208.996 327.024 209.542 326.814 209.934 326.38 cv
210.326 325.946 210.522 325.358 210.522 324.602 cv
210.522 320.262 li
211.782 320.262 li
211.782 327.92 li
210.522 327.92 li
210.522 326.744 li
210.214 327.22 209.85 327.556 209.458 327.78 cv
209.052 327.99 208.59 328.102 208.058 328.102 cv
207.176 328.102 206.504 327.836 206.056 327.29 cv
205.594 326.758 205.37 325.96 205.37 324.896 cv
208.534 320.08 mo
208.534 320.08 li
ef
220.626 323.3 mo
220.626 327.92 li
219.366 327.92 li
219.366 323.342 li
219.366 322.614 219.212 322.082 218.932 321.718 cv
218.652 321.354 218.232 321.172 217.672 321.172 cv
216.986 321.172 216.454 321.396 216.062 321.83 cv
215.67 322.264 215.474 322.852 215.474 323.594 cv
215.474 327.92 li
214.214 327.92 li
214.214 320.262 li
215.474 320.262 li
215.474 321.452 li
215.768 321.004 216.118 320.654 216.538 320.43 cv
216.944 320.206 217.42 320.08 217.952 320.08 cv
218.82 320.08 219.492 320.36 219.94 320.906 cv
220.388 321.452 220.626 322.25 220.626 323.3 cv
ef
228.176 321.424 mo
228.176 317.28 li
229.436 317.28 li
229.436 327.92 li
228.176 327.92 li
228.176 326.772 li
227.91 327.234 227.574 327.57 227.168 327.78 cv
226.762 327.99 226.286 328.102 225.726 328.102 cv
224.802 328.102 224.046 327.738 223.458 327.01 cv
222.87 326.282 222.59 325.302 222.59 324.098 cv
222.59 322.894 222.87 321.928 223.458 321.186 cv
224.046 320.458 224.802 320.08 225.726 320.08 cv
226.286 320.08 226.762 320.192 227.168 320.416 cv
227.574 320.64 227.91 320.976 228.176 321.424 cv
223.892 324.098 mo
223.892 325.022 224.074 325.75 224.452 326.282 cv
224.83 326.814 225.362 327.066 226.034 327.066 cv
226.692 327.066 227.21 326.814 227.602 326.282 cv
227.98 325.75 228.176 325.022 228.176 324.098 cv
228.176 323.174 227.98 322.46 227.602 321.928 cv
227.21 321.396 226.692 321.13 226.034 321.13 cv
225.362 321.13 224.83 321.396 224.452 321.928 cv
224.074 322.46 223.892 323.174 223.892 324.098 cv
ef
235.502 324.07 mo
234.48 324.07 233.78 324.196 233.388 324.42 cv
232.996 324.658 232.8 325.05 232.8 325.61 cv
232.8 326.058 232.94 326.422 233.234 326.674 cv
233.528 326.94 233.934 327.066 234.438 327.066 cv
235.138 327.066 235.698 326.828 236.118 326.324 cv
236.538 325.834 236.748 325.176 236.748 324.35 cv
236.748 324.07 li
235.502 324.07 li
238.008 323.552 mo
238.008 327.92 li
236.748 327.92 li
236.748 326.758 li
236.454 327.234 236.09 327.57 235.67 327.78 cv
235.25 327.99 234.718 328.102 234.102 328.102 cv
233.318 328.102 232.688 327.892 232.226 327.458 cv
231.764 327.024 231.54 326.436 231.54 325.694 cv
231.54 324.84 231.82 324.196 232.408 323.748 cv
232.982 323.314 233.836 323.09 234.984 323.09 cv
236.748 323.09 li
236.748 322.964 li
236.748 322.39 236.552 321.942 236.174 321.62 cv
235.796 321.312 235.264 321.144 234.578 321.144 cv
234.13 321.144 233.71 321.2 233.29 321.312 cv
232.87 321.424 232.478 321.578 232.1 321.774 cv
232.1 320.612 li
232.548 320.444 232.996 320.304 233.43 320.22 cv
233.864 320.136 234.284 320.08 234.704 320.08 cv
235.81 320.08 236.636 320.374 237.182 320.948 cv
237.728 321.522 238.008 322.39 238.008 323.552 cv
ef
247.026 323.3 mo
247.026 327.92 li
245.766 327.92 li
245.766 323.342 li
245.766 322.614 245.612 322.082 245.332 321.718 cv
245.052 321.354 244.632 321.172 244.072 321.172 cv
243.386 321.172 242.854 321.396 242.462 321.83 cv
242.07 322.264 241.874 322.852 241.874 323.594 cv
241.874 327.92 li
240.614 327.92 li
240.614 320.262 li
241.874 320.262 li
241.874 321.452 li
242.168 321.004 242.518 320.654 242.938 320.43 cv
243.344 320.206 243.82 320.08 244.352 320.08 cv
245.22 320.08 245.892 320.36 246.34 320.906 cv
246.788 321.452 247.026 322.25 247.026 323.3 cv
ef
255.052 320.556 mo
255.052 321.732 li
254.688 321.536 254.338 321.396 253.974 321.298 cv
253.61 321.2 253.26 321.144 252.896 321.144 cv
252.084 321.144 251.44 321.41 250.992 321.928 cv
250.544 322.446 250.32 323.174 250.32 324.098 cv
250.32 325.036 250.544 325.764 250.992 326.282 cv
251.44 326.8 252.084 327.052 252.896 327.052 cv
253.26 327.052 253.61 327.01 253.974 326.912 cv
254.338 326.814 254.688 326.66 255.052 326.464 cv
255.052 327.626 li
254.688 327.794 254.324 327.92 253.96 327.99 cv
253.582 328.06 253.176 328.102 252.756 328.102 cv
251.608 328.102 250.684 327.752 250.012 327.024 cv
249.326 326.31 248.99 325.33 248.99 324.098 cv
248.99 322.852 249.326 321.872 250.012 321.158 cv
250.698 320.444 251.636 320.08 252.84 320.08 cv
253.232 320.08 253.61 320.122 253.974 320.206 cv
254.338 320.29 254.702 320.402 255.052 320.556 cv
ef
260.408 328.62 mo
260.044 329.516 259.694 330.118 259.358 330.398 cv
259.022 330.678 258.574 330.818 258.014 330.818 cv
257.006 330.818 li
257.006 329.768 li
257.748 329.768 li
258.084 329.768 258.35 329.684 258.546 329.516 cv
258.742 329.348 258.952 328.97 259.19 328.354 cv
259.414 327.794 li
256.32 320.262 li
257.65 320.262 li
260.044 326.254 li
262.438 320.262 li
263.768 320.262 li
260.408 328.62 li
ef
273.814 317.28 mo
273.814 318.33 li
272.61 318.33 li
272.162 318.33 271.84 318.428 271.672 318.61 cv
271.49 318.792 271.406 319.114 271.406 319.59 cv
271.406 320.262 li
273.478 320.262 li
273.478 321.242 li
271.406 321.242 li
271.406 327.92 li
270.146 327.92 li
270.146 321.242 li
268.942 321.242 li
268.942 320.262 li
270.146 320.262 li
270.146 319.73 li
270.146 318.89 270.342 318.26 270.734 317.868 cv
271.126 317.476 271.756 317.28 272.624 317.28 cv
273.814 317.28 li
ef
278.342 324.07 mo
277.32 324.07 276.62 324.196 276.228 324.42 cv
275.836 324.658 275.64 325.05 275.64 325.61 cv
275.64 326.058 275.78 326.422 276.074 326.674 cv
276.368 326.94 276.774 327.066 277.278 327.066 cv
277.978 327.066 278.538 326.828 278.958 326.324 cv
279.378 325.834 279.588 325.176 279.588 324.35 cv
279.588 324.07 li
278.342 324.07 li
280.848 323.552 mo
280.848 327.92 li
279.588 327.92 li
279.588 326.758 li
279.294 327.234 278.93 327.57 278.51 327.78 cv
278.09 327.99 277.558 328.102 276.942 328.102 cv
276.158 328.102 275.528 327.892 275.066 327.458 cv
274.604 327.024 274.38 326.436 274.38 325.694 cv
274.38 324.84 274.66 324.196 275.248 323.748 cv
275.822 323.314 276.676 323.09 277.824 323.09 cv
279.588 323.09 li
279.588 322.964 li
279.588 322.39 279.392 321.942 279.014 321.62 cv
278.636 321.312 278.104 321.144 277.418 321.144 cv
276.97 321.144 276.55 321.2 276.13 321.312 cv
275.71 321.424 275.318 321.578 274.94 321.774 cv
274.94 320.612 li
275.388 320.444 275.836 320.304 276.27 320.22 cv
276.704 320.136 277.124 320.08 277.544 320.08 cv
278.65 320.08 279.476 320.374 280.022 320.948 cv
280.568 321.522 280.848 322.39 280.848 323.552 cv
ef
289.012 320.556 mo
289.012 321.732 li
288.648 321.536 288.298 321.396 287.934 321.298 cv
287.57 321.2 287.22 321.144 286.856 321.144 cv
286.044 321.144 285.4 321.41 284.952 321.928 cv
284.504 322.446 284.28 323.174 284.28 324.098 cv
284.28 325.036 284.504 325.764 284.952 326.282 cv
285.4 326.8 286.044 327.052 286.856 327.052 cv
287.22 327.052 287.57 327.01 287.934 326.912 cv
288.298 326.814 288.648 326.66 289.012 326.464 cv
289.012 327.626 li
288.648 327.794 288.284 327.92 287.92 327.99 cv
287.542 328.06 287.136 328.102 286.716 328.102 cv
285.568 328.102 284.644 327.752 283.972 327.024 cv
283.286 326.31 282.95 325.33 282.95 324.098 cv
282.95 322.852 283.286 321.872 283.972 321.158 cv
284.658 320.444 285.596 320.08 286.8 320.08 cv
287.192 320.08 287.57 320.122 287.934 320.206 cv
288.298 320.29 288.662 320.402 289.012 320.556 cv
ef
292.422 318.092 mo
292.422 320.262 li
295.012 320.262 li
295.012 321.242 li
292.422 321.242 li
292.422 325.4 li
292.422 326.03 292.506 326.436 292.674 326.604 cv
292.842 326.786 293.192 326.87 293.724 326.87 cv
295.012 326.87 li
295.012 327.92 li
293.724 327.92 li
292.744 327.92 292.072 327.738 291.708 327.374 cv
291.344 327.01 291.162 326.352 291.162 325.4 cv
291.162 321.242 li
290.238 321.242 li
290.238 320.262 li
291.162 320.262 li
291.162 318.092 li
292.422 318.092 li
ef
299.664 321.144 mo
298.992 321.144 298.46 321.41 298.068 321.942 cv
297.676 322.474 297.48 323.188 297.48 324.098 cv
297.48 325.022 297.662 325.736 298.054 326.268 cv
298.446 326.8 298.978 327.052 299.664 327.052 cv
300.336 327.052 300.868 326.8 301.26 326.268 cv
301.652 325.736 301.848 325.022 301.848 324.098 cv
301.848 323.202 301.652 322.474 301.26 321.942 cv
300.868 321.41 300.336 321.144 299.664 321.144 cv
299.664 320.08 mo
300.756 320.08 301.61 320.444 302.24 321.144 cv
302.856 321.858 303.178 322.838 303.178 324.098 cv
303.178 325.358 302.856 326.338 302.24 327.038 cv
301.61 327.752 300.756 328.102 299.664 328.102 cv
298.558 328.102 297.69 327.752 297.074 327.038 cv
296.458 326.338 296.15 325.358 296.15 324.098 cv
296.15 322.838 296.458 321.858 297.074 321.144 cv
297.69 320.444 298.558 320.08 299.664 320.08 cv
ef
309.654 321.438 mo
309.514 321.354 309.36 321.298 309.192 321.256 cv
309.024 321.228 308.842 321.2 308.646 321.2 cv
307.932 321.2 307.386 321.438 307.008 321.9 cv
306.616 322.362 306.434 323.02 306.434 323.888 cv
306.434 327.92 li
305.174 327.92 li
305.174 320.262 li
306.434 320.262 li
306.434 321.452 li
306.686 320.99 307.036 320.64 307.456 320.416 cv
307.876 320.192 308.394 320.08 309.01 320.08 cv
309.094 320.08 309.192 320.094 309.304 320.094 cv
309.402 320.108 309.514 320.122 309.654 320.15 cv
309.654 321.438 li
ef
323.116 318.498 mo
323.116 319.954 li
322.64 319.534 322.15 319.212 321.618 318.988 cv
321.086 318.778 320.54 318.666 319.952 318.666 cv
318.776 318.666 317.88 319.03 317.264 319.744 cv
316.648 320.458 316.34 321.48 316.34 322.824 cv
316.34 324.168 316.648 325.204 317.264 325.918 cv
317.88 326.632 318.776 326.982 319.952 326.982 cv
320.54 326.982 321.086 326.884 321.618 326.66 cv
322.15 326.45 322.64 326.128 323.116 325.694 cv
323.116 327.136 li
322.626 327.472 322.108 327.71 321.576 327.864 cv
321.044 328.018 320.47 328.102 319.868 328.102 cv
318.328 328.102 317.11 327.64 316.214 326.702 cv
315.318 325.764 314.884 324.476 314.884 322.824 cv
314.884 321.186 315.318 319.898 316.214 318.946 cv
317.11 318.008 318.328 317.532 319.868 317.532 cv
320.484 317.532 321.058 317.616 321.59 317.77 cv
322.122 317.938 322.64 318.176 323.116 318.498 cv
ef
54.307 292.733 mo
50.807 292.733 li
f
54.307 292.733 mo
50.807 292.733 li
@
29.472 288.744 mo
28.758 288.744 28.226 289.094 27.862 289.794 cv
27.498 290.494 27.33 291.544 27.33 292.944 cv
27.33 294.344 27.498 295.394 27.862 296.094 cv
28.226 296.794 28.758 297.144 29.472 297.144 cv
30.186 297.144 30.718 296.794 31.082 296.094 cv
31.432 295.394 31.614 294.344 31.614 292.944 cv
31.614 291.544 31.432 290.494 31.082 289.794 cv
30.718 289.094 30.186 288.744 29.472 288.744 cv
29.472 287.652 mo
30.606 287.652 31.474 288.114 32.09 289.01 cv
32.692 289.92 33 291.236 33 292.944 cv
33 294.666 32.692 295.982 32.09 296.878 cv
31.474 297.774 30.606 298.222 29.472 298.222 cv
28.324 298.222 27.442 297.774 26.84 296.878 cv
26.238 295.982 25.944 294.666 25.944 292.944 cv
25.944 291.236 26.238 289.92 26.84 289.01 cv
27.442 288.114 28.324 287.652 29.472 287.652 cv
ef
35.398 298.04 mo
36.84 298.04 li
36.84 296.304 li
35.398 296.304 li
cp
f
42.792 288.744 mo
42.078 288.744 41.546 289.094 41.182 289.794 cv
40.818 290.494 40.65 291.544 40.65 292.944 cv
40.65 294.344 40.818 295.394 41.182 296.094 cv
41.546 296.794 42.078 297.144 42.792 297.144 cv
43.506 297.144 44.038 296.794 44.402 296.094 cv
44.752 295.394 44.934 294.344 44.934 292.944 cv
44.934 291.544 44.752 290.494 44.402 289.794 cv
44.038 289.094 43.506 288.744 42.792 288.744 cv
42.792 287.652 mo
43.926 287.652 44.794 288.114 45.41 289.01 cv
46.012 289.92 46.32 291.236 46.32 292.944 cv
46.32 294.666 46.012 295.982 45.41 296.878 cv
44.794 297.774 43.926 298.222 42.792 298.222 cv
41.644 298.222 40.762 297.774 40.16 296.878 cv
39.558 295.982 39.264 294.666 39.264 292.944 cv
39.264 291.236 39.558 289.92 40.16 289.01 cv
40.762 288.114 41.644 287.652 42.792 287.652 cv
ef
54.307 246.027 mo
50.807 246.027 li
f
54.307 246.027 mo
50.807 246.027 li
@
29.472 242.064 mo
28.758 242.064 28.226 242.414 27.862 243.114 cv
27.498 243.814 27.33 244.864 27.33 246.264 cv
27.33 247.664 27.498 248.714 27.862 249.414 cv
28.226 250.114 28.758 250.464 29.472 250.464 cv
30.186 250.464 30.718 250.114 31.082 249.414 cv
31.432 248.714 31.614 247.664 31.614 246.264 cv
31.614 244.864 31.432 243.814 31.082 243.114 cv
30.718 242.414 30.186 242.064 29.472 242.064 cv
29.472 240.972 mo
30.606 240.972 31.474 241.434 32.09 242.33 cv
32.692 243.24 33 244.556 33 246.264 cv
33 247.986 32.692 249.302 32.09 250.198 cv
31.474 251.094 30.606 251.542 29.472 251.542 cv
28.324 251.542 27.442 251.094 26.84 250.198 cv
26.238 249.302 25.944 247.986 25.944 246.264 cv
25.944 244.556 26.238 243.24 26.84 242.33 cv
27.442 241.434 28.324 240.972 29.472 240.972 cv
ef
35.398 251.36 mo
36.84 251.36 li
36.84 249.624 li
35.398 249.624 li
cp
f
41.028 250.198 mo
45.844 250.198 li
45.844 251.36 li
39.362 251.36 li
39.362 250.198 li
39.88 249.666 40.594 248.938 41.504 248.014 cv
42.4 247.104 42.974 246.516 43.212 246.25 cv
43.66 245.76 43.968 245.34 44.136 244.99 cv
44.304 244.654 44.402 244.304 44.402 243.968 cv
44.402 243.436 44.206 242.988 43.828 242.652 cv
43.45 242.316 42.96 242.134 42.344 242.134 cv
41.91 242.134 41.448 242.218 40.972 242.358 cv
40.496 242.512 39.978 242.736 39.432 243.044 cv
39.432 241.644 li
39.992 241.42 40.51 241.252 40.986 241.14 cv
41.462 241.028 41.91 240.972 42.316 240.972 cv
43.366 240.972 44.206 241.238 44.836 241.77 cv
45.466 242.302 45.788 243.002 45.788 243.884 cv
45.788 244.304 45.704 244.71 45.55 245.074 cv
45.396 245.452 45.116 245.9 44.696 246.404 cv
44.584 246.544 44.22 246.922 43.604 247.552 cv
42.988 248.182 42.134 249.064 41.028 250.198 cv
ef
54.307 199.32 mo
50.807 199.32 li
f
54.307 199.32 mo
50.807 199.32 li
@
29.472 195.384 mo
28.758 195.384 28.226 195.734 27.862 196.434 cv
27.498 197.134 27.33 198.184 27.33 199.584 cv
27.33 200.984 27.498 202.034 27.862 202.734 cv
28.226 203.434 28.758 203.784 29.472 203.784 cv
30.186 203.784 30.718 203.434 31.082 202.734 cv
31.432 202.034 31.614 200.984 31.614 199.584 cv
31.614 198.184 31.432 197.134 31.082 196.434 cv
30.718 195.734 30.186 195.384 29.472 195.384 cv
29.472 194.292 mo
30.606 194.292 31.474 194.754 32.09 195.65 cv
32.692 196.56 33 197.876 33 199.584 cv
33 201.306 32.692 202.622 32.09 203.518 cv
31.474 204.414 30.606 204.862 29.472 204.862 cv
28.324 204.862 27.442 204.414 26.84 203.518 cv
26.238 202.622 25.944 201.306 25.944 199.584 cv
25.944 197.876 26.238 196.56 26.84 195.65 cv
27.442 194.754 28.324 194.292 29.472 194.292 cv
ef
35.398 204.68 mo
36.84 204.68 li
36.84 202.944 li
35.398 202.944 li
cp
f
43.632 195.678 mo
40.146 201.124 li
43.632 201.124 li
43.632 195.678 li
43.268 194.474 mo
45.004 194.474 li
45.004 201.124 li
46.46 201.124 li
46.46 202.272 li
45.004 202.272 li
45.004 204.68 li
43.632 204.68 li
43.632 202.272 li
39.026 202.272 li
39.026 200.942 li
43.268 194.474 li
ef
54.307 152.613 mo
50.807 152.613 li
f
54.307 152.613 mo
50.807 152.613 li
@
29.472 148.584 mo
28.758 148.584 28.226 148.934 27.862 149.634 cv
27.498 150.334 27.33 151.384 27.33 152.784 cv
27.33 154.184 27.498 155.234 27.862 155.934 cv
28.226 156.634 28.758 156.984 29.472 156.984 cv
30.186 156.984 30.718 156.634 31.082 155.934 cv
31.432 155.234 31.614 154.184 31.614 152.784 cv
31.614 151.384 31.432 150.334 31.082 149.634 cv
30.718 148.934 30.186 148.584 29.472 148.584 cv
29.472 147.492 mo
30.606 147.492 31.474 147.954 32.09 148.85 cv
32.692 149.76 33 151.076 33 152.784 cv
33 154.506 32.692 155.822 32.09 156.718 cv
31.474 157.614 30.606 158.062 29.472 158.062 cv
28.324 158.062 27.442 157.614 26.84 156.718 cv
26.238 155.822 25.944 154.506 25.944 152.784 cv
25.944 151.076 26.238 149.76 26.84 148.85 cv
27.442 147.954 28.324 147.492 29.472 147.492 cv
ef
35.398 157.88 mo
36.84 157.88 li
36.84 156.144 li
35.398 156.144 li
cp
f
42.96 152.224 mo
42.344 152.224 41.854 152.448 41.49 152.868 cv
41.126 153.288 40.944 153.876 40.944 154.604 cv
40.944 155.346 41.126 155.934 41.49 156.354 cv
41.854 156.774 42.344 156.984 42.96 156.984 cv
43.576 156.984 44.066 156.774 44.43 156.354 cv
44.794 155.934 44.976 155.346 44.976 154.604 cv
44.976 153.876 44.794 153.288 44.43 152.868 cv
44.066 152.448 43.576 152.224 42.96 152.224 cv
45.704 147.898 mo
45.704 149.158 li
45.354 148.99 45.004 148.864 44.654 148.78 cv
44.29 148.696 43.94 148.654 43.604 148.654 cv
42.68 148.654 41.98 148.962 41.504 149.578 cv
41.028 150.194 40.748 151.132 40.692 152.364 cv
40.958 151.972 41.294 151.664 41.7 151.454 cv
42.106 151.244 42.554 151.132 43.044 151.132 cv
44.066 151.132 44.878 151.454 45.466 152.07 cv
46.054 152.686 46.362 153.54 46.362 154.604 cv
46.362 155.654 46.04 156.494 45.424 157.124 cv
44.808 157.754 43.982 158.062 42.96 158.062 cv
41.784 158.062 40.874 157.614 40.258 156.718 cv
39.628 155.822 39.32 154.506 39.32 152.784 cv
39.32 151.174 39.698 149.886 40.468 148.934 cv
41.224 147.982 42.26 147.492 43.548 147.492 cv
43.884 147.492 44.234 147.534 44.598 147.59 cv
44.948 147.66 45.312 147.758 45.704 147.898 cv
ef
54.307 105.907 mo
50.807 105.907 li
f
54.307 105.907 mo
50.807 105.907 li
@
29.472 101.904 mo
28.758 101.904 28.226 102.254 27.862 102.954 cv
27.498 103.654 27.33 104.704 27.33 106.104 cv
27.33 107.504 27.498 108.554 27.862 109.254 cv
28.226 109.954 28.758 110.304 29.472 110.304 cv
30.186 110.304 30.718 109.954 31.082 109.254 cv
31.432 108.554 31.614 107.504 31.614 106.104 cv
31.614 104.704 31.432 103.654 31.082 102.954 cv
30.718 102.254 30.186 101.904 29.472 101.904 cv
29.472 100.812 mo
30.606 100.812 31.474 101.274 32.09 102.17 cv
32.692 103.08 33 104.396 33 106.104 cv
33 107.826 32.692 109.142 32.09 110.038 cv
31.474 110.934 30.606 111.382 29.472 111.382 cv
28.324 111.382 27.442 110.934 26.84 110.038 cv
26.238 109.142 25.944 107.826 25.944 106.104 cv
25.944 104.396 26.238 103.08 26.84 102.17 cv
27.442 101.274 28.324 100.812 29.472 100.812 cv
ef
35.398 111.2 mo
36.84 111.2 li
36.84 109.464 li
35.398 109.464 li
cp
f
42.792 106.356 mo
42.134 106.356 41.616 106.538 41.238 106.888 cv
40.86 107.238 40.678 107.714 40.678 108.33 cv
40.678 108.946 40.86 109.436 41.238 109.786 cv
41.616 110.136 42.134 110.304 42.792 110.304 cv
43.436 110.304 43.954 110.136 44.332 109.772 cv
44.71 109.422 44.906 108.946 44.906 108.33 cv
44.906 107.714 44.71 107.238 44.346 106.888 cv
43.968 106.538 43.45 106.356 42.792 106.356 cv
41.406 105.768 mo
40.818 105.628 40.356 105.348 40.02 104.942 cv
39.684 104.536 39.53 104.046 39.53 103.458 cv
39.53 102.646 39.81 102.002 40.398 101.526 cv
40.972 101.05 41.77 100.812 42.792 100.812 cv
43.8 100.812 44.598 101.05 45.186 101.526 cv
45.76 102.002 46.054 102.646 46.054 103.458 cv
46.054 104.046 45.886 104.536 45.55 104.942 cv
45.214 105.348 44.766 105.628 44.178 105.768 cv
44.836 105.922 45.354 106.23 45.732 106.678 cv
46.096 107.126 46.292 107.686 46.292 108.33 cv
46.292 109.324 45.984 110.08 45.382 110.598 cv
44.766 111.13 43.912 111.382 42.792 111.382 cv
41.658 111.382 40.79 111.13 40.188 110.598 cv
39.586 110.08 39.292 109.324 39.292 108.33 cv
39.292 107.686 39.474 107.126 39.852 106.678 cv
40.216 106.23 40.734 105.922 41.406 105.768 cv
40.902 103.584 mo
40.902 104.116 41.056 104.536 41.392 104.83 cv
41.728 105.124 42.19 105.264 42.792 105.264 cv
43.38 105.264 43.842 105.124 44.178 104.83 cv
44.514 104.536 44.682 104.116 44.682 103.584 cv
44.682 103.052 44.514 102.646 44.178 102.352 cv
43.842 102.058 43.38 101.904 42.792 101.904 cv
42.19 101.904 41.728 102.058 41.392 102.352 cv
41.056 102.646 40.902 103.052 40.902 103.584 cv
ef
54.307 59.2 mo
50.807 59.2 li
f
54.307 59.2 mo
50.807 59.2 li
@
26.756 63.358 mo
29.01 63.358 li
29.01 55.574 li
26.56 56.064 li
26.56 54.804 li
28.996 54.314 li
30.382 54.314 li
30.382 63.358 li
32.636 63.358 li
32.636 64.52 li
26.756 64.52 li
26.756 63.358 li
ef
35.398 64.52 mo
36.84 64.52 li
36.84 62.784 li
35.398 62.784 li
cp
f
42.792 55.224 mo
42.078 55.224 41.546 55.574 41.182 56.274 cv
40.818 56.974 40.65 58.024 40.65 59.424 cv
40.65 60.824 40.818 61.874 41.182 62.574 cv
41.546 63.274 42.078 63.624 42.792 63.624 cv
43.506 63.624 44.038 63.274 44.402 62.574 cv
44.752 61.874 44.934 60.824 44.934 59.424 cv
44.934 58.024 44.752 56.974 44.402 56.274 cv
44.038 55.574 43.506 55.224 42.792 55.224 cv
42.792 54.132 mo
43.926 54.132 44.794 54.594 45.41 55.49 cv
46.012 56.4 46.32 57.716 46.32 59.424 cv
46.32 61.146 46.012 62.462 45.41 63.358 cv
44.794 64.254 43.926 64.702 42.792 64.702 cv
41.644 64.702 40.762 64.254 40.16 63.358 cv
39.558 62.462 39.264 61.146 39.264 59.424 cv
39.264 57.716 39.558 56.4 40.16 55.49 cv
40.762 54.594 41.644 54.132 42.792 54.132 cv
ef
54.307 12.493 mo
50.807 12.493 li
f
54.307 12.493 mo
50.807 12.493 li
@
26.756 16.678 mo
29.01 16.678 li
29.01 8.89401 li
26.56 9.384 li
26.56 8.12402 li
28.996 7.634 li
30.382 7.634 li
30.382 16.678 li
32.636 16.678 li
32.636 17.84 li
26.756 17.84 li
26.756 16.678 li
ef
35.398 17.84 mo
36.84 17.84 li
36.84 16.104 li
35.398 16.104 li
cp
f
41.028 16.678 mo
45.844 16.678 li
45.844 17.84 li
39.362 17.84 li
39.362 16.678 li
39.88 16.146 40.594 15.418 41.504 14.494 cv
42.4 13.584 42.974 12.996 43.212 12.73 cv
43.66 12.24 43.968 11.82 44.136 11.47 cv
44.304 11.134 44.402 10.784 44.402 10.448 cv
44.402 9.91602 44.206 9.46802 43.828 9.13202 cv
43.45 8.79602 42.96 8.61401 42.344 8.61401 cv
41.91 8.61401 41.448 8.698 40.972 8.83801 cv
40.496 8.992 39.978 9.216 39.432 9.52402 cv
39.432 8.12402 li
39.992 7.90002 40.51 7.73199 40.986 7.62 cv
41.462 7.508 41.91 7.452 42.316 7.452 cv
43.366 7.452 44.206 7.71802 44.836 8.25 cv
45.466 8.78201 45.788 9.48199 45.788 10.364 cv
45.788 10.784 45.704 11.19 45.55 11.554 cv
45.396 11.932 45.116 12.38 44.696 12.884 cv
44.584 13.024 44.22 13.402 43.604 14.032 cv
42.988 14.662 42.134 15.544 41.028 16.678 cv
ef
7.974 241.588 mo
7.974 239.726 li
16.514 235.204 li
7.974 235.204 li
7.974 233.86 li
18.18 233.86 li
18.18 235.722 li
9.64 240.244 li
18.18 240.244 li
18.18 241.588 li
7.974 241.588 li
ef
11.404 228.236 mo
11.404 228.908 11.67 229.44 12.202 229.832 cv
12.734 230.224 13.448 230.42 14.358 230.42 cv
15.282 230.42 15.996 230.238 16.528 229.846 cv
17.06 229.454 17.312 228.922 17.312 228.236 cv
17.312 227.564 17.06 227.032 16.528 226.64 cv
15.996 226.248 15.282 226.052 14.358 226.052 cv
13.462 226.052 12.734 226.248 12.202 226.64 cv
11.67 227.032 11.404 227.564 11.404 228.236 cv
10.34 228.236 mo
10.34 227.144 10.704 226.29 11.404 225.66 cv
12.118 225.044 13.098 224.722 14.358 224.722 cv
15.618 224.722 16.598 225.044 17.298 225.66 cv
18.012 226.29 18.362 227.144 18.362 228.236 cv
18.362 229.342 18.012 230.21 17.298 230.826 cv
16.598 231.442 15.618 231.75 14.358 231.75 cv
13.098 231.75 12.118 231.442 11.404 230.826 cv
10.704 230.21 10.34 229.342 10.34 228.236 cv
ef
11.698 218.126 mo
11.614 218.266 11.558 218.42 11.516 218.588 cv
11.488 218.756 11.46 218.938 11.46 219.134 cv
11.46 219.848 11.698 220.394 12.16 220.772 cv
12.622 221.164 13.28 221.346 14.148 221.346 cv
18.18 221.346 li
18.18 222.606 li
10.522 222.606 li
10.522 221.346 li
11.712 221.346 li
11.25 221.094 10.9 220.744 10.676 220.324 cv
10.452 219.904 10.34 219.386 10.34 218.77 cv
10.34 218.686 10.354 218.588 10.354 218.476 cv
10.368 218.378 10.382 218.266 10.41 218.126 cv
11.698 218.126 li
ef
11.992 210.84 mo
11.432 210.532 11.026 210.154 10.746 209.72 cv
10.48 209.286 10.34 208.768 10.34 208.166 cv
10.34 207.382 10.62 206.766 11.18 206.332 cv
11.74 205.898 12.538 205.674 13.56 205.674 cv
18.18 205.674 li
18.18 206.934 li
13.602 206.934 li
12.874 206.934 12.328 207.074 11.964 207.326 cv
11.614 207.592 11.432 207.984 11.432 208.516 cv
11.432 209.174 11.656 209.692 12.09 210.07 cv
12.524 210.448 13.112 210.63 13.854 210.63 cv
18.18 210.63 li
18.18 211.89 li
13.602 211.89 li
12.874 211.89 12.328 212.03 11.964 212.282 cv
11.614 212.548 11.432 212.954 11.432 213.486 cv
11.432 214.13 11.656 214.648 12.09 215.026 cv
12.524 215.404 13.112 215.586 13.854 215.586 cv
18.18 215.586 li
18.18 216.846 li
10.522 216.846 li
10.522 215.586 li
11.712 215.586 li
11.25 215.306 10.9 214.956 10.676 214.55 cv
10.452 214.158 10.34 213.682 10.34 213.122 cv
10.34 212.562 10.48 212.1 10.76 211.708 cv
11.04 211.316 11.46 211.036 11.992 210.84 cv
ef
14.33 199.758 mo
14.33 200.78 14.456 201.48 14.68 201.872 cv
14.918 202.264 15.31 202.46 15.87 202.46 cv
16.318 202.46 16.682 202.32 16.934 202.026 cv
17.2 201.732 17.326 201.326 17.326 200.822 cv
17.326 200.122 17.088 199.562 16.584 199.142 cv
16.094 198.722 15.436 198.512 14.61 198.512 cv
14.33 198.512 li
14.33 199.758 li
13.812 197.252 mo
18.18 197.252 li
18.18 198.512 li
17.018 198.512 li
17.494 198.806 17.83 199.17 18.04 199.59 cv
18.25 200.01 18.362 200.542 18.362 201.158 cv
18.362 201.942 18.152 202.572 17.718 203.034 cv
17.284 203.496 16.696 203.72 15.954 203.72 cv
15.1 203.72 14.456 203.44 14.008 202.852 cv
13.574 202.278 13.35 201.424 13.35 200.276 cv
13.35 198.512 li
13.224 198.512 li
12.65 198.512 12.202 198.708 11.88 199.086 cv
11.572 199.464 11.404 199.996 11.404 200.682 cv
11.404 201.13 11.46 201.55 11.572 201.97 cv
11.684 202.39 11.838 202.782 12.034 203.16 cv
10.872 203.16 li
10.704 202.712 10.564 202.264 10.48 201.83 cv
10.396 201.396 10.34 200.976 10.34 200.556 cv
10.34 199.45 10.634 198.624 11.208 198.078 cv
11.782 197.532 12.65 197.252 13.812 197.252 cv
ef
7.54 194.604 mo
18.18 194.604 li
18.18 193.344 li
7.54 193.344 li
cp
f
10.522 190.764 mo
10.522 189.504 li
18.18 189.504 li
18.18 190.764 li
10.522 190.764 li
7.54 190.764 mo
9.136 190.764 mo
7.54 190.764 li
7.54 189.504 li
9.136 189.504 li
cp
ef
10.522 187.35 mo
10.522 181.372 li
11.67 181.372 li
17.172 186.104 li
17.172 181.372 li
18.18 181.372 li
18.18 187.518 li
17.032 187.518 li
11.53 182.786 li
11.53 187.35 li
10.522 187.35 li
ef
14.036 172.932 mo
14.652 172.932 li
14.652 178.714 li
15.52 178.658 16.192 178.406 16.64 177.93 cv
17.088 177.468 17.312 176.824 17.312 175.984 cv
17.312 175.508 17.256 175.032 17.144 174.584 cv
17.032 174.136 16.85 173.674 16.598 173.226 cv
17.788 173.226 li
17.984 173.674 18.138 174.136 18.222 174.612 cv
18.306 175.088 18.362 175.578 18.362 176.054 cv
18.362 177.286 18.012 178.252 17.312 178.966 cv
16.612 179.68 15.646 180.03 14.428 180.03 cv
13.182 180.03 12.188 179.694 11.446 179.022 cv
10.718 178.35 10.34 177.426 10.34 176.278 cv
10.34 175.242 10.676 174.43 11.334 173.828 cv
12.006 173.24 12.902 172.932 14.036 172.932 cv
13.672 174.192 mo
12.986 174.206 12.44 174.402 12.02 174.766 cv
11.614 175.144 11.404 175.648 11.404 176.264 cv
11.404 176.964 11.614 177.524 12.006 177.944 cv
12.398 178.364 12.958 178.616 13.672 178.672 cv
13.672 174.192 li
ef
11.684 165.804 mo
7.54 165.804 li
7.54 164.544 li
18.18 164.544 li
18.18 165.804 li
17.032 165.804 li
17.494 166.07 17.83 166.406 18.04 166.812 cv
18.25 167.218 18.362 167.694 18.362 168.254 cv
18.362 169.178 17.998 169.934 17.27 170.522 cv
16.542 171.11 15.562 171.39 14.358 171.39 cv
13.154 171.39 12.188 171.11 11.446 170.522 cv
10.718 169.934 10.34 169.178 10.34 168.254 cv
10.34 167.694 10.452 167.218 10.676 166.812 cv
10.9 166.406 11.236 166.07 11.684 165.804 cv
14.358 170.088 mo
15.282 170.088 16.01 169.906 16.542 169.528 cv
17.074 169.15 17.326 168.618 17.326 167.946 cv
17.326 167.288 17.074 166.77 16.542 166.378 cv
16.01 166 15.282 165.804 14.358 165.804 cv
13.434 165.804 12.72 166 12.188 166.378 cv
11.656 166.77 11.39 167.288 11.39 167.946 cv
11.39 168.618 11.656 169.15 12.188 169.528 cv
12.72 169.906 13.434 170.088 14.358 170.088 cv
ef
13.392 152.624 mo
13.504 152.33 13.714 152.036 14.036 151.756 cv
14.372 151.476 14.82 151.196 15.394 150.916 cv
18.18 149.516 li
18.18 151 li
15.562 152.302 li
14.89 152.638 14.428 152.974 14.204 153.282 cv
13.98 153.604 13.868 154.038 13.868 154.584 cv
13.868 156.082 li
18.18 156.082 li
18.18 157.468 li
7.974 157.468 li
7.974 154.346 li
7.974 153.184 8.226 152.316 8.702 151.742 cv
9.192 151.168 9.934 150.874 10.914 150.874 cv
11.558 150.874 12.104 151.028 12.524 151.322 cv
12.944 151.63 13.238 152.064 13.392 152.624 cv
9.108 156.082 mo
12.734 156.082 li
12.734 154.346 li
12.734 153.688 12.58 153.184 12.272 152.848 cv
11.964 152.512 11.516 152.33 10.914 152.33 cv
10.326 152.33 9.878 152.512 9.57 152.848 cv
9.262 153.184 9.108 153.688 9.108 154.346 cv
9.108 156.082 li
ef
14.036 141.252 mo
14.652 141.252 li
14.652 147.034 li
15.52 146.978 16.192 146.726 16.64 146.25 cv
17.088 145.788 17.312 145.144 17.312 144.304 cv
17.312 143.828 17.256 143.352 17.144 142.904 cv
17.032 142.456 16.85 141.994 16.598 141.546 cv
17.788 141.546 li
17.984 141.994 18.138 142.456 18.222 142.932 cv
18.306 143.408 18.362 143.898 18.362 144.374 cv
18.362 145.606 18.012 146.572 17.312 147.286 cv
16.612 148 15.646 148.35 14.428 148.35 cv
13.182 148.35 12.188 148.014 11.446 147.342 cv
10.718 146.67 10.34 145.746 10.34 144.598 cv
10.34 143.562 10.676 142.75 11.334 142.148 cv
12.006 141.56 12.902 141.252 14.036 141.252 cv
13.672 142.512 mo
12.986 142.526 12.44 142.722 12.02 143.086 cv
11.614 143.464 11.404 143.968 11.404 144.584 cv
11.404 145.284 11.614 145.844 12.006 146.264 cv
12.398 146.684 12.958 146.936 13.672 146.992 cv
13.672 142.512 li
ef
14.33 135.678 mo
14.33 136.7 14.456 137.4 14.68 137.792 cv
14.918 138.184 15.31 138.38 15.87 138.38 cv
16.318 138.38 16.682 138.24 16.934 137.946 cv
17.2 137.652 17.326 137.246 17.326 136.742 cv
17.326 136.042 17.088 135.482 16.584 135.062 cv
16.094 134.642 15.436 134.432 14.61 134.432 cv
14.33 134.432 li
14.33 135.678 li
13.812 133.172 mo
18.18 133.172 li
18.18 134.432 li
17.018 134.432 li
17.494 134.726 17.83 135.09 18.04 135.51 cv
18.25 135.93 18.362 136.462 18.362 137.078 cv
18.362 137.862 18.152 138.492 17.718 138.954 cv
17.284 139.416 16.696 139.64 15.954 139.64 cv
15.1 139.64 14.456 139.36 14.008 138.772 cv
13.574 138.198 13.35 137.344 13.35 136.196 cv
13.35 134.432 li
13.224 134.432 li
12.65 134.432 12.202 134.628 11.88 135.006 cv
11.572 135.384 11.404 135.916 11.404 136.602 cv
11.404 137.05 11.46 137.47 11.572 137.89 cv
11.684 138.31 11.838 138.702 12.034 139.08 cv
10.872 139.08 li
10.704 138.632 10.564 138.184 10.48 137.75 cv
10.396 137.316 10.34 136.896 10.34 136.476 cv
10.34 135.37 10.634 134.544 11.208 133.998 cv
11.782 133.452 12.65 133.172 13.812 133.172 cv
ef
11.684 125.604 mo
7.54 125.604 li
7.54 124.344 li
18.18 124.344 li
18.18 125.604 li
17.032 125.604 li
17.494 125.87 17.83 126.206 18.04 126.612 cv
18.25 127.018 18.362 127.494 18.362 128.054 cv
18.362 128.978 17.998 129.734 17.27 130.322 cv
16.542 130.91 15.562 131.19 14.358 131.19 cv
13.154 131.19 12.188 130.91 11.446 130.322 cv
10.718 129.734 10.34 128.978 10.34 128.054 cv
10.34 127.494 10.452 127.018 10.676 126.612 cv
10.9 126.206 11.236 125.87 11.684 125.604 cv
14.358 129.888 mo
15.282 129.888 16.01 129.706 16.542 129.328 cv
17.074 128.95 17.326 128.418 17.326 127.746 cv
17.326 127.088 17.074 126.57 16.542 126.178 cv
16.01 125.8 15.282 125.604 14.358 125.604 cv
13.434 125.604 12.72 125.8 12.188 126.178 cv
11.656 126.57 11.39 127.088 11.39 127.746 cv
11.39 128.418 11.656 128.95 12.188 129.328 cv
12.72 129.706 13.434 129.888 14.358 129.888 cv
ef
10.522 121.764 mo
10.522 120.504 li
18.18 120.504 li
18.18 121.764 li
10.522 121.764 li
7.54 121.764 mo
9.136 121.764 mo
7.54 121.764 li
7.54 120.504 li
9.136 120.504 li
cp
ef
13.56 111.434 mo
18.18 111.434 li
18.18 112.694 li
13.602 112.694 li
12.874 112.694 12.342 112.848 11.978 113.128 cv
11.614 113.408 11.432 113.828 11.432 114.388 cv
11.432 115.074 11.656 115.606 12.09 115.998 cv
12.524 116.39 13.112 116.586 13.854 116.586 cv
18.18 116.586 li
18.18 117.846 li
10.522 117.846 li
10.522 116.586 li
11.712 116.586 li
11.264 116.292 10.914 115.942 10.69 115.522 cv
10.466 115.116 10.34 114.64 10.34 114.108 cv
10.34 113.24 10.62 112.568 11.166 112.12 cv
11.712 111.672 12.51 111.434 13.56 111.434 cv
ef
14.26 103.884 mo
13.364 103.884 12.65 104.08 12.146 104.444 cv
11.642 104.822 11.39 105.354 11.39 106.026 cv
11.39 106.698 11.642 107.23 12.146 107.608 cv
12.65 107.986 13.364 108.168 14.26 108.168 cv
15.17 108.168 15.87 107.986 16.374 107.608 cv
16.878 107.23 17.13 106.698 17.13 106.026 cv
17.13 105.354 16.878 104.822 16.374 104.444 cv
15.87 104.08 15.17 103.884 14.26 103.884 cv
17.228 102.624 mo
18.516 102.624 19.482 102.918 20.126 103.492 cv
20.756 104.08 21.078 104.962 21.078 106.152 cv
21.078 106.6 21.036 107.006 20.98 107.398 cv
20.91 107.79 20.812 108.182 20.672 108.546 cv
19.454 108.546 li
19.65 108.182 19.79 107.818 19.888 107.454 cv
19.986 107.09 20.042 106.726 20.042 106.348 cv
20.042 105.536 19.818 104.92 19.398 104.5 cv
18.964 104.094 18.32 103.884 17.452 103.884 cv
16.836 103.884 li
17.284 104.15 17.62 104.486 17.844 104.892 cv
18.068 105.298 18.18 105.774 18.18 106.334 cv
18.18 107.286 17.83 108.042 17.116 108.616 cv
16.402 109.19 15.45 109.47 14.26 109.47 cv
13.084 109.47 12.132 109.19 11.418 108.616 cv
10.704 108.042 10.34 107.286 10.34 106.334 cv
10.34 105.774 10.452 105.298 10.676 104.892 cv
10.9 104.486 11.236 104.15 11.684 103.884 cv
10.522 103.884 li
10.522 102.624 li
17.228 102.624 li
ef
7.974 96.948 mo
7.974 88.324 li
9.136 88.324 li
9.136 91.95 li
18.18 91.95 li
18.18 93.336 li
9.136 93.336 li
9.136 96.948 li
7.974 96.948 li
ef
10.522 87.084 mo
10.522 85.824 li
18.18 85.824 li
18.18 87.084 li
10.522 87.084 li
7.54 87.084 mo
9.136 87.084 mo
7.54 87.084 li
7.54 85.824 li
9.136 85.824 li
cp
ef
11.992 77.28 mo
11.432 76.972 11.026 76.594 10.746 76.16 cv
10.48 75.726 10.34 75.208 10.34 74.606 cv
10.34 73.822 10.62 73.206 11.18 72.772 cv
11.74 72.338 12.538 72.114 13.56 72.114 cv
18.18 72.114 li
18.18 73.374 li
13.602 73.374 li
12.874 73.374 12.328 73.514 11.964 73.766 cv
11.614 74.032 11.432 74.424 11.432 74.956 cv
11.432 75.614 11.656 76.132 12.09 76.51 cv
12.524 76.888 13.112 77.07 13.854 77.07 cv
18.18 77.07 li
18.18 78.33 li
13.602 78.33 li
12.874 78.33 12.328 78.47 11.964 78.722 cv
11.614 78.988 11.432 79.394 11.432 79.926 cv
11.432 80.57 11.656 81.088 12.09 81.466 cv
12.524 81.844 13.112 82.026 13.854 82.026 cv
18.18 82.026 li
18.18 83.286 li
10.522 83.286 li
10.522 82.026 li
11.712 82.026 li
11.25 81.746 10.9 81.396 10.676 80.99 cv
10.452 80.598 10.34 80.122 10.34 79.562 cv
10.34 79.002 10.48 78.54 10.76 78.148 cv
11.04 77.756 11.46 77.476 11.992 77.28 cv
ef
14.036 63.012 mo
14.652 63.012 li
14.652 68.794 li
15.52 68.738 16.192 68.486 16.64 68.01 cv
17.088 67.548 17.312 66.904 17.312 66.064 cv
17.312 65.588 17.256 65.112 17.144 64.664 cv
17.032 64.216 16.85 63.754 16.598 63.306 cv
17.788 63.306 li
17.984 63.754 18.138 64.216 18.222 64.692 cv
18.306 65.168 18.362 65.658 18.362 66.134 cv
18.362 67.366 18.012 68.332 17.312 69.046 cv
16.612 69.76 15.646 70.11 14.428 70.11 cv
13.182 70.11 12.188 69.774 11.446 69.102 cv
10.718 68.43 10.34 67.506 10.34 66.358 cv
10.34 65.322 10.676 64.51 11.334 63.908 cv
12.006 63.32 12.902 63.012 14.036 63.012 cv
13.672 64.272 mo
12.986 64.286 12.44 64.482 12.02 64.846 cv
11.614 65.224 11.404 65.728 11.404 66.344 cv
11.404 67.044 11.614 67.604 12.006 68.024 cv
12.398 68.444 12.958 68.696 13.672 68.752 cv
13.672 64.272 li
ef
2 lc
0 lj
54.307 292.733 mo
54.307 12.493 li
@
446.507 292.733 mo
446.507 12.493 li
@
54.307 292.733 mo
446.507 292.733 li
@
54.307 12.493 mo
446.507 12.493 li
@
330.132 64.509 mo
439.507 64.509 li
440.84 64.509 441.507 63.842 441.507 62.509 cv
441.507 19.493 li
441.507 18.16 440.84 17.493 439.507 17.493 cv
330.132 17.493 li
328.799 17.493 328.132 18.16 328.132 19.493 cv
328.132 62.509 li
328.132 63.842 328.799 64.509 330.132 64.509 cv
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
0 lc
330.132 64.509 mo
439.507 64.509 li
440.84 64.509 441.507 63.842 441.507 62.509 cv
441.507 19.493 li
441.507 18.16 440.84 17.493 439.507 17.493 cv
330.132 17.493 li
328.799 17.493 328.132 18.16 328.132 19.493 cv
328.132 62.509 li
328.132 63.842 328.799 64.509 330.132 64.509 cv
cp
1 /0 /CSD get_res sepcs
.2 sep
@
332.132 29.087 mo
352.132 29.087 li
352.132 22.087 li
332.132 22.087 li
cp
.175418 .676722 .898802 0 cmyk
f
332.132 29.087 mo
352.132 29.087 li
352.132 22.087 li
332.132 22.087 li
cp
gsave
grestore
/222686204.0 
<<
/ID /222686204.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222686204.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
361.16 21.83 mo
362.15 21.83 li
362.15 24.82 li
365.73 24.82 li
365.73 21.83 li
366.72 21.83 li
366.72 29.12 li
365.73 29.12 li
365.73 25.65 li
362.15 25.65 li
362.15 29.12 li
361.16 29.12 li
361.16 21.83 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
371.05 26.37 mo
370.32 26.37 369.82 26.46 369.54 26.62 cv
369.26 26.79 369.12 27.07 369.12 27.47 cv
369.12 27.79 369.22 28.05 369.43 28.23 cv
369.64 28.42 369.93 28.51 370.29 28.51 cv
370.79 28.51 371.19 28.34 371.49 27.98 cv
371.79 27.63 371.94 27.16 371.94 26.57 cv
371.94 26.37 li
371.05 26.37 li
372.84 26 mo
372.84 29.12 li
371.94 29.12 li
371.94 28.29 li
371.73 28.63 371.47 28.87 371.17 29.02 cv
370.87 29.17 370.49 29.25 370.05 29.25 cv
369.49 29.25 369.04 29.1 368.71 28.79 cv
368.38 28.48 368.22 28.06 368.22 27.53 cv
368.22 26.92 368.42 26.46 368.84 26.14 cv
369.25 25.83 369.86 25.67 370.68 25.67 cv
371.94 25.67 li
371.94 25.58 li
371.94 25.17 371.8 24.85 371.53 24.62 cv
371.26 24.4 370.88 24.28 370.39 24.28 cv
370.07 24.28 369.77 24.32 369.47 24.4 cv
369.17 24.48 368.89 24.59 368.62 24.73 cv
368.62 23.9 li
368.94 23.78 369.26 23.68 369.57 23.62 cv
369.88 23.56 370.18 23.52 370.48 23.52 cv
371.27 23.52 371.86 23.73 372.25 24.14 cv
372.64 24.55 372.84 25.17 372.84 26 cv
ef
378.28 24.48 mo
378.28 21.52 li
379.18 21.52 li
379.18 29.12 li
378.28 29.12 li
378.28 28.3 li
378.09 28.63 377.85 28.87 377.56 29.02 cv
377.27 29.17 376.93 29.25 376.53 29.25 cv
375.87 29.25 375.33 28.99 374.91 28.47 cv
374.49 27.95 374.29 27.25 374.29 26.39 cv
374.29 25.53 374.49 24.84 374.91 24.31 cv
375.33 23.79 375.87 23.52 376.53 23.52 cv
376.93 23.52 377.27 23.6 377.56 23.76 cv
377.85 23.92 378.09 24.16 378.28 24.48 cv
375.22 26.39 mo
375.22 27.05 375.35 27.57 375.62 27.95 cv
375.89 28.33 376.27 28.51 376.75 28.51 cv
377.22 28.51 377.59 28.33 377.87 27.95 cv
378.14 27.57 378.28 27.05 378.28 26.39 cv
378.28 25.73 378.14 25.22 377.87 24.84 cv
377.59 24.46 377.22 24.27 376.75 24.27 cv
376.27 24.27 375.89 24.46 375.62 24.84 cv
375.35 25.22 375.22 25.73 375.22 26.39 cv
ef
383.16 24.28 mo
382.68 24.28 382.3 24.47 382.02 24.85 cv
381.74 25.23 381.6 25.74 381.6 26.39 cv
381.6 27.05 381.73 27.56 382.01 27.94 cv
382.29 28.32 382.67 28.5 383.16 28.5 cv
383.64 28.5 384.02 28.32 384.3 27.94 cv
384.58 27.56 384.72 27.05 384.72 26.39 cv
384.72 25.75 384.58 25.23 384.3 24.85 cv
384.02 24.47 383.64 24.28 383.16 24.28 cv
383.16 23.52 mo
383.94 23.52 384.55 23.78 385 24.28 cv
385.44 24.79 385.67 25.49 385.67 26.39 cv
385.67 27.29 385.44 27.99 385 28.49 cv
384.55 29 383.94 29.25 383.16 29.25 cv
382.37 29.25 381.75 29 381.31 28.49 cv
380.87 27.99 380.65 27.29 380.65 26.39 cv
380.65 25.49 380.87 24.79 381.31 24.28 cv
381.75 23.78 382.37 23.52 383.16 23.52 cv
ef
389.28 24.28 mo
388.8 24.28 388.42 24.47 388.14 24.85 cv
387.86 25.23 387.72 25.74 387.72 26.39 cv
387.72 27.05 387.85 27.56 388.13 27.94 cv
388.41 28.32 388.79 28.5 389.28 28.5 cv
389.76 28.5 390.14 28.32 390.42 27.94 cv
390.7 27.56 390.84 27.05 390.84 26.39 cv
390.84 25.75 390.7 25.23 390.42 24.85 cv
390.14 24.47 389.76 24.28 389.28 24.28 cv
389.28 23.52 mo
390.06 23.52 390.67 23.78 391.12 24.28 cv
391.56 24.79 391.79 25.49 391.79 26.39 cv
391.79 27.29 391.56 27.99 391.12 28.49 cv
390.67 29 390.06 29.25 389.28 29.25 cv
388.49 29.25 387.87 29 387.43 28.49 cv
386.99 27.99 386.77 27.29 386.77 26.39 cv
386.77 25.49 386.99 24.79 387.43 24.28 cv
387.87 23.78 388.49 23.52 389.28 23.52 cv
ef
394.15 28.3 mo
394.15 31.19 li
393.25 31.19 li
393.25 23.65 li
394.15 23.65 li
394.15 24.48 li
394.33 24.16 394.57 23.92 394.86 23.76 cv
395.15 23.6 395.5 23.52 395.9 23.52 cv
396.56 23.52 397.1 23.79 397.52 24.31 cv
397.93 24.84 398.14 25.53 398.14 26.39 cv
398.14 27.25 397.93 27.95 397.52 28.47 cv
397.1 28.99 396.56 29.25 395.9 29.25 cv
395.5 29.25 395.15 29.17 394.86 29.02 cv
394.57 28.87 394.33 28.63 394.15 28.3 cv
397.21 26.39 mo
397.21 25.73 397.07 25.22 396.8 24.84 cv
396.52 24.46 396.15 24.27 395.68 24.27 cv
395.2 24.27 394.83 24.46 394.56 24.84 cv
394.28 25.22 394.15 25.73 394.15 26.39 cv
394.15 27.05 394.28 27.57 394.56 27.95 cv
394.83 28.33 395.2 28.51 395.68 28.51 cv
396.15 28.51 396.52 28.33 396.8 27.95 cv
397.07 27.57 397.21 27.05 397.21 26.39 cv
ef
399.19 26.78 mo
401.82 26.78 li
401.82 25.98 li
399.19 25.98 li
cp
f
406.84 24.48 mo
406.84 21.52 li
407.74 21.52 li
407.74 29.12 li
406.84 29.12 li
406.84 28.3 li
406.65 28.63 406.41 28.87 406.12 29.02 cv
405.83 29.17 405.49 29.25 405.09 29.25 cv
404.43 29.25 403.89 28.99 403.47 28.47 cv
403.05 27.95 402.85 27.25 402.85 26.39 cv
402.85 25.53 403.05 24.84 403.47 24.31 cv
403.89 23.79 404.43 23.52 405.09 23.52 cv
405.49 23.52 405.83 23.6 406.12 23.76 cv
406.41 23.92 406.65 24.16 406.84 24.48 cv
403.78 26.39 mo
403.78 27.05 403.91 27.57 404.18 27.95 cv
404.45 28.33 404.83 28.51 405.31 28.51 cv
405.78 28.51 406.15 28.33 406.43 27.95 cv
406.7 27.57 406.84 27.05 406.84 26.39 cv
406.84 25.73 406.7 25.22 406.43 24.84 cv
406.15 24.46 405.78 24.27 405.31 24.27 cv
404.83 24.27 404.45 24.46 404.18 24.84 cv
403.91 25.22 403.78 25.73 403.78 26.39 cv
ef
414.28 26.16 mo
414.28 26.6 li
410.15 26.6 li
410.19 27.22 410.37 27.7 410.71 28.02 cv
411.04 28.34 411.5 28.5 412.1 28.5 cv
412.44 28.5 412.78 28.46 413.1 28.38 cv
413.42 28.3 413.75 28.17 414.07 27.99 cv
414.07 28.84 li
413.75 28.98 413.42 29.09 413.08 29.15 cv
412.74 29.21 412.39 29.25 412.05 29.25 cv
411.17 29.25 410.48 29 409.97 28.5 cv
409.46 28 409.21 27.31 409.21 26.44 cv
409.21 25.55 409.45 24.84 409.93 24.31 cv
410.41 23.79 411.07 23.52 411.89 23.52 cv
412.63 23.52 413.21 23.76 413.64 24.23 cv
414.06 24.71 414.28 25.35 414.28 26.16 cv
413.38 25.9 mo
413.37 25.41 413.23 25.02 412.97 24.72 cv
412.7 24.43 412.34 24.28 411.9 24.28 cv
411.4 24.28 411 24.43 410.7 24.71 cv
410.4 24.99 410.22 25.39 410.18 25.9 cv
413.38 25.9 li
ef
418.49 21.52 mo
418.49 22.27 li
417.63 22.27 li
417.31 22.27 417.08 22.34 416.96 22.47 cv
416.83 22.6 416.77 22.83 416.77 23.17 cv
416.77 23.65 li
418.25 23.65 li
418.25 24.35 li
416.77 24.35 li
416.77 29.12 li
415.87 29.12 li
415.87 24.35 li
415.01 24.35 li
415.01 23.65 li
415.87 23.65 li
415.87 23.27 li
415.87 22.67 416.01 22.22 416.29 21.94 cv
416.57 21.66 417.02 21.52 417.64 21.52 cv
418.49 21.52 li
ef
421.81 26.37 mo
421.08 26.37 420.58 26.46 420.3 26.62 cv
420.02 26.79 419.88 27.07 419.88 27.47 cv
419.88 27.79 419.98 28.05 420.19 28.23 cv
420.4 28.42 420.69 28.51 421.05 28.51 cv
421.55 28.51 421.95 28.34 422.25 27.98 cv
422.55 27.63 422.7 27.16 422.7 26.57 cv
422.7 26.37 li
421.81 26.37 li
423.6 26 mo
423.6 29.12 li
422.7 29.12 li
422.7 28.29 li
422.49 28.63 422.23 28.87 421.93 29.02 cv
421.63 29.17 421.25 29.25 420.81 29.25 cv
420.25 29.25 419.8 29.1 419.47 28.79 cv
419.14 28.48 418.98 28.06 418.98 27.53 cv
418.98 26.92 419.18 26.46 419.6 26.14 cv
420.01 25.83 420.62 25.67 421.44 25.67 cv
422.7 25.67 li
422.7 25.58 li
422.7 25.17 422.56 24.85 422.29 24.62 cv
422.02 24.4 421.64 24.28 421.15 24.28 cv
420.83 24.28 420.53 24.32 420.23 24.4 cv
419.93 24.48 419.65 24.59 419.38 24.73 cv
419.38 23.9 li
419.7 23.78 420.02 23.68 420.33 23.62 cv
420.64 23.56 420.94 23.52 421.24 23.52 cv
422.03 23.52 422.62 23.73 423.01 24.14 cv
423.4 24.55 423.6 25.17 423.6 26 cv
ef
425.35 26.96 mo
425.35 23.65 li
426.25 23.65 li
426.25 26.93 li
426.25 27.45 426.35 27.83 426.55 28.09 cv
426.75 28.35 427.05 28.48 427.46 28.48 cv
427.94 28.48 428.33 28.33 428.61 28.02 cv
428.89 27.71 429.03 27.29 429.03 26.75 cv
429.03 23.65 li
429.93 23.65 li
429.93 29.12 li
429.03 29.12 li
429.03 28.28 li
428.81 28.62 428.55 28.86 428.27 29.02 cv
427.98 29.17 427.65 29.25 427.27 29.25 cv
426.64 29.25 426.16 29.06 425.84 28.67 cv
425.51 28.29 425.35 27.72 425.35 26.96 cv
427.61 23.52 mo
427.61 23.52 li
ef
431.8 29.12 mo
432.7 29.12 li
432.7 21.52 li
431.8 21.52 li
cp
f
435.45 22.1 mo
435.45 23.65 li
437.3 23.65 li
437.3 24.35 li
435.45 24.35 li
435.45 27.32 li
435.45 27.77 435.51 28.06 435.63 28.18 cv
435.75 28.31 436 28.37 436.38 28.37 cv
437.3 28.37 li
437.3 29.12 li
436.38 29.12 li
435.68 29.12 435.2 28.99 434.94 28.73 cv
434.68 28.47 434.55 28 434.55 27.32 cv
434.55 24.35 li
433.89 24.35 li
433.89 23.65 li
434.55 23.65 li
434.55 22.1 li
435.45 22.1 li
ef
332.132 43.759 mo
352.132 43.759 li
352.132 36.759 li
332.132 36.759 li
cp
0 .644831 .344976 0 cmyk
f
332.132 43.759 mo
352.132 43.759 li
352.132 36.759 li
332.132 36.759 li
cp
gsave
grestore
/222686400.0 
<<
/ID /222686400.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
72 0 li
72 72 li
0 72 li
cp
clp
{-36 36 mo
36 -36 li
-24 48 mo
48 -24 li
-12 60 mo
60 -12 li
0 72 mo
72 0 li
12 84 mo
84 12 li
24 96 mo
96 24 li
36 108 mo
108 36 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222686400.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
360.51 36.47 mo
361.51 36.47 li
363.04 42.63 li
364.57 36.47 li
365.68 36.47 li
367.21 42.63 li
368.74 36.47 li
369.74 36.47 li
367.91 43.76 li
366.67 43.76 li
365.13 37.43 li
363.58 43.76 li
362.34 43.76 li
360.51 36.47 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
373.44 37.44 mo
372.1 41.07 li
374.78 41.07 li
373.44 37.44 li
372.88 36.47 mo
374 36.47 li
376.78 43.76 li
375.75 43.76 li
375.09 41.89 li
371.8 41.89 li
371.14 43.76 li
370.1 43.76 li
372.88 36.47 li
ef
382.21 36.71 mo
382.21 37.67 li
381.83 37.49 381.48 37.36 381.15 37.27 cv
380.81 37.19 380.49 37.14 380.19 37.14 cv
379.65 37.14 379.23 37.25 378.94 37.45 cv
378.65 37.66 378.51 37.96 378.51 38.34 cv
378.51 38.66 378.6 38.91 378.8 39.07 cv
378.99 39.24 379.36 39.37 379.9 39.47 cv
380.5 39.59 li
381.23 39.73 381.77 39.98 382.12 40.33 cv
382.47 40.69 382.65 41.16 382.65 41.75 cv
382.65 42.46 382.41 42.99 381.94 43.35 cv
381.46 43.71 380.77 43.89 379.86 43.89 cv
379.51 43.89 379.14 43.85 378.75 43.78 cv
378.36 43.71 377.96 43.6 377.55 43.44 cv
377.55 42.42 li
377.95 42.65 378.34 42.82 378.72 42.93 cv
379.1 43.05 379.48 43.1 379.86 43.1 cv
380.42 43.1 380.85 42.99 381.16 42.77 cv
381.46 42.55 381.62 42.24 381.62 41.82 cv
381.62 41.46 381.51 41.18 381.29 40.98 cv
381.07 40.78 380.71 40.63 380.21 40.53 cv
379.61 40.41 li
378.87 40.27 378.34 40.04 378.01 39.72 cv
377.68 39.41 377.52 38.98 377.52 38.42 cv
377.52 37.78 377.74 37.27 378.2 36.9 cv
378.65 36.53 379.28 36.34 380.08 36.34 cv
380.42 36.34 380.76 36.37 381.12 36.43 cv
381.47 36.49 381.83 36.59 382.21 36.71 cv
ef
384.2 36.47 mo
385.19 36.47 li
385.19 39.46 li
388.77 39.46 li
388.77 36.47 li
389.76 36.47 li
389.76 43.76 li
388.77 43.76 li
388.77 40.29 li
385.19 40.29 li
385.19 43.76 li
384.2 43.76 li
384.2 36.47 li
ef
391.27 41.42 mo
393.9 41.42 li
393.9 40.62 li
391.27 40.62 li
cp
f
398.92 40.96 mo
398.92 40.32 398.78 39.81 398.52 39.45 cv
398.25 39.09 397.87 38.91 397.39 38.91 cv
396.91 38.91 396.53 39.09 396.26 39.45 cv
395.99 39.81 395.86 40.32 395.86 40.96 cv
395.86 41.61 395.99 42.11 396.26 42.47 cv
396.53 42.83 396.91 43.01 397.39 43.01 cv
397.87 43.01 398.25 42.83 398.52 42.47 cv
398.78 42.11 398.92 41.61 398.92 40.96 cv
399.82 43.08 mo
399.82 44 399.61 44.69 399.2 45.15 cv
398.78 45.6 398.15 45.83 397.3 45.83 cv
396.98 45.83 396.69 45.8 396.41 45.76 cv
396.13 45.71 395.85 45.64 395.59 45.54 cv
395.59 44.67 li
395.85 44.81 396.11 44.91 396.37 44.98 cv
396.63 45.05 396.89 45.09 397.16 45.09 cv
397.74 45.09 398.18 44.93 398.48 44.63 cv
398.77 44.32 398.92 43.86 398.92 43.24 cv
398.92 42.8 li
398.73 43.12 398.49 43.36 398.2 43.52 cv
397.91 43.68 397.57 43.76 397.17 43.76 cv
396.49 43.76 395.95 43.51 395.54 43 cv
395.13 42.49 394.93 41.81 394.93 40.96 cv
394.93 40.12 395.13 39.44 395.54 38.93 cv
395.95 38.42 396.49 38.16 397.17 38.16 cv
397.57 38.16 397.91 38.24 398.2 38.4 cv
398.49 38.56 398.73 38.8 398.92 39.12 cv
398.92 38.29 li
399.82 38.29 li
399.82 43.08 li
ef
404.85 39.13 mo
404.75 39.07 404.64 39.03 404.52 39 cv
404.4 38.98 404.27 38.96 404.13 38.96 cv
403.62 38.96 403.23 39.13 402.96 39.46 cv
402.68 39.79 402.55 40.26 402.55 40.88 cv
402.55 43.76 li
401.65 43.76 li
401.65 38.29 li
402.55 38.29 li
402.55 39.14 li
402.73 38.81 402.98 38.56 403.28 38.4 cv
403.58 38.24 403.95 38.16 404.39 38.16 cv
404.45 38.16 404.52 38.17 404.6 38.17 cv
404.67 38.18 404.75 38.19 404.85 38.21 cv
404.85 39.13 li
ef
410.44 40.8 mo
410.44 41.24 li
406.31 41.24 li
406.35 41.86 406.53 42.34 406.87 42.66 cv
407.2 42.98 407.66 43.14 408.26 43.14 cv
408.6 43.14 408.94 43.1 409.26 43.02 cv
409.58 42.94 409.91 42.81 410.23 42.63 cv
410.23 43.48 li
409.91 43.62 409.58 43.73 409.24 43.79 cv
408.9 43.85 408.55 43.89 408.21 43.89 cv
407.33 43.89 406.64 43.64 406.13 43.14 cv
405.62 42.64 405.37 41.95 405.37 41.08 cv
405.37 40.19 405.61 39.48 406.09 38.95 cv
406.57 38.43 407.23 38.16 408.05 38.16 cv
408.79 38.16 409.37 38.4 409.8 38.87 cv
410.22 39.35 410.44 39.99 410.44 40.8 cv
409.54 40.54 mo
409.53 40.05 409.39 39.66 409.13 39.36 cv
408.86 39.07 408.5 38.92 408.06 38.92 cv
407.56 38.92 407.16 39.07 406.86 39.35 cv
406.56 39.63 406.38 40.03 406.34 40.54 cv
409.54 40.54 li
ef
416.56 40.8 mo
416.56 41.24 li
412.43 41.24 li
412.47 41.86 412.65 42.34 412.99 42.66 cv
413.32 42.98 413.78 43.14 414.38 43.14 cv
414.72 43.14 415.06 43.1 415.38 43.02 cv
415.7 42.94 416.03 42.81 416.35 42.63 cv
416.35 43.48 li
416.03 43.62 415.7 43.73 415.36 43.79 cv
415.02 43.85 414.67 43.89 414.33 43.89 cv
413.45 43.89 412.76 43.64 412.25 43.14 cv
411.74 42.64 411.49 41.95 411.49 41.08 cv
411.49 40.19 411.73 39.48 412.21 38.95 cv
412.69 38.43 413.35 38.16 414.17 38.16 cv
414.91 38.16 415.49 38.4 415.92 38.87 cv
416.34 39.35 416.56 39.99 416.56 40.8 cv
415.66 40.54 mo
415.65 40.05 415.51 39.66 415.25 39.36 cv
414.98 39.07 414.62 38.92 414.18 38.92 cv
413.68 38.92 413.28 39.07 412.98 39.35 cv
412.68 39.63 412.5 40.03 412.46 40.54 cv
415.66 40.54 li
ef
421.6 39.12 mo
421.6 36.16 li
422.5 36.16 li
422.5 43.76 li
421.6 43.76 li
421.6 42.94 li
421.41 43.27 421.17 43.51 420.88 43.66 cv
420.59 43.81 420.25 43.89 419.85 43.89 cv
419.19 43.89 418.65 43.63 418.23 43.11 cv
417.81 42.59 417.61 41.89 417.61 41.03 cv
417.61 40.17 417.81 39.48 418.23 38.95 cv
418.65 38.43 419.19 38.16 419.85 38.16 cv
420.25 38.16 420.59 38.24 420.88 38.4 cv
421.17 38.56 421.41 38.8 421.6 39.12 cv
418.54 41.03 mo
418.54 41.69 418.67 42.21 418.94 42.59 cv
419.21 42.97 419.59 43.15 420.07 43.15 cv
420.54 43.15 420.91 42.97 421.19 42.59 cv
421.46 42.21 421.6 41.69 421.6 41.03 cv
421.6 40.37 421.46 39.86 421.19 39.48 cv
420.91 39.1 420.54 38.91 420.07 38.91 cv
419.59 38.91 419.21 39.1 418.94 39.48 cv
418.67 39.86 418.54 40.37 418.54 41.03 cv
ef
426.64 44.26 mo
426.38 44.9 426.13 45.33 425.89 45.53 cv
425.65 45.73 425.33 45.83 424.93 45.83 cv
424.21 45.83 li
424.21 45.08 li
424.74 45.08 li
424.98 45.08 425.17 45.02 425.31 44.9 cv
425.45 44.78 425.6 44.51 425.77 44.07 cv
425.93 43.67 li
423.72 38.29 li
424.67 38.29 li
426.38 42.57 li
428.09 38.29 li
429.04 38.29 li
426.64 44.26 li
ef
332.132 58.431 mo
352.132 58.431 li
352.132 51.431 li
332.132 51.431 li
cp
.609064 .118654 .887358 0 cmyk
f
332.132 58.431 mo
352.132 58.431 li
352.132 51.431 li
332.132 51.431 li
cp
gsave
grestore
/222686596.0 
<<
/ID /222686596.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 72 72 ] 
/XStep 72 
/YStep 72 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
{0 6 mo
72 6 li
0 18 mo
72 18 li
0 30 mo
72 30 li
0 42 mo
72 42 li
0 54 mo
72 54 li
0 66 mo
72 66 li
6 0 mo
6 72 li
18 0 mo
18 72 li
30 0 mo
30 72 li
42 0 mo
42 72 li
54 0 mo
54 72 li
66 0 mo
66 72 li
}exec
false sop
1 /0 /CSD get_res sepcs
1 sep
f
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/222686596.0 /Pattern get_res
[1 0 0 -1 .294006 -.0270996 ]make_pattern set_pattern
f
2 vmreclaim
364.64 53.16 mo
364.54 53.12 364.44 53.08 364.32 53.05 cv
364.2 53.03 364.08 53.01 363.95 53.01 cv
363.47 53.01 363.05 53.2 362.69 53.56 cv
362.33 53.92 362.1 54.41 361.98 55.01 cv
361.43 57.8 li
360.53 57.8 li
361.6 52.33 li
362.5 52.33 li
362.33 53.18 li
362.56 52.87 362.84 52.63 363.18 52.46 cv
363.51 52.29 363.86 52.2 364.24 52.2 cv
364.33 52.2 364.42 52.21 364.52 52.22 cv
364.62 52.23 364.71 52.25 364.81 52.27 cv
364.64 53.16 li
false sop
1 /0 /CSD get_res sepcs
1 sep
ef
364.59 50.51 mo
365.59 50.51 li
367.12 56.67 li
368.65 50.51 li
369.76 50.51 li
371.29 56.67 li
372.82 50.51 li
373.82 50.51 li
371.99 57.8 li
370.75 57.8 li
369.21 51.47 li
367.66 57.8 li
366.42 57.8 li
364.59 50.51 li
ef
377.52 51.48 mo
376.18 55.11 li
378.86 55.11 li
377.52 51.48 li
376.96 50.51 mo
378.08 50.51 li
380.86 57.8 li
379.83 57.8 li
379.17 55.93 li
375.88 55.93 li
375.22 57.8 li
374.18 57.8 li
376.96 50.51 li
ef
386.29 50.75 mo
386.29 51.71 li
385.91 51.53 385.56 51.4 385.23 51.31 cv
384.89 51.23 384.57 51.18 384.27 51.18 cv
383.73 51.18 383.31 51.29 383.02 51.49 cv
382.73 51.7 382.59 52 382.59 52.38 cv
382.59 52.7 382.68 52.95 382.88 53.11 cv
383.07 53.28 383.44 53.41 383.98 53.51 cv
384.58 53.63 li
385.31 53.77 385.85 54.02 386.2 54.37 cv
386.55 54.73 386.73 55.2 386.73 55.79 cv
386.73 56.5 386.49 57.03 386.02 57.39 cv
385.54 57.75 384.85 57.93 383.94 57.93 cv
383.59 57.93 383.22 57.89 382.83 57.82 cv
382.44 57.75 382.04 57.64 381.63 57.48 cv
381.63 56.46 li
382.03 56.69 382.42 56.86 382.8 56.97 cv
383.18 57.09 383.56 57.14 383.94 57.14 cv
384.5 57.14 384.93 57.03 385.24 56.81 cv
385.54 56.59 385.7 56.28 385.7 55.86 cv
385.7 55.5 385.59 55.22 385.37 55.02 cv
385.15 54.82 384.79 54.67 384.29 54.57 cv
383.69 54.45 li
382.95 54.31 382.42 54.08 382.09 53.76 cv
381.76 53.45 381.6 53.02 381.6 52.46 cv
381.6 51.82 381.82 51.31 382.28 50.94 cv
382.73 50.57 383.36 50.38 384.16 50.38 cv
384.5 50.38 384.84 50.41 385.2 50.47 cv
385.55 50.53 385.91 50.63 386.29 50.75 cv
ef
388.28 50.51 mo
389.27 50.51 li
389.27 53.5 li
392.85 53.5 li
392.85 50.51 li
393.84 50.51 li
393.84 57.8 li
392.85 57.8 li
392.85 54.33 li
389.27 54.33 li
389.27 57.8 li
388.28 57.8 li
388.28 50.51 li
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
[/Pattern [/222702848.0 /222703044.0 /222703240.0 /222703436.0 /222703632.0 
/222703828.0 /222685616.0 /222685812.0 /222686008.0 /222686204.0 
/222686400.0 /222686596.0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
